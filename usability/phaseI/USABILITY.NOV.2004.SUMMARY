################################################################################
# Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
################################################################################


                 Phase I Usability Study   11/17/04
         Conducted by Martin Shulz, Helen Stepanov, and Al Stipek


          As always, there's definitely room for improvement...


Martin picked some very good candidates and I'd like to thank him and
all the candidates for their time.    Martin's set the bar for future
studies.

Four candidates were chosen for the study conducted on 11/17/04.   Two were
tool users/developers and two were application engineers.   A fifth
candidate was studied after 11/17/04 and those results are also included
in this summary.


Following is a summary of comments and observations.

x - Save As...

   This was definitely a problem.  Users are drawn to the top level
   main window's "File" entry to do a save.   This was repeated
   by 4 candidates.     There were many suggestions regarding what
   format should be save, but there was uniform agreement that this
   functionality should hang off the main window's File (menu) entry.

   Additionally there seems to be several formats the users
   want to save the data.   First, they want the actual performance
   data saved to a file so they can come back later and do more
   interrogation with openss.  Open|SpeedShop will save the data by default,
   but there should be a way for the user to interface and rename the file.
   Also wanted is the ability to save the data in an easily readable format
   that could be parsed with a script.  i.e. ASCII.    One individual
   politely requested the ability to export data in a tab deliminated list
   to input to a spreadsheet application.

   Only one individual commented they'd like to see the graphical
   data saved to a file so it could be shown later in a report.  Another
   commented that they'd rather be able to drag-n-drop the
   graphics into a presentation such as PowerPoint, rather than
   be required to save away the file names.

   There will be some usability issues that will result from moving
   this functionality to the top level.   The question of "What"
   is actually being saved will be a problem.    To alleviate this
   the candidates and observers discussed the possibility of having
   the File->Save As menu be more robust.   That is, there will be
   a need for the menu to allow the user to easily select which
   experiment (they may have more than one on the screen) should be
   saved to a file.   AND... What format to save the data.
   i.e. ASCII text, performance information file, graphical.

   It still will be important to have this feature pushed down to
   each panel type.   That will allow for each panel to be saved if
   the user doesn't want to save the entire session's output.   This may
   be accomplished with a local menu accessing the same dialog interface
   to save the panels contents.
   Partially completed: I pulled the entry point to save and load
                        experiment data to the main File menu.
                        The rest of the implementation will be done
                        once the underlying functionality is available.

x - Load Experiment
   While this feature wasn't enabled for the usability test, one user
   made a very good suggestion.  They suggested to have a list of available
   experiments to open, via the File->Load Experiment menu.
   i.e. File->Load Experiment->Expr 1 (pcsamp)
                                                   Columbia (MPI)
   Partially completed: I pulled the entry point to save and load
                        experiment data to the main File menu.
                        The rest of the implementation will be done
                        once the underlying functionality is available.
                                                   New ...
   - Make the CommandPanel optional
   Since there's a default command line interface (cli) terminal, make the
   CommandPanel optional.

x - Drag-n-Drop of Panels
   Targets icon needs to be defined better.   Also there may be a
   need to put some menu entry out to help the user move panels
   around.  i.e. Drag Panel, Move Panel Up, Move Panel Over ???
   Fixed: I defined a new MIME type for a panel drag-n-drop.   This
   allows the drag-n-drop to targets to be define more accurately.

   When drag-n-drop is happening, the drop locations need to be better
   indicated to the user. It was unclear that the drop zone was in the tab
   area.   The drop zone should be the entire panel container area.
   Fixed: See fix from paragraph above...

   Additionally is seems that double-clicking may be a good metaphor
   for peeling off panels into their own windows.
   FIXED: current:OpenSpeedShop:184212a
          Allow double click to equate to peeling off a window.

x - Panel menus
   The panel menus are not obvious.   There should be an indicator
   possibly a 'v'  (Upside down triangle.), located on the panels tab,
   to indicate there's something there to menu.

   Overall, users found all the menus they need (fairly quickly)
   for the tasks requested.
   FIXED: Added a menu pulldown indicator to the tabs.

 - Panel Container menus
   One user suggested additional entries when bringing up the menu
   over a blank panel container.   One that helps the user (with possible
   suggestions) about what they can do with the screen area.

 - Expand tab names
   There's a need for a more expressive naming of tabs.   This could
   possibly be accomplished with a pop up help like expansion or with
   color coding and pattern coding.  i.e. as in TotalView.

x - Splitting of Panels
   Divide up the panels between the panels.

   When splitting panel containers, all/most users suggested
   we move one of the panels to the new panel.   I'm not sure we decided
   how to do this exactly, so I'll submit this for feedback.  When more than
   one panel is in a panel container and the use splits the panel container,
   the top panel (visible panel) should stay in the current panel and all
   others should be moved to the new panel container.

   FIXED: Modid:  current:OpenSpeedShop:184185a
               current:OpenSpeedShop:184186a
          During the usability study it was suggested by several 
          candidates that when splitting panel containers that had multiply 
          panels in them that the panels should be divided between the new 
          panel containers.

          This mod fulfills the request.  When more than one panel is in the 
          panel container, and a request to split the panel container is made, 
          the current panel stays in the current panel container and all other 
          panels are moved to the new panel container.

x - Fonts, fonts, fonts
   The default font selected not the best.   Additionally it wasn't obvious
   how to set the font.
   First, we should select a better default (more universal font).   Second,
   we should add an entry in the man page to allow the user to change the
   global font (i.e. Simply document the -fn option.), Finally, we should
   have a top-level font entry (likely in the preference panel) that will
   change the global font.  (This feature is supported in Qt.)
   FIXED: I pulled all font specifying.  I now go with whatever the user
          specifies.  Further I have the -fn option explicitly documented in
          the online-cli-help and the command line help.


 - Diving clues
   Discussion during a summary interview led to a comment that when one
   hovers over a line in the source, and there's something that can be
   done (diving/menu) a visual clue like highlighting or underlining should
   be done to emphasize the functionality.

 - Accidental Deletion of Panel Container
   When a user removes a Panel Container (or a Panel for that matter) that
   cannot be easily reproduce they should be prompted before the action
   occurs.   i.e. "Do you really want to delete this Panel? Y/N"
   Possibly, as a more robust feature, add an "Undo" feature.  
   The problem that occurred in the study, will not (should not) be
   a problem when the full-featured tool is available.   In the shipped
   version, there would be panel specific (in this case pcSample Panel)
   menu that would have allowed the user to bring back the reports.

   The other (bigger) problem is if the user accidentally deletes the
   experiment panel.   There likely should be a prompt for this (if an
   experiment has actually been defined) delete.   Otherwise, to compliment
   this, there should be some management function that lists all the
   current experiments.   
   It should be noted that the command line interface (cli) is the keeper of
   all experiments.   So it's (should be) possible for the user to
   close an experiment panel (pcSample) but not delete the experiment (i.e
   the cli still can manage it).   There will likely need to be a dialog
   prompt, when a gui delete of an experiment occurs.  The dialog may
   have three choices.    "Whoops!", "Terminate and delete experiment",
   or simply "Close the gui's experiment panel".

   A side problem recognized, while typing up this summary, is that I now
   realize the user can delete the experiment in the cli while running in
   gui mode.    This action needs to alert the gui that any associated
   panels must be disabled or deleted.

 - Graphics/No Graphics
   Displaying graphics (i.e. pie chart) on top 'n' panel by default
   may not be the best approach.   A report may be all that's needed.
   One user commented that they'd like the colors nixed as well.

   The follow up discussions were regarding; Is a pie chart that useful?
   If we don't show the graphics by default, will the user find them
   when they need them?   If the graphics are really valuable, possibly
   shrink them up to a thumbnail that can be expanded.   Also, the graphics
   should have labels on them.  (At least when the size is large enough
   to accommodate text.)

   The panel's function is to show the top 'n' routines.  Where 'n' is user
   definable. 
 - Empty Panel Containers
   Some users commented there never should be an empty panel container
   left on the screen.   I'm not sure I agree, but am open to being
   convinced.   My argument against this would be the user can take
   an empty panel container, split it the way they like, then drag
   the panels they want organized into the newly divided interface.

   While I agree we should have a blank screen... but I'm not sure what
   to place (in the background?) by default.

 - File Dialog color annotation
   One user commented that the File Dialog should use some color to
   distinguish file types.   Highlighting executable files.

 - Source Navigation vs Result (data) navigation.
   There needs to be a Source Browsing/Source Navigation added and
   integrated with openss.   Toolgear may be a very good place to start.

   Apparently, its common to have many disjoint directories contain
   multiple levels of directories with source files.  There's a need to
   have a way to find and manipulate the searching of these directory
   structures.   There needs to be a way of rearranging the searching.
   When doing this loop detection needs to be implemented.  The searching
   also needs to be able to be interrupted.  One also needs to be able to
   save away the modifications as well.
                                                                              
   Further the user comments that path names can be at least 128 characters.
   The toolgear approach is to truncate the filenames, then use pop up help
   technology to volunteer the specific file information.

   Regarding source navigation there needs to be Forward and Back
   functionality.   Additionally, a user suggested having a recently opened
   file list.    All good ideas.

   One user (a TotalView user?) wanted to navigate the source via diving
   on functions.   Obviously a good suggestion.

 - Call graph - Source Navigation (cont)

   Several users wanted to quickly go to call graph from either the source
   or the report.   One suggested hooking into this via the dynamic menus
   created in the source panel and in the Top Panel report.    If available,
   this feature would also be accessible via a top level menu entry as
   well.  i.e. View->Call Graph...

 - Report Features
   - Sort columns
   - Reorder columns
   - Search
   - There also needs to be able to interact with the report to toggle
     date.  i.e. exclusive time to inclusive times.


x - Wizard navigation.
   Users in general seemed to like the wizard navigation.   There was a
   comment about the (wording) style that should be address.   But there
   seemed to be an agreement that the wizard panels, when navigating from
   the general Intro Wizard, to a experiment specific wizard, then finally
   to the experiment the previous (wizard panel) should be 'replaced' with
   the new one.  When we implement this, each sub-panel will need a
   "Start Over" button and a "Finish" button added.

   Upon completion of the wizard, only the experiment panel should be
   showing.  In the follow up discussion, it seemed that the Intro Wizard,
   as well as the others, could easily be found and brought back up.

   Additionally, there should be a "Finish" button on all the panels leading
   up to the final summary panel.   That "Finish" button would simply take
   all the remaining "suggested defaults" and advance to the Summary wizard.
   FIXED: For pcSampling, this is completed.   I haven't yet changed the 
          wording but will base it on what is used in the pcSampling
          collector description.

x - Wizard Confusion
   There was confusion by the user when they got to the screen to load
   a new executable from disk... for the second time.   The tool remembered
   their first selection and didn't prompt them the second time... .to the
   user's surprise.   There was(is) a "Reset" button, but it was obvious
   enough and the consensus seemed to be we could do better.
      The suggestion was to possibly offer 3 options.   The 2 that are there
   (but add the current file name to the existing selection), but add a
   third that would be an explicit "Select a new program from disk".
   FIXED: Changed the wording of the "Reset" button to "Clear" and added the
          additional setting to "Select a new program from disk."

x - The wording describing pcsampling should be made more clear.
   To be fixed:   This will be change for the actual release.  The
                  current wording was for the usability study only.

 - There should be a "Unit" for the pcsampling argument. (And all other
   experiment arguments.)

 - Statistics on by default
   This functionality wasn't ready for the study, but the menu item
   was lying around.   Of course, users found it.    One user thought
   that the statistics (source panel) should be displayed by default.
   We'll need to support and test this during the next study, but I wanted
   to make note of it for this round.

 - Buttons
   Not all the buttons were meaningful.  The Interrupt and the Update
   were two examples. 
   Regarding the Update button.   This buttons icon should be change.  A
   good suggest was presented that it should be "Circular arrows" or a
   looping arrow.  It should also be move (or visually) separated from the
   process control buttons.

   Regarding the Interrupt button.  This button too, should be move or
   visually separated from the process control buttons.   Additionally
   its meaning isn't exactly clear to the users.  Maybe clearer pop up
   help, a new name, and/or a new icon would be helpful.

 - Preference file needed
   There needs to be a preference file added for user preferences such
   as: line numbers on source, graphics displayed by default, where to
   place/split windows, default font, ...

 - BUGS
   - Double pop up when selecting Top Panel "other".

x   - Segfault.   This resulted several times, but it was not obvious what
     the cause was.   Running this under gdb while doing an extended run
     should catch this seemingly elusive bug.
     FIXED: When explicitly adding a panel to a panel container that was
          already split, openss would attempt to gracefully place the 
          panel in the best place possible.   Rather and error should
          have been printed to warn the gui writer. 
          An error is now generated and a partial placement is no longer
          attempted.   (In this case we simply need to find the best 
          fit panel container first, then place the pane in it.)

x   - CmdPanels prompt was removed.   The command panel used in the study
     was incomplete to say the least.   However this is worth noting for
     the eventual CmdPanel.
     To be fixed later when real CmdPanel is developed.

   - The heuristics for the find best panel container logic is still being
     being worked on.   This was seen during the testing when some panels
     where placed in sub-marvelous locations.  Reasonable, I might say,
     but unexpected by the user.
     When the use had multiple experiments up, with multiple source panels,
     then they selected a routine from the TopPanel, the visible source
     didn't update to the new location.   Rather, the source panel that was
     hidden was updated.

 - Additional comments:
   One user discussed the fact that they work with long running jobs.
   "Very common."  There's a need to dump info to a file for later viewing.
   This is related to the save as feature.
                                                                              
   Users want checks for executable/data file correctness.
   One reason: To prevent a modified executable from being matched up
   with old data.

   Further the user comments that path names can be at least 128 characters.
   The toolgear approach is to truncate the filenames, then use pop up help
   technology to volunteer the specific file information.

   There was a comment that the -f command line option wasn't intuitively
   obvious.  The user suggested that $ openss a.out is more natural.
   That may indeed be the case.

   Reports, such as the Top Panel, should be cut-n-paste enabled.   User
   commented they'd simply like to be able to cut-n-paste the list into
   a file.

 - Additional Comments (Wish list items)
   One user mentioned an expert system that not only shows them the
   performance issue, but one that gives suggestions to remedy the issue.
                                                                              
   A request was made to predict results for a different system.  i.e.  run
   this on one vendors box and predict what it would perform like on a
   different vendors box.  (It was later noted that a user could potentially
   comparatively debug one architecture against another.)




* Interestingly, not a single user went to the CmdPanel for this study.
It's the first time I've seen that happen in all my studies I've done.


Follow up comments:
After the (above) summary was sent out there were additional comments
volunteered.  Following is a summary of those comments:

x - Reports (A follow up to "Save As....")
   Its been suggested that one possibility to solve the formatting of data
   to a file is to provide a Report Panel.  This Report Panel would
   describe the format saved data should be stored.   This would allow the
   user to specify that exported graphics should be saved as images, tables,
   ascii, or raw data.   Likewise, table data could be described to be saved
   as tables, ascii, or tab deliminated lists.
   (Partially completed:  The Export Experiment Data entry was added to the
                          main File menu to be a placeholder for this
                          functionality.)

 - Diving  (A follow up to "Diving clues")
   Diving also implies there needs to be Forward/Back functionality.    
   When diving into a function, the user will want to be able to easily
   Back out.

   When implementing the Forward/Back functionality make sure there's a
   stack history that is represented by a menu that the user can jump
   forward or back.

 - Window-itis/Too Many Panels
   Avoid too many panels/windows.    Provide a kde-like menu of all
   panels that are currently opened. 

More follow-up comments from Martin regarding the above summary:
These comments were received 12/21/04 via email.

x - Splitting of panels:
  One idea would be to follow the model of emacs - there, the
  currently visible panel is split and then shown on both sides.
  This is normally not very helpful, but it's obvious, easy to
  follow, and users might already be used to this from emacs.
  (See FIX from above...)

- Fonts:
  It would be nice to have this in a preference menu inside the
  GUI - real GUI users probably hate to specify any command line
  arguments. This menu could also hold many other options we
  already talked about, including whether to delete empty
  containers, show graphics, etc. It could be a graphical frontend
  for the individual configuration file proposed by our fifth
  candidate.

- It should be noted that the cli is the keeper of all ...
  I understand this from the architecture, but it would still
  be nice if the pure GUI user would have some kind of
  indication which experiments are currently loaded with
  which parameter. What about adding another dialog box off
  the main menu that shows just a list of all experiments?
  Even if the user closes the panel, they can still get back
  to it through this global list.

- Showing graphics by default
  One option would be to not show it, but to offer an obvious
  button in the same panel indicating how to get graphics
  (i.e., similar to Excel).

- Empty panel containers:
  -> see also preference menu above
  Also (again could be used more general) a dialog box with
  a check box "never ask this again" could be useful. Through
  Windows, users should be quite familiar with this already.

- Reference from stats to source / BUG: update of wrong window
  I don't think it's necessary to always update the nearest
  window (especially if this window originally was used for
  something else). However, always raising the window once
  the users double-clicks the stats could be an option to
  make the correct association obvious.

x - Interestingly, nobody went to the CmdPanel
  This is probably more an advertising problem - I invited the
  candidates to a GUI study, so perhaps people didn't think that
  they should go there. In general, many users here are big fans
  of cmdlines. 
  NOTED:
