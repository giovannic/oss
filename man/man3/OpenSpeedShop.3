.\" Process this file with
.\" groff -man -Tascii OpenSpeedShop.3
.\"
.TH OpenSpeedShop 3 "June, 2009" "Open|SpeedShop Reference" "Open|SpeedShop Reference"

.SH NAME
OpenSpeedShop \- Application Performance Tool

.SH SYNOPSIS

.BR Overview

Open|SpeedShop is a community effort by the Krell Institute with current 
direct funding from DOE/NNSA.  Open|SpeedShop is an open source multi 
platform Linux performance tool which is initially targeted to support 
performance analysis of applications running on both single node and 
large scale IA64, IA32, EM64T, and AMD64 platforms.  Open|SpeedShop is
built on top of a broad list of community infrastructures, most notably 
DynInst and MRNet from UW, libMonitor from Rice, and PAPI from UTK. 

In addition, Open|SpeedShop is designed to be modular and extensible. It
supports several levels of plug-ins which allow users to add their own 
performance experiments.

Open|SpeedShop utilizes both offline/static instrumentation and dynamic 
instrumentation technology developed at the University of Wisconsin and 
University of Maryland.  The infrastructure and base components of 
Open|SpeedShop are released as open source code primarily under LGPL.

Open|SpeedShop gathers information about the user application performance
such as inclusive and exclusive CPU time, hardware counter events and
time, detailed information about I/O events/calls, detailed information
about MPI events/calls, and floating point exceptions that occurred
in the user application.  The term experiment is used to describe the
application and the type of performance data being gathered.

Open|SpeedShop is explicitly designed with usability in mind and is 
for application developers and computer scientists. The base functionality 
includes:
.nf

    * Sampling Experiments
    * Support for Callstack Analysis
    * Hardware Performance Counters
    * MPI Profiling and Tracing
    * I/O Profiling and Tracing
    * Floating Point Exception Analysis

.fi
.BR Features

.nf
* Four user interface options: 
    - Batch 
    - Command Line Interface (CLI)
    - Graphical User Interface (GUI)
    - Python scripting API.
* Two instrumentation modes of operation: 
    - Offline (use of LD_PRELOAD - link in collector runtime)
      See Also: OpenSpeedShop_offline (3)
    - Online  (use of dynamic instrumentation)
      See Also: OpenSpeedShop_online (3)
* Supports multi-platform single system image(SSI) and traditional clusters.
* Scales to large numbers of processes, threads, and ranks.
* No need to recompile the users application.
* Ability to automatically create and attach (online only) to 
  both sequential and parallel jobs from within Open|SpeedShop.
* View performance data using multiple customizable views.
* View intermediate performance measurement data while 
  the experiment is running (online only).
* Save and restore performance experiment data and symbol information 
  for post experiment performance analysis
* View performance data for all of applications lifetime 
  or smaller time slices.
* Compare performance results between processes, threads, or ranks 
  between a previous experiment and current experiment.
* GUI Wizard facility and context sensitive help.
* Interactive CLI help facility which lists the CLI commands, 
  syntax, and typical usage.
* Python Scripting API accesses Open|SpeedShop functionality 
  corresponding to CLI commands.
* Option to automatically group like performing processes, threads, or ranks.
* Create traces in OTF (Open Trace Format).
* Comprehensive installation scripts.
.fi

.SH SEE ALSO

The OpenSpeedShop Web site: www.openspeedshop.org

.BR openss (1),
.BR osspcsamp (1),
.BR ossusertime (1),
.BR osshwc (1),
.BR osshwctime (1),
.BR ossio (1),
.BR ossiot (1),
.BR ossmpi (1),
.BR ossmpit (1),
.BR ossmpiotf (1),
.BR ossfpe (1)
.BR OpenSpeedShop_offline (3)
.BR OpenSpeedShop_online (3)


