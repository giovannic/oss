////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

/** @namespace OpenSpeedShop

Enclosing namespace for all <b>Open</b>|SpeedShop<small><sup>TM</sup></small>
libraries.

*/

/** @namespace OpenSpeedShop::Framework

Enclosing namespace for the <b>Open</b>|SpeedShop<small><sup>TM</sup></small>
framework library.

*/





/** @mainpage

<b>Open</b>|SpeedShop<small><sup>TM</sup></small> comes with fully featured
text-based and graphical user interfaces, but it is certainly possible that
some users will find them inadequate or simply not to their liking. Hooks are
provided in these standard user interfaces to allow for customization and their
use is encouraged. But, for whatever reason, some adventurous users may wish to
take the road less traveled and create their own tool.

Creating an application performance tool completely from scratch, however, is
an arduous task. In addition to designing and implementing the user interface
itself, one must deal with complex issues such as asynchronous process control,
executable debugging and symbol table formats, application instrumentation,
data collection, and management of large-scale data sets. Several past and
current projects have provided pieces of the necessary infrastructure.

The <b>Open</b>|SpeedShop<small><sup>TM</sup></small> Framework Library,
elsewhere simply "the framework", provides a unified application program
interface (API) to the various components required for building a complete
application performance tool. This framework has helped facilitate the creation
of <b>Open</b>|SpeedShop<small><sup>TM</sup></small>'s user interfaces. One of
the common goals of most open source projects is to encourage innovation. It is
hoped that this framework will do precisely that.

@section MainPage_S1 How to Use This Documentation

These pages have been generated directly from the framework's source code. As
such they are <em>the</em> definitive guide to the framework. However since the
size of the framework is large, and thus its documentation is also, simply
jumping to the individual class descriptions may be overwhelming. To simplify
things, the various entity's have been categorized into four "modules" - each
of which has its own overview page that describes that aspect of the framework.

If you are interested in information about a particular class, file, etc., it is
best to use the links at the top of this page to quickly jump to that entity's
documentation.

If you are writing an application performance tool that will use the framework,
the best place to start is with the module @ref ToolAPI "Performance Tool API".

If you are writing a new performance data collector plugin for the framework,
start with the module @ref CollectorAPI "Collector Plugin API".

Finally, if you will be working on the framework itself, start by perusing both
of the above pages, then read the modules @ref Utility "Utility Classes" and
@ref Implementation "Implementation Details". Then jump to documentation for the
particular sections of code you'll be working on.

*/





/** @defgroup ToolAPI Performance Tool API

API for gathering and analyzing application performance data.

This API provides the means by which a tool can gather and analyze application
performance data. The primary goal of this API is to allow the tool developer to
focus on how the data is presented to the end user rather than the details of
how it is gathered and analyzed.

Traditionally application performance tools contain large amounts of platform
dependent code. Processes must be started, stopped, and otherwise controlled.
Some UNIX systems, such as Linux, do this via a
<a href="http://www.die.net/doc/linux/man/man2/ptrace.2.html">ptrace</a>
interface. Others, such as Solaris and IRIX, do this via a
<a href="http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?
coll=0650&db=man&fname=/usr/share/catman/p_man/cat4/proc.z&srch=/proc">/proc</a>
interface. Data must be gathered from these processes. Frequently that involves
accessing high-resolution timers and call stack unwinding - both platform
dependent activities. Once gathered, the data must be mapped back to the
original source. Doing so involves processing executable symbol table and
debugging formats (
<a href="http://sources.redhat.com/gdb/current/onlinedocs/stabs_toc.html">
STABS</a>
,
<a href="http://www.eagercon.com/dwarf/dwarf3std.htm">DWARF</a>
, etc.) that vary from platform to platform. This API is designed to factor out
most of these platform dependent elements so that that tool developer can focus
on presenting the data in an insightful manner.

Many aspects of this API are similar (or even identical) to concepts found in
<a href="http://dpcl.sourceforge.net/">DPCL</a>
and
<a href="http://www.dyninst.org/">Dyninst</a>
. That should not be suprising considering they are fundamental components used
by <b>Open</b>|SpeedShop<small><sup>TM</sup></small>. Much as DPCL extends
Dyninst with additional concepts for working in a cluster environment, this
framework extends DPCL with additional concepts to ease the creation of
application performance tools.

@section ToolAPI_S1 Getting Started

To begin using this API, one starts by including the framework header file
ToolAPI.hxx in your tool's source file(s). That header will, in turn, include
any other headers necessary for using the framework to construct a tool.

The central concept in this API is that of a performance "experiment". An
experiment consists of one or more threads being monitored, one or more data
collectors gathering performance data for those threads, and the collected
performance data itself. All performance data, along with descriptions of the
threads and collectors in the experiment, are stored in a relational database.
In addition to allowing post-mortem analysis, the database contains enough
information to restart an experiment on a long-running application.

Typical workflow for a framework-based tool consists of:

-# Creating an experiment.
-# Specifying the thread(s) in the user's application.
-# Specifying the data collector(s) to gather data.
-# Specifying which types of data are gathered for which threads.
-# Enabling and disabling data collection.
-# Mapping the resulting data back to the user's source code.

Creating an initially-empty experiment is accomplished by calling
@link
OpenSpeedShop::Framework::Experiment::create Experiment::create()
@endlink
with the name of the experiment database to be created. This new database, or a
previously populated database, is then be accessed be creating an
@link OpenSpeedShop::Framework::Experiment Experiment @endlink
instance for that database. If the tool wishes to use more than one open
experiment concurrently, additional instances of
@link OpenSpeedShop::Framework::Experiment Experiment @endlink
are created.

Once an experiment has been created and opened, the remaining workflow steps
can be classified into three types of operations:
@ref ToolAPI_S2 "thread creation & control",
@ref ToolAPI_S3 "data collection", and 
@ref ToolAPI_S4 "data analysis".
Each of these is outlined in a separate section below.

@section ToolAPI_S2 Thread Creation & Control

An experiment's current list of threads is found by calling
@link OpenSpeedShop::Framework::Experiment::getThreads getThreads() @endlink
for the experiment. The member function
@link
OpenSpeedShop::Framework::Experiment::createProcess createProcess()
@endlink
allows the tool to create a new process (or
<a href="http://www.mpi-forum.org/">MPI</a>
job) and add that process(es)' threads to the experiment. If, instead, the
tool wishes to attach to an existing process or
<a href="http://www.mpi-forum.org/">MPI</a>
job, the member
functions
@link
OpenSpeedShop::Framework::Experiment::attachProcess attachProcess()
@endlink
and
@link
OpenSpeedShop::Framework::Experiment::attachMPIJob attachMPIJob()
@endlink
are available for this purpose. These also add their respective thread(s) to
the experiment on which they are called. All three of these member functions
return a
@link OpenSpeedShop::Framework::ThreadGroup ThreadGroup @endlink
containing one or more
@link OpenSpeedShop::Framework::Thread Thread @endlink
instances that can be used to further query and manipulate the newly created
or attached thread(s).

Threads are also added to an experiment automatically by the framework. For
example, the framework monitors threads in all open experiments for the creation
of additional threads via
<a href="http://www.die.net/doc/linux/man/man2/fork.2.html">fork()</a>
, 
<a href="http://www.die.net/doc/linux/man/man3/pthread_create.3.html">
pthread_create()</a>
, etc. When this occurs, the resulting child thread is automatically added to
all open experiments containing the parent thread.

Instances of
@link OpenSpeedShop::Framework::Thread Thread @endlink
act simply as proxies that allow the tool to query and modify the behavior
of the underlying threads on the system. Their existence is not tied directly
to the existence of either their respective experiment database entry or the
underlying thread. The tool is free to keep, copy, and destroy these proxy
objects in whatever manner and order it sees fit. Once added to an experiment,
threads are only removed by explicitly calling
@link OpenSpeedShop::Framework::Experiment::removeThread removeThread() @endlink
with the thread as an argument.

Each thread is defined as having a particular
@link OpenSpeedShop::Framework::Thread::State State @endlink
that describes the execution state of the thread (running, suspended,
terminated, etc.) Member functions
@link OpenSpeedShop::Framework::Thread::getState getState() @endlink
and
@link OpenSpeedShop::Framework::Thread::isState isState() @endlink
are provided for querying the state of a given thread. Importantly, the tool
can also change the state of a thread via
@link OpenSpeedShop::Framework::Thread::changeState changeState() @endlink
. For example, executing:
<br><br><code>
thread.changeState(Thread::Suspended)
</code><br><br>
would suspend a thread that was currently executing.

A
@link OpenSpeedShop::Framework::ThreadGroup ThreadGroup @endlink
is simply an arbitrary group of threads, containing zero or more
@link OpenSpeedShop::Framework::Thread Thread @endlink
instances. Since they are simply proxies, threads may be part of more than one
thread group. Thread groups provide the means to apply operators to a group of
threads as a whole rather than to each thread individually. For example,
executing:
<br><br><code>
ThreadGroup threads = 
	experiment.getThreads().getSubsetWithState(Thread::Suspended)
</code><br><br>
would return the group of threads within the experiment that were currently in
the suspended state.

@section ToolAPI_S3 Data Collection

The framework implements application performance data collection via the concept
of "collectors". Collectors are individually implemented plugin modules that
each gather one particular type of performance data. The reasons behind
introducing the collector concept are three-fold:

-# <b>Abstraction</b>. The author of the next, newfangled, tool may not be
interested in the details of how data is <em>collected</em>, just how it is
<em>presented</em> to the end user.
-# <b>Reusability</b>. Different tools have different ways of presenting
performance data. A GUI based tool might show a particular type of data in a
pie chart while a CLI based tool might show the same data in sorted columns.
It is beneficial if these tools can share the exact same data collection
components.
-# <b>Extensibility</b>. The type of performance data to be collected can change
over time. New software or hardware platforms are introduced that require new
types of data be collected. By moving the collection mechanisms into plugins,
new types of data can be accomodated by creating additional plugins.

Upon tool startup the framework library is loaded and it searches for collector
plugins in several predefined locations. Tools access the list of available
collectors at run-time by calling
@link OpenSpeedShop::Framework::Collector::getAvailable getAvailable() @endlink
which returns a STL set of
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
objects, one per collector plugin found by the framework. Each
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
object provides information about a single collector.

Tools create new instantiations of collectors, adding them to an existing
experiment, by calling
@link
OpenSpeedShop::Framework::Experiment::createCollector createCollector()
@endlink
for that experiment. An experiment's current list of collectors is found by
calling
@link
OpenSpeedShop::Framework::Experiment::getCollectors getCollectors()
@endlink
. As with threads, a
@link OpenSpeedShop::Framework::Collector Collector @endlink
is simply a proxy for the collector that the tool can throw away at any time.
Once instantiated and added to an experiment, collectors are only removed by
explicitly calling
@link
OpenSpeedShop::Framework::Experiment::removeCollector removeCollector()
@endlink
with the collector as an argument.

Collector plugins can specify zero or more parameters that control how that
collector gathers performance data. An example of this would be allowing a tool
to specify the sampling rate (a parameter) for a PC sampling collector. Tools
determine the parameters for a collector via
@link
OpenSpeedShop::Framework::Collector::getParameters getParameters()
@endlink
which returns a STL set of
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
objects. Each 
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
object can be queried to determine the parameter's name, description, and type.
Parameters are allowed to have <em>any</em> type. The sampling rate parameter
would likely be an integer (<code>int</code>). However this same collector might
also provide a parameter that allows the tool to specify a list of functions
(<code>std::list<Function></code>) to which sampling should be restricted.

@par Aside:
Collectors, parameters, and metrics (discussed later) are all described via
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
objects. These simply member functions for returning the unique identifier,
short name, and more verbose description of the entity (collector, parameter,
metric) in question.
@par
Why use a relatively complex system for querying object names and types? Tools
have no direct knowledge of the available collectors at compile-time because the
collector plugins don't have an associated header file that could relay this
information. That implies the tools need a mechanism for discovering the
information at run-time instead. Unfortunately, ISO C++ doesn't have extensive
reflection capabilities built into the language like
<a href="http://msdn.microsoft.com/library/default.asp?
url=/library/en-us/cpguide/html/cpcondiscoveringtypeinformationatruntime.asp">
.NET</a>
or
<a href="http://java.sun.com/j2se/1.4.2/docs/api/
java/lang/reflect/package-summary.html">Java</a>
that would provide this directly.
@par
Then why not just make every parameter a string to simplify things? This would
simplify the tool API. But this would also complicated the collector plugins
quite a bit. Consider the "list of functions" parameter above. If the tool can
only pass a string to the collector, the collector plugin must now contain code
for parsing that string into a list of functions. Not only does the plugin have
to parse the list, it must validate the individual entries as well. When the
plugin can specify a parameter is type <code>std::list<Function></code> it is
assured that each entry in the list is actually a function. When all parameters
are <code>std::string</code> it must extensively check the validity of the
input.

Every parameter has a default value and each parameter is set to its default
whenever a new
@link OpenSpeedShop::Framework::Collector Collector @endlink
is instantiated. The tool can query the value of each parameter using
@link
OpenSpeedShop::Framework::Collector::getParameterValue getParameterValue()
@endlink
and, of course, set a parameter to a new value using
@link
OpenSpeedShop::Framework::Collector::setParameterValue setParameterValue()
@endlink
. Both of these are template functions on the parameter's value type.

Collectors don't actually <em>do</em> anything until they are instructed to
collect performance data for one or more threads. This is accomplished by
passing a thread to
@link
OpenSpeedShop::Framework::Collector::startCollecting startCollecting() 
@endlink
at which time the collector will immediately start collecting data for that
thread. The list of threads for which a collector is currently collecting data
is accessed via
@link OpenSpeedShop::Framework::Collector::getThreads getThreads() @endlink
. Data collection can be stopped for a particular thread by passing it to
@link
OpenSpeedShop::Framework::Collector::stopCollecting stopCollecting()
@endlink
. Note that data collection for a particular thread can be started and stopped
any number of times. All collected data is tagged with time stamps and multiple
start/stops simply result in gaps in the collected data.

There is also an ancillary concept of postponing data collection for a
particular thread by calling
@link
OpenSpeedShop::Framework::Collector::postponeCollecting postponeCollecting()
@endlink
. This has the same effect as calling
@link
OpenSpeedShop::Framework::Collector::stopCollecting stopCollecting()
@endlink
with the addition that the thread is recorded in the experiment's database as
being postponed. The list of currently postponed threads for a collector is
available via
@link
OpenSpeedShop::Framework::Collector::getPostponedThreads getPostponedThreads()
@endlink
. Postponement's primary use is to allow the tool to record the state of data
collection when exiting and restore it upon a subsequent invocation of the tool.

Finally, the
@link OpenSpeedShop::Framework::CollectorGroup CollectorGroup @endlink
and
@link OpenSpeedShop::Framework::ThreadGroup ThreadGroup @endlink
classes provide numerous operations for starting, stopping, and postponing data
collection on groups of collectors and/or threads. For example, executing:
<br><br><code>
experiment.getCollectors().startCollecting(experiment.getThreads());
</code><br><br>
would start data collection for all collectors on all threads in the given
experiment.

@section ToolAPI_S4 Data Analysis

In addition to its parameters, collector plugins specify one or more metrics
that provide a higher-level view of the collected performance data for the tool.
As an example, the raw data gathered by a typical PC sampling collector consists
of individual PC values at which samples were taken. Rather than presenting this
raw data directly to the tool, the PC sampling collector might provide an
"exclusive CPU time" metric. The tool can ask questions such as "What was the 
exclusive CPU time spent in function f() over the time interval [0.0, 10,0)
seconds?" rather than having to interpret the raw data directly. This
interpretation is encapsulated within the collector plugin as it should be.

Tools determine the metrics for a collector via
@link OpenSpeedShop::Framework::Collector::getMetrics getMetrics() @endlink
which returns a STL set of
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
objects. Each 
@link OpenSpeedShop::Framework::Metadata Metadata @endlink
object can be queried to determine the metrics's name, description, and type.
As with parameters, metrics are allowed to have <em>any</em> type. The exclusive
CPU time metric would likely be a floating-point value (<code>double</code>),
and integer or floating-point single-valued metrics are the most commonly used
metric types. However there is nothing that prevents this same collector from
defining a "functions taking more than 90% of the exclusive CPU time" metric
that returns a list of functions (<code>std::list<Function></code>).

In order to be able to calculate and display metric data that is of use to a
user in improving application performance, it is crucial that the tool be able
to identify the various source code entities (libraries, functions, source
statements, etc.) in a thread. Each
@link OpenSpeedShop::Framework::Thread Thread @endlink
object provides various member functions such as
@link 
OpenSpeedShop::Framework::Thread::getLinkedObjects getLinkedObjects()
@endlink
,
@link OpenSpeedShop::Framework::Thread::getFunctions getFunctions() @endlink
, and
@link OpenSpeedShop::Framework::Thread::getStatements getStatements() @endlink
for navigating the application's source structure. These functions return
corrsponding sets of
@link OpenSpeedShop::Framework::LinkedObject LinkedObject @endlink
,
@link OpenSpeedShop::Framework::Function Function @endlink
, and
@link OpenSpeedShop::Framework::Statement Statement @endlink
objects that all, in turn, have member functions that cross-reference between
each other and also provide information such as function names, etc.

Such objects also have a function
@link OpenSpeedShop::Framework::LinkedObject::getExtentIn getExtentIn() @endlink
that returns the location of that particular source object within a thread. The
location is expressed in terms of an
@link OpenSpeedShop::Framework::ExtentGroup ExtentGroup @endlink
object that contains zero or more
@link OpenSpeedShop::Framework::Extent Extent @endlink
objects. Each of these, in turn, describes the location (
@link OpenSpeedShop::Framework::AddressRange AddressRange @endlink
) of the
source object during a particular period of time (
@link OpenSpeedShop::Framework::TimeInterval TimeInterval @endlink
), reflecting the
fact that libraries can be loaded, unloaded, and loaded again into processes at
varying locations.

After obtaining these extents, the tool can query the value of a metric using
@link
OpenSpeedShop::Framework::Collector::getMetricValue getMetricValue()
@endlink
, or preferably
@link
OpenSpeedShop::Framework::Collector::getMetricValues getMetricValues()
@endlink
, which are template functions on the metric's type. When getting a metric
value, the tool must specify the thread, address range and time interval (or
extents) over which to get the value. By calling these functions multiple times
and summing the results, questions like "How much exclusive CPU time was spent
executing function f() across all threads?" can be answered.

@section ToolAPI_S5 Complete Example

The following annotated C++ source code provides a complete example of how this
API can be used to build a working application performance tool. Obviously real
tools will be more complex than this, but all the basics of using the API are
illustrated here.

@par Aside:
The data analysis portion of this example could be simplified even further
by making use of the <b>Open</b>|SpeedShop<small><sup>TM</sup></small> Query
Library.

First the ToolAPI.hxx header file is included and the OpenSpeedShop::Framework
namespace is used:

<code><pre>
#include "ToolAPI.hxx"

#include &lt;iostream>
#include &lt;stdexcept>
#include &lt;string>

using namespace OpenSpeedShop::Framework;
</pre></code>

Arguments are checked and the specified executable, along with its arguments,
are assembled into a single command string:

<code><pre>
int main(int argc, char* argv[])
{
    // Display usage information when necessary
    if(argc < 2) {
        std::cout << "Usage: " << argv[0] << " <a.out> <args>" << std::endl;
        return 1;
    }

    // Build a command string from the passed arguments
    std::string command;
    for(int i = 1; i < argc; ++i)
        command += argv[i] + std::string(" ");	
    
    try {
</pre></code>

A new experiment is created using the executable's name as a basis for the
experiment database's name:

<code><pre>
        // Create and open an experiment
        std::string name = std::string(argv[1]) + ".openss";
        Experiment::create(name);
        Experiment experiment(name);
</pre></code>

A process is created for executing the command string and we wait until the
framework has finished connecting to that process:

<code><pre>
        // Create a process for the command in the suspended state
        Thread thread = experiment.createProcess(command);

	// Wait until we've finished connecting to the process
	while(thread.getState() == Thread::Connecting)
	    sleep(1);
</pre></code>

The PC sampling collector is instantiated, its sampling rate is set, and it is
instructed to start collecting performance data for the process' single thread:

<code><pre>
        // Create a PC sampling collector and set its sampling rate
        Collector collector = experiment.createCollector("pcsamp");
        collector.setParameterValue("sampling_rate", (unsigned)100);

        // Start collecting data for the process' thread
        collector.startCollecting(thread);
</pre></code>

Execution of that thread is now resumed and we wait for all threads to
terminate:

<code><pre>
	// Resume the process' thread and wait for all threads to terminate
        thread.changeState(Thread::Running);
        while(!experiment.getThreads().areAllState(Thread::Terminated))
            sleep(1);
</pre></code>

The "time" metric of the collector is then evaluated and displayed for all
functions within the executable:

<code><pre>
	// Find the executable for the process' thread
	std::pair<bool, LinkedObject> executable = thread.getExecutable();
	if(executable.first) {
	    
	    // Display report
	    std::cout << std::endl << std::endl << std::setw(10) << "Time"
		      << "    " << "Function" << std::endl << std::endl;
	    
	    // Iterate over each function in the executable
	    std::set<Function> functions = executable.second.getFunctions();
	    for(std::set<Function>::const_iterator
		    i = functions.begin(); i != functions.end(); ++i) {
		
		// Find the extents of the function
		ExtentGroup extents = i->getExtentIn(thread);

		// Evaluate the time metric for these extents
		std::vector<double> time(extents.size(), 0.0);
		collector.getMetricValues("time", thread, extents, time);

		// Total the time across all extents
		double t = 0.0;
		for(std::vector<double>::const_iterator 
			j = time.begin(); j != time.end(); ++j)
		    t += *j;
		
		// Display report
		std::cout << std::setw(10) << std::fixed << std::setprecision(3)
			  << t << "    " << i->getName() << std::endl;
		
	    }
	    
	    // Display report
	    std::cout << std::endl;
	    
	}
</pre></code>

And finally the last little bit of code to catch any exceptions thrown and
display an appropriate error message:

<code><pre>
    }
    catch(const Exception& error) {
	std::cerr << std::endl << "Error: " << error.getDescription() 
		  << std::endl << std::endl;
	return 1;
    }
    catch(const std::exception& error) {
        std::cerr << std::endl << "Error: "
		  << (((error.what() == NULL) || (strlen(error.what()) == 0)) ?
		      "Unknown runtime error." : error.what()) << std::endl
		  << std::endl;
        return 1;
    }

    // Indicate success to the shell
    return 0;
}
</pre></code>

*/





/** @defgroup CollectorAPI Collector Plugin API

...

*/





/** @defgroup Implementation Implementation Details

...

*/





/** @defgroup Utility Utility Classes

...

*/
