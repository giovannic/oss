////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007,2008 William Hachfeld. All Rights Reserved.
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
// Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

/** @file
 *
 * Declaration of the Dyninst namespace.
 *
 */

#ifndef _OpenSpeedShop_Framework_Dyninst_
#define _OpenSpeedShop_Framework_Dyninst_

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "Job.hxx"

#include <BPatch.h>
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#include <string>
#include <utility>



namespace OpenSpeedShop { namespace Framework {

    class ThreadNameGroup;

    /**
     * Dyninst callbacks and utilities.
     *
     * Namespace containing the Dyninst callback and utility functions. The
     * callbacks are registered with Dyninst by the daemon's main() and will
     * handle all asynchronous events generated by Dyninst.
     *
     * @ingroup Implementation
     */
    namespace Dyninst
    {
	void dynLibrary(BPatch_thread*, BPatch_module*, bool);
	void error(BPatchErrorLevel, int, const char* const*);
	void exec(BPatch_thread*);
	void exit(BPatch_thread*, BPatch_exitType);	
	void postFork(BPatch_thread*, BPatch_thread*);
	void threadCreate(BPatch_process*, BPatch_thread*);
	void threadDestroy(BPatch_process*, BPatch_thread*);

	void copyInstrumentation(const ThreadNameGroup&,
				 const ThreadNameGroup&);

	BPatch_function* findFunction(/* const */ BPatch_process&,
				      const std::string&);
	BPatch_variableExpr* findGlobalVariable(/* const */ BPatch_process&,
						const std::string&);
	BPatch_function* findLibraryFunction(/* const */ BPatch_process&,
					     const std::string&);

	void getGlobal(/* const */ BPatch_process&, const std::string&,
		       std::pair<bool, int64_t>&);
	void setGlobal(/* const */ BPatch_process&, const std::string&,
		       int64_t&);
	void getGlobal(/* const */ BPatch_process&, const std::string&,
		       std::pair<bool, std::string>&);
	void getMPICHProcTable(/* const */ BPatch_process&,
			       std::pair<bool, Job>&);

	void sendSymbolsForThread(const ThreadNameGroup&);
	void sendThreadStateUpdates();
	void setMPIStartup(bool);
    }
    
} }



#endif
