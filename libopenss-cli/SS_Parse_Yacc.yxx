/* //////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
// Copyright (c) 2007-2012 Krell Institute  All Rights Reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////// */

%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#include <vector>
#include <iostream>

#include "SS_Input_Manager.hxx"


#include "SS_Parse_Interval.hxx"
#include "SS_Parse_Range.hxx"
#include "SS_Parse_Target.hxx"
#include "SS_Parse_Result.hxx"

using namespace OpenSpeedShop::cli;

void yyerror(const char *);
extern char *yytext;
extern int yylex();
extern int yywrap();
extern ParseResult *p_parse_result;
extern void ParseRangeTrace(int t);

%}

%{
#include "SS_Input_Manager.hxx"
#include "SS_Parse_Interval.hxx"
#include "SS_Parse_Range.hxx"
#include "SS_Parse_Target.hxx"
#include "SS_Parse_Result.hxx"

using namespace OpenSpeedShop::cli;
%}



%union {
int64_t ival;
double dval;
char *string;
void *parserange;
}

%token ATTACH_HEAD CLONE_HEAD CLOSE_HEAD CREATE_HEAD COMPARE_HEAD DETACH_HEAD 
%token DISABLE_HEAD ENABLE_HEAD 
%token FOCUS_HEAD GO_HEAD PAUSE_HEAD CONT_HEAD RESTORE_HEAD SAVE_HEAD
%token SETARGS_HEAD SETPARAM_HEAD STATUS_HEAD VIEW_HEAD VIEW_HEAD_OLD DATA_HEAD

%token CVIEWCREATE_HEAD CVIEWDELETE_HEAD CVIEW_HEAD CVIEWINFO_HEAD
%token CVIEWCLUSTER_HEAD

%token LIST_GENERIC_HEAD

%token GEN_CLEAR_BREAK_HEAD GEN_EXIT_HEAD GEN_OPEN_GUI_HEAD GEN_HELP_HEAD
%token GEN_HISTORY_HEAD GEN_LOG_HEAD GEN_PLAYBACK_HEAD GEN_RECORD_HEAD
%token GEN_SETBREAK_HEAD GEN_WAIT_HEAD GEN_ECHO_HEAD GEN_INFO_HEAD

%token JUST_QUIT_HEAD

%token RANK_ID HOST_ID THREAD_ID ARGS_ID FILE_ID EXP_ID PROCESS_ID
%token LINE_ID VIEW_ID METRIC_ID FORMAT_ID MODIFIER_ID INTERVAL_ID INSTRUMENTOR_ID

%token COMMA SEMICOLON COLON END_LINE EQUAL DOUBLE_COLON REDIRECT APPEND LPAREN RPAREN

%token <ival> IPNUMBER_64
%token <ival> HEXNUMBER
%token <ival> NUMBER
%token <dval> DOUBLE
%token <string> NAME

%type <ival> lineno
%type <ival> ip_address
%type <string>  param_name expType expFormatType
%type <parserange>  expMetric_list expMetric_expr expMetric
%type <parserange>  expFormat_list expFormat_expr

%%

command_line:  END_LINE 
    	|   command_desc END_LINE {p_parse_result->pushParseTarget(); }
    	|   command_desc END_LINE END_LINE {p_parse_result->pushParseTarget(); }

    	|   command_desc REDIRECT NAME END_LINE 
	    	    	{p_parse_result->setRedirectTarget($3);p_parse_result->pushParseTarget(); }
    	|   command_desc REDIRECT NAME END_LINE END_LINE 
	    	    	{p_parse_result->setRedirectTarget($3);p_parse_result->pushParseTarget(); }

    	|   command_desc APPEND NAME END_LINE 
	    	    	{p_parse_result->setAppendTarget($3);p_parse_result->pushParseTarget(); }
    	|   command_desc APPEND NAME END_LINE END_LINE 
	    	    	{p_parse_result->setAppendTarget($3);p_parse_result->pushParseTarget(); }

    	| error END_LINE
    	;

command_desc: exp_attach_com 	{p_parse_result->setCommandType(CMD_EXP_ATTACH);}
    	    | exp_clone_com 	{p_parse_result->setCommandType(CMD_EXP_CLONE);}
    	    | exp_close_com 	{p_parse_result->setCommandType(CMD_EXP_CLOSE);}
	    | exp_create_com 	{p_parse_result->setCommandType(CMD_EXP_CREATE);}
	    | exp_compare_com 	{p_parse_result->setCommandType(CMD_EXP_COMPARE);}
	    | exp_cont_com 	{p_parse_result->setCommandType(CMD_EXP_CONT);}
	    | exp_data_com  	{p_parse_result->setCommandType(CMD_EXP_DATA);}
	    | exp_detach_com 	{p_parse_result->setCommandType(CMD_EXP_DETACH);}
	    | exp_disable_com 	{p_parse_result->setCommandType(CMD_EXP_DISABLE);}
	    | exp_enable_com 	{p_parse_result->setCommandType(CMD_EXP_ENABLE);}
	    | exp_focus_com 	{p_parse_result->setCommandType(CMD_EXP_FOCUS);}
	    | exp_go_com   	{p_parse_result->setCommandType(CMD_EXP_GO);}
	    | exp_pause_com 	{p_parse_result->setCommandType(CMD_EXP_PAUSE);}
	    | exp_restore_com 	{p_parse_result->setCommandType(CMD_EXP_RESTORE);}
	    | exp_save_com  	{p_parse_result->setCommandType(CMD_EXP_SAVE);}
	    | exp_setargs_com   {p_parse_result->setCommandType(CMD_EXP_SETARGS);}
	    | exp_setparam_com  {p_parse_result->setCommandType(CMD_EXP_SETPARAM);}
	    | exp_status_com  	{p_parse_result->setCommandType(CMD_EXP_STATUS);}
	    | exp_view_com  	{p_parse_result->setCommandType(CMD_EXP_VIEW);}

	    | view_com  	{p_parse_result->setCommandType(CMD_VIEW);}

	    | c_view_cluster_create_com {p_parse_result->setCommandType(CMD_C_VIEW_CLUSTERS);}
	    | c_view_create_com {p_parse_result->setCommandType(CMD_C_VIEW_CREATE);}
	    | c_view_delete_com {p_parse_result->setCommandType(CMD_C_VIEW_DELETE);}
	    | c_view_info_com  	{p_parse_result->setCommandType(CMD_C_VIEW_INFO);}
	    | c_view_com  	{p_parse_result->setCommandType(CMD_C_VIEW);}

	    | list_generic_com 	{p_parse_result->setCommandType(CMD_LIST_GENERIC);}

	    | gen_clear_break_com 	{p_parse_result->setCommandType(CMD_CLEAR_BREAK);}
	    | gen_echo_com  	{p_parse_result->setCommandType(CMD_ECHO);}
	    | gen_exit_com  	{p_parse_result->setCommandType(CMD_EXIT);}
	    | gen_open_gui_com	{p_parse_result->setCommandType(CMD_OPEN_GUI);}
	    | gen_help_com  	{p_parse_result->setCommandType(CMD_HELP);}
	    | gen_history_com	{p_parse_result->setCommandType(CMD_HISTORY);}
	    | gen_info_com   	{p_parse_result->setCommandType(CMD_INFO);}
	    | gen_log_com   	{p_parse_result->setCommandType(CMD_LOG);}
	    | gen_playback_com	{p_parse_result->setCommandType(CMD_PLAYBACK);}
	    | gen_record_com	{p_parse_result->setCommandType(CMD_RECORD);}
	    | gen_setbreak_com	{p_parse_result->setCommandType(CMD_SETBREAK);}
	    | gen_wait_com  	{p_parse_result->setCommandType(CMD_WAIT);}
	    | just_quit_com 	 {exit(0);}
    	    ; 

    	    /** EXP_ATTACH **/
    	    /** expAttach [ -v mpi ] [ <expId_spec> ] [ <target_list> ] [ <expType_list> ] **/
exp_attach_com:     ATTACH_HEAD 
    	    	|   ATTACH_HEAD exp_attach_args 
     	    	|   ATTACH_HEAD exp_attach_args error END_LINE 
    	    	|   ATTACH_HEAD error END_LINE 
    	    	;

exp_attach_args:    exp_attach_element
    	    	|   exp_attach_args exp_attach_element
    	    	;

exp_attach_element: expId_list_spec
    	    	|   modifier_list_spec
		|   target_list
		|   expType_list
    	    	;

    	    /** EXP_CLONE **/
    	    /** <expId> = expClone [ <expId_spec> ] **/
exp_clone_com:      CLONE_HEAD 
  	    	|   CLONE_HEAD exp_clone_args 
  	    	|   CLONE_HEAD exp_clone_args error END_LINE 
  	    	|   CLONE_HEAD error END_LINE 
    	    	;

exp_clone_args:    exp_clone_element
    	    	|  exp_clone_args exp_clone_element
    	    	;

exp_clone_element: expId_list_spec
    	    	;

    	    /** EXP_CLOSE **/
    	    /** expClose [ -v kill ] [ -v all || <expId_spec> ] **/
exp_close_com:	    CLOSE_HEAD exp_close_args 
    	    	|   CLOSE_HEAD exp_close_args error END_LINE 
  	    	|   CLOSE_HEAD error END_LINE 
    	    	;
exp_close_args:     exp_close_arg
    	    	;
exp_close_arg:	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	|   modifier_list_spec expId_list_spec
    	    	|   expId_list_spec modifier_list_spec
		
		|   modifier_list_spec modifier_list_spec
    	    	|   modifier_list_spec modifier_list_spec expId_list_spec
    	    	|   expId_list_spec modifier_list_spec modifier_list_spec
    	    	|   modifier_list_spec expId_list_spec modifier_list_spec
		
   	    	;

    	    /** EXP_CONT **/
    	    /** expCont [ -v all || <expId_spec> ] **/
exp_cont_com:	    CONT_HEAD exp_cont_arg
  	    	|   CONT_HEAD exp_cont_arg error END_LINE 
  	    	|   CONT_HEAD error END_LINE 
      	    	;
exp_cont_arg:	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_CREATE **/
    	    /** <expId> = expCreate [ -v mpi ] [ <target_list> ] [ <expType_list> ] **/
exp_create_com:     CREATE_HEAD 
  	    	|   CREATE_HEAD exp_create_args 
  	    	|   CREATE_HEAD exp_create_args error END_LINE 
  	    	|   CREATE_HEAD error END_LINE 
    	    	;

exp_create_args:    exp_create_element
    	    	|   exp_create_args exp_create_element
    	    	;

exp_create_element: modifier_list_spec
		|   target_list
		|   expType_list
		|   instrumentor_list_spec
    	    	;

    	    /** EXP_COMPARE **/
    	    /** expCompare [ <expId_spec> ] [ <modifier_list_spec> ] [ <expMetric_list_spec> ] [ <expFormat_list_spec> ] <target_list> [ <expType_list> ] **/
exp_compare_com:    COMPARE_HEAD set_view_args 
  	    	|   COMPARE_HEAD set_view_args error END_LINE 
  	    	|   COMPARE_HEAD error END_LINE 
    	    	;

    	    /** EXP_DETACH **/
    	    /** expDetach [ <expId_spec> ] [ <target_list> ] [ <expType_list> ] **/
exp_detach_com:     DETACH_HEAD 
  	    	|   DETACH_HEAD exp_detach_args 
  	    	|   DETACH_HEAD exp_detach_args  error END_LINE 
  	    	|   DETACH_HEAD error END_LINE 
      	    	;

exp_detach_args:    exp_detach_element
    	    	|   exp_detach_args exp_detach_element
    	    	;

exp_detach_element: expId_list_spec
		|   target_list
		|   expType_list
    	    	;

    	    /** EXP_DISABLE **/
    	    /** expDisable [ -v all || <expId_spec> ] **/
exp_disable_com:    DISABLE_HEAD exp_disable_arg
  	    	|   DISABLE_HEAD exp_disable_arg error END_LINE 
  	    	|   DISABLE_HEAD error END_LINE 
      	    	;
exp_disable_arg:    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_ENABLE **/
    	    /** expEnable [ -v all || <expId_spec> ] **/
exp_enable_com:	    ENABLE_HEAD exp_enable_arg
  	    	|   ENABLE_HEAD exp_enable_arg error END_LINE 
  	    	|   ENABLE_HEAD error END_LINE 
      	    	;
exp_enable_arg:	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_FOCUS **/
    	    /** <expId> = expFocus [ <expId_spec> ] **/
exp_focus_com:	    FOCUS_HEAD exp_focus_arg
  	    	|   FOCUS_HEAD exp_focus_arg error END_LINE 
  	    	|   FOCUS_HEAD error END_LINE 
      	    	;
exp_focus_arg:	    /* empty */
    	    	|   expId_list_spec
    	    	;

    	    /** EXP_GO **/
    	    /** expGo [ -v all || <expId_spec> ] **/
exp_go_com:	    GO_HEAD exp_go_arg
  	    	|   GO_HEAD exp_go_arg error END_LINE 
  	    	|   GO_HEAD error END_LINE 
      	    	;
exp_go_arg:	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_PAUSE **/
    	    /** expPause [ -v all || <expId_spec> ] **/
exp_pause_com:	    PAUSE_HEAD exp_pause_arg
  	    	|   PAUSE_HEAD exp_pause_arg error END_LINE 
  	    	|   PAUSE_HEAD error END_LINE 
      	    	;
exp_pause_arg:	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_RESTORE **/
    	    /** <expId> = expRestore  <file_spec> **/
exp_restore_com:    RESTORE_HEAD file_spec
  	    	|   RESTORE_HEAD file_spec error END_LINE 
  	    	|   RESTORE_HEAD file_name
  	    	|   RESTORE_HEAD file_name error END_LINE 
  	    	|   RESTORE_HEAD error END_LINE 
      	    	;

    	    /** EXP_SAVE **/
    	    /** expSave [ -v copy ] [ <expId_spec> ] <file_spec> **/
exp_save_com:	    SAVE_HEAD exp_save_arg
  	    	|   SAVE_HEAD exp_save_arg error END_LINE 
  	    	|   SAVE_HEAD error END_LINE 
      	    	;
exp_save_arg:	    
    	    	    file_spec

    	    	|   expId_list_spec file_spec 
    	    	|   file_spec expId_list_spec 
    	    	|   file_spec modifier_list_spec 
    	    	|   modifier_list_spec file_spec 

    	    	|   expId_list_spec file_spec modifier_list_spec 
    	    	|   expId_list_spec modifier_list_spec file_spec 
    	    	|   file_spec expId_list_spec modifier_list_spec 
    	    	|   file_spec modifier_list_spec expId_list_spec 
    	    	|   modifier_list_spec expId_list_spec file_spec 
    	    	|   modifier_list_spec file_spec expId_list_spec 

    	    	;

    	    /** EXP_SETARGS **/
    	    /** expSetArgs  [ <expId_spec> ] exp_setargs_arg **/
exp_setargs_com:   SETARGS_HEAD exp_setargs_arg
  	    	|  SETARGS_HEAD error END_LINE 
  	    	|  SETARGS_HEAD exp_setargs_arg error END_LINE 
      	    	;
exp_setargs_arg:   args_spec
    	    	|  expId_list_spec args_spec
    	    	;

    	    /** EXP_SETPARAM **/
    	    /** expSetParam  [ <expId_spec> ] <expParam> = <expParamValue> [ , <expParam> = <expParamValue> ]+ **/
exp_setparam_com:   SETPARAM_HEAD exp_setparam_arg
  	    	|   SETPARAM_HEAD error END_LINE 
  	    	|   SETPARAM_HEAD exp_setparam_arg error END_LINE 
      	    	;
exp_setparam_arg:   param
    	    	|   expId_list_spec param
    	    	;

    	    /** EXP_STATUS **/
    	    /** expStatus [ -v all || <expId_spec> ] **/
exp_status_com:     STATUS_HEAD exp_status_arg
  	    	|   STATUS_HEAD error END_LINE 
  	    	|   STATUS_HEAD exp_status_arg error END_LINE 
      	    	;
exp_status_arg:     /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** EXP_VIEW **/
    	    /** This will be supplanted by view **/
    	    /** expView [ <expId_spec> ] [-v modifier_list] [ <viewType_list> ] [ -m <expMetric_list> ] [ <expFormat_list_spec> ] [ <target_list> ] **/
exp_view_com:	    VIEW_HEAD_OLD 
  	    	|   VIEW_HEAD_OLD set_view_args
  	    	|   VIEW_HEAD_OLD  error END_LINE 
  	    	|   VIEW_HEAD_OLD set_view_args error END_LINE 
      	    	;

    	    /** EXP_DATA **/
    	    /** expData [ <expId_spec> ] [-v modifier_list] [ <viewType_list> ] [ -m <expMetric_list> ] [ <target_list> ] **/
exp_data_com:	    DATA_HEAD 
  	    	|   DATA_HEAD set_view_args 
  	    	|   DATA_HEAD  error END_LINE 
  	    	|   DATA_HEAD set_view_args error END_LINE 
      	    	;

    	    /** C_VIEW_CLUSTER **/
    	    /** cViewCluster [ <expId_spec> ] [-v modifier_list] [ <viewType_list> ] [ -m <expMetric_list> ] [ <expFormat_list_spec> ] [ <target_list> ] **/
c_view_cluster_create_com:  CVIEWCLUSTER_HEAD
  	    	|   CVIEWCLUSTER_HEAD error END_LINE 
  	    	|   CVIEWCLUSTER_HEAD set_view_args 
  	    	|   CVIEWCLUSTER_HEAD set_view_args error END_LINE 
      	    	;

    	    /** C_VIEW_CREATE **/
    	    /** cViewCreate [ <expId_spec> ] [-v modifier_list] [ <viewType_list> ] [ -m <expMetric_list> ] [ <expFormat_list_spec> ] [ <target_list> ] **/
c_view_create_com:  CVIEWCREATE_HEAD
  	    	|   CVIEWCREATE_HEAD error END_LINE 
  	    	|   CVIEWCREATE_HEAD set_view_args 
  	    	|   CVIEWCREATE_HEAD set_view_args error END_LINE 
      	    	;

    	    /** C_VIEW_DELETE **/
    	    /** cViewDelete [-v all] [ -c < cvid_list> ] **/
c_view_delete_com:  CVIEWDELETE_HEAD
  	    	|   CVIEWDELETE_HEAD error END_LINE 
  	    	|   CVIEWDELETE_HEAD cvid_args 
  	    	|   CVIEWDELETE_HEAD cvid_args error END_LINE 
      	    	;

    	    /** C_VIEW_INFO **/
    	    /** cViewInfo [-v all] [ -c < cvid_list> ] **/
c_view_info_com:    CVIEWINFO_HEAD
  	    	|   CVIEWINFO_HEAD error END_LINE 
  	    	|   CVIEWINFO_HEAD cvid_args 
  	    	|   CVIEWINFO_HEAD cvid_args error END_LINE 
      	    	;

cvid_args:	    view_id_list_spec
		|   modifier_list_spec
		;

    	    /** CVIEW **/
    	    /** This will be supplanted by view **/
    	    /** cView [-c view_id_list] **/
c_view_com:	    CVIEW_HEAD set_view_args
  	    	|   CVIEW_HEAD error END_LINE 
  	    	|   CVIEW_HEAD set_view_args error END_LINE 
      	    	;

    	    /** VIEW **/
    	    /** This will supplant cview and expview **/
    	    /** expView [ <expId_spec> ] [-v modifier_list] [-c view_id_list] [ <viewType_list> ] [ -m <expMetric_list> ] [ <expFormat_list_spec> ] [ <target_list> ] **/
view_com:	    VIEW_HEAD set_view_args
  	    	|   VIEW_HEAD error END_LINE 
  	    	|   VIEW_HEAD set_view_args error END_LINE 
      	    	;

set_view_args:	    set_view_element
    	    	|   set_view_args set_view_element
    	    	;

set_view_element:   expId_list_spec
    	    	|   modifier_list_spec
		|   expMetric_list_spec
		|   expFormat_list_spec
		|   target_list
		|   view_id_list_spec
		|   viewType_list
		|   expInterval_list_spec
    	    	;

    	    /** GENERIC LIST COMMAND **/
    	    /** <SomeListInfo> = list -v <list_type> [<other stuff> **/
list_generic_com:   LIST_GENERIC_HEAD list_generic_arg
  	    	|   LIST_GENERIC_HEAD list_generic_arg error END_LINE 
  	    	|   LIST_GENERIC_HEAD error END_LINE 
      	    	;

list_generic_arg:   list_generic_element
    	    	|   list_generic_arg list_generic_element
    	    	;

list_generic_element:   
    	    	    expId_list_spec
    	    	|   modifier_list_spec

		|   target_list

		|   expType_list
		|   lineno_range_spec
    	    	;

    	    /** GEN_CLEAR_BREAK **/
    	    /** clearbreak <breakId> **/
gen_clear_break_com:	GEN_CLEAR_BREAK_HEAD gen_clear_break_arg
  	    	|   	GEN_CLEAR_BREAK_HEAD gen_clear_break_arg error END_LINE 
  	    	|   	GEN_CLEAR_BREAK_HEAD error END_LINE 
      	    	;
gen_clear_break_arg:	NUMBER {p_parse_result->pushBreakId($1);}
    	    	;

    	    /** GEN_ECHO **/
    	    /** exit **/
gen_echo_com:	    GEN_ECHO_HEAD NAME {p_parse_result->pushString($2);}
  	    	|   GEN_ECHO_HEAD NAME error END_LINE 
  	    	|   GEN_ECHO_HEAD error END_LINE 
      	    	;

    	    /** GEN_EXIT **/
    	    /** exit **/
gen_exit_com:	    GEN_EXIT_HEAD
  	    	|   GEN_EXIT_HEAD error END_LINE 
      	    	;

    	    /** GEN_HELP **/
    	    /** <string> = help [ <verbosity_list_spec> ] [ <string> ] **/
gen_help_com:	    GEN_HELP_HEAD   {p_parse_result->pushHelp();}
    		|   GEN_HELP_HEAD   gen_help_args 
    		|   GEN_HELP_HEAD   modifier_list_spec gen_help_args 
    		|   GEN_HELP_HEAD   modifier_list_spec
    		|   GEN_HELP_HEAD   gen_help_args   error END_LINE 
    		|   GEN_HELP_HEAD   error END_LINE 
    	    	;
gen_help_args:	    gen_help_arg
    	    	|   gen_help_args gen_help_arg  
    	    	;
gen_help_arg:	    NAME {p_parse_result->pushHelp($1);}

    	    	|   ATTACH_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_ATTACH].name);}
    	    	|   CLONE_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_CLONE].name);}
    	    	|   CLOSE_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_CLOSE].name);}
    	    	|   CREATE_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_CREATE].name);}
    	    	|   COMPARE_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_COMPARE].name);}
    	    	|   CONT_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_CONT].name);}
    	    	|   DATA_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_DATA].name);}
    	    	|   DETACH_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_DETACH].name);}
    	    	|   DISABLE_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_DISABLE].name);}
    	    	|   ENABLE_HEAD     	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_ENABLE].name);}
    	    	|   FOCUS_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_FOCUS].name);}
    	    	|   GO_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_GO].name);}
    	    	|   PAUSE_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_PAUSE].name);}
    	    	|   RESTORE_HEAD    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_RESTORE].name);}
    	    	|   SAVE_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_SAVE].name);}
   	    	|   SETARGS_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_SETARGS].name);}
   	    	|   SETPARAM_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_SETPARAM].name);}
    	    	|   STATUS_HEAD	    	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_STATUS].name);}
    	    	|   VIEW_HEAD_OLD   	    {p_parse_result->pushHelp(cmd_desc[CMD_EXP_VIEW].name);}

    	    	|   VIEW_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_VIEW].name);}

    	    	|   CVIEWCLUSTER_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_C_VIEW_CLUSTERS].name);}
    	    	|   CVIEWCREATE_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_C_VIEW_CREATE].name);}
    	    	|   CVIEWDELETE_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_C_VIEW_DELETE].name);}
    	    	|   CVIEWINFO_HEAD    	    {p_parse_result->pushHelp(cmd_desc[CMD_C_VIEW_INFO].name);}
    	    	|   CVIEW_HEAD    	    {p_parse_result->pushHelp(cmd_desc[CMD_C_VIEW].name);}

    	    	|   LIST_GENERIC_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_LIST_GENERIC].name);}

    	    	|   GEN_CLEAR_BREAK_HEAD    {p_parse_result->pushHelp(cmd_desc[CMD_CLEAR_BREAK].name);}
    	    	|   GEN_ECHO_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_ECHO].name);}
    	    	|   GEN_EXIT_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_EXIT].name);}
    	    	|   GEN_HELP_HEAD   	    {p_parse_result->pushHelp(cmd_desc[CMD_HELP].name);}
    	    	|   GEN_HISTORY_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_HISTORY].name);}
    	    	|   GEN_INFO_HEAD    	    {p_parse_result->pushHelp(cmd_desc[CMD_INFO].name);}
    	    	|   GEN_LOG_HEAD    	    {p_parse_result->pushHelp(cmd_desc[CMD_LOG].name);}
    	    	|   GEN_OPEN_GUI_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_OPEN_GUI].name);}
    	    	|   GEN_PLAYBACK_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_PLAYBACK].name);}
    	    	|   GEN_RECORD_HEAD 	    {p_parse_result->pushHelp(cmd_desc[CMD_RECORD].name);}
    	    	|   GEN_SETBREAK_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_SETBREAK].name);}
    	    	|   GEN_WAIT_HEAD	    {p_parse_result->pushHelp(cmd_desc[CMD_WAIT].name);}

    	    	|   RANK_ID	    {p_parse_result->pushHelp("-r");}
    	    	|   HOST_ID	    {p_parse_result->pushHelp("-h");}
    	    	|   PROCESS_ID	    {p_parse_result->pushHelp("-p");}
    	    	|   THREAD_ID	    {p_parse_result->pushHelp("-t");}
    	    	|   ARGS_ID	    {p_parse_result->pushHelp("-a");}
    	    	|   FILE_ID	    {p_parse_result->pushHelp("-f");}
    	    	|   EXP_ID	    {p_parse_result->pushHelp("-x");}
    	    	|   LINE_ID	    {p_parse_result->pushHelp("-l");}
    	    	|   METRIC_ID	    {p_parse_result->pushHelp("-m");}
    	    	|   FORMAT_ID	    {p_parse_result->pushHelp("-F");}
    	    	|   VIEW_ID	    {p_parse_result->pushHelp("-c");}

    	    	;

    	    /** GEN_HISTORY **/
    	    /** <string> = history  [ <int> ] **/
gen_history_com:    GEN_HISTORY_HEAD gen_history_arg
  	    	|   GEN_HISTORY_HEAD gen_history_arg error END_LINE 
  	    	|   GEN_HISTORY_HEAD error END_LINE 
      	    	;
gen_history_arg:    /* empty */
    	    	|   NUMBER {p_parse_result->pushHistoryPoint($1);} 
    	    	;

    	    /** INFO **/
    	    /** info [ -v all || <expId_spec> ] **/
gen_info_com:	    GEN_INFO_HEAD info_arg
  	    	|   GEN_INFO_HEAD error END_LINE 
  	    	|   GEN_INFO_HEAD info_arg error END_LINE 
      	    	;
info_arg:     	    /* empty */
    	    	|   expId_list_spec
		|   modifier_list_spec
    	    	;

    	    /** GEN_LOG **/
    	    /** log [ <file_spec> ] **/
gen_log_com:	    GEN_LOG_HEAD gen_log_arg
  	    	|   GEN_LOG_HEAD gen_log_arg error END_LINE 
  	    	|   GEN_LOG_HEAD error END_LINE 
      	    	;
gen_log_arg:	    /* empty */
    	    	|   file_spec
    	    	;

    	    /** GEN_OPEN_GUI **/
    	    /** openGui **/
gen_open_gui_com:   GEN_OPEN_GUI_HEAD
  	    	|   GEN_OPEN_GUI_HEAD error END_LINE 
      	    	;

    	    /** GEN_PLAYBACK **/
    	    /** playback <file_spec> **/
gen_playback_com:   GEN_PLAYBACK_HEAD gen_playback_arg
  	    	|   GEN_PLAYBACK_HEAD gen_playback_arg error END_LINE 
  	    	|   GEN_PLAYBACK_HEAD error END_LINE 
      	    	;
gen_playback_arg:   file_spec
    	    	;

    	    /** GEN_RECORD **/
    	    /** record [ <file_spec> ] **/
gen_record_com:     GEN_RECORD_HEAD gen_record_arg
  	    	|   GEN_RECORD_HEAD gen_record_arg error END_LINE 
  	    	|   GEN_RECORD_HEAD error END_LINE 
      	    	;
gen_record_arg:     /* empty */
    	    	|   file_spec
    	    	;

    	    /** GEN_SETBREAK **/
    	    /** <breakId> = setbreak [ <expId_spec> ] [ <target> ] <address_description> **/
gen_setbreak_com:   GEN_SETBREAK_HEAD gen_setbreak_arg
  	    	|   GEN_SETBREAK_HEAD gen_setbreak_arg error END_LINE 
  	    	|   GEN_SETBREAK_HEAD error END_LINE 
      	    	;
gen_setbreak_arg:   
    	    	    address_description

    	    	|   expId_list_spec address_description 
    	    	|   address_description expId_list_spec 
    	    	|   target address_description 
    	    	|   address_description target 

    	    	|   expId_list_spec target address_description 
    	    	|   expId_list_spec address_description target 
    	    	|   target expId_list_spec address_description 
    	    	|   target address_description expId_list_spec 
    	    	|   address_description expId_list_spec target 
    	    	|   address_description target expId_list_spec 
    	    	;

    	    /** WAIT **/
    	    /** wait [ -v terminate ] [ <expId_spec> ]  **/
gen_wait_com:	    GEN_WAIT_HEAD gen_wait_arg
  	    	|   GEN_WAIT_HEAD gen_wait_arg error END_LINE 
  	    	|   GEN_WAIT_HEAD error END_LINE 
      	    	;

gen_wait_arg:	    /* empty */
		|   expId_list_spec
		|   modifier_list_spec
		|   expId_list_spec modifier_list_spec
		|   modifier_list_spec expId_list_spec
   	    	;

    	    /** JUST_QUIT **/
just_quit_com:     JUST_QUIT_HEAD
    	    	;


    /**************************************************/
    

address_description: NUMBER {p_parse_result->pushAddressPoint($1);}
		|   HEXNUMBER {p_parse_result->pushAddressPoint($1);}
		|   NAME {p_parse_result->pushAddressPoint($1);}
    	    	;


expId_list_spec:    EXP_ID expId_list
		|   EXP_ID {p_parse_result->setError("Bad pid list entry.");} error  
		;

expId_list:  	    expId_range
    	    	|   expId_list COMMA expId_range
		;

expId_range:  	    NUMBER {p_parse_result->pushExpIdPoint($1);}
    	    	|   NUMBER COLON NUMBER {p_parse_result->pushExpIdRange($1,$3);}
		;

target_list:	    target
    	    	|   target_list SEMICOLON {p_parse_result->pushParseTarget();} target
    	    	|   target_list SEMICOLON error END_LINE 
    	    	;

target:     	    target_element
    	    	|   target target_element
    	    	;

target_element:	    host_list_spec
    	    	|   file_list_spec
		|   pid_list_spec
		|   thread_list_spec
		|   rank_list_spec
    	    	;

host_list_spec:     HOST_ID host_list
		|   HOST_ID {p_parse_result->setError("Bad host list entry.");} error  
		;

host_list:  	    host_name
    	    	|   host_list COMMA host_name
		;

host_name:  	    NAME {p_parse_result->currentTarget()->pushHostPoint($1);}
    	    	|   ip_address {p_parse_result->currentTarget()->pushHostPoint($1);}
		;

/*
host_file:  	    host_spec file_spec
    	    	|   file_spec
		;

host_spec:  	    HOST_ID host_list
    	    	;
*/

args_spec:  	    ARGS_ID args_name
    	    	;

/*
args_list_spec:     ARGS_ID args_list
		|   ARGS_ID {p_parse_result->setError("Bad args list entry.");} error
		;

args_list:  	    args_name 
    	    	|   args_list args_name 
		;

*/
args_name:  	    NAME {p_parse_result->pushString($1);}
    	    	;

file_spec:  	    FILE_ID file_name
    	    	;

file_list_spec:     FILE_ID file_list
		|   FILE_ID {p_parse_result->setError("Bad file list entry.");} error  
		;

file_list:  	    file_name 
    	    	|   file_list COMMA file_name 
		;

file_name:  	    NAME {p_parse_result->currentTarget()->pushFilePoint($1);}
    	    	;

pid_list_spec:	    PROCESS_ID pid_list
		|   PROCESS_ID {p_parse_result->setError("Bad pid list entry.");} error  
		;

pid_list:  	    pid_range
    	    	|   pid_list COMMA pid_range
		;

pid_range:  	    NUMBER {p_parse_result->currentTarget()->pushPidRange($1,$1);}
    	    	|   NUMBER COLON NUMBER {p_parse_result->currentTarget()->pushPidRange($1,$3);}
		;

thread_list_spec:   THREAD_ID thread_list
		|   THREAD_ID {p_parse_result->setError("Bad thread list entry.");} error  
		;

thread_list:  	    thread_range
    	    	|   thread_list COMMA thread_range
		;

thread_range:  	    NUMBER {p_parse_result->currentTarget()->pushThreadRange($1,$1);}
    	    	|   NUMBER COLON NUMBER {p_parse_result->currentTarget()->pushThreadRange($1,$3);}
		;

rank_list_spec:     RANK_ID rank_list
		|   RANK_ID {p_parse_result->setError("Bad rank list entry.");} error  
		;

rank_list:  	    rank_range
    	    	|   rank_list COMMA rank_range
		;

rank_range:  	    NUMBER {p_parse_result->currentTarget()->pushRankRange($1,$1);}
    	    	|   NUMBER COLON NUMBER {p_parse_result->currentTarget()->pushRankRange($1,$3);}
		;

view_id_list_spec:  VIEW_ID view_id_list
		|   VIEW_ID {p_parse_result->setError("Bad rank list entry.");} error  
		;

view_id_list:  	    view_id_range
    	    	|   view_id_list COMMA view_id_range
		;

view_id_range:	    NUMBER {p_parse_result->pushViewSet($1,$1);}
    	    	|   NUMBER COLON NUMBER {p_parse_result->pushViewSet($1,$3);}
		;

ip_address: 	    NUMBER
    	    	|   IPNUMBER_64
    	    	;

/*
param_list:  	    param
    	    	|   param_list COMMA param
		;
*/

param:	    	    expType DOUBLE_COLON param_name EQUAL param_val_list
    	    	    	{p_parse_result->setParam($1,$3);}
    	    	|   param_name EQUAL param_val_list
		     	{p_parse_result->setParam(NULL,$1);}
		;

param_val_list:     param_val
    	    	|   param_val_list COMMA param_val
		;

param_val: 	    NUMBER  {p_parse_result->pushParamVal($1);}
    	    	|   DOUBLE  {p_parse_result->pushParamVal($1);}
		|   NAME    {p_parse_result->pushParamVal($1);}
    	    	;

param_name: 	    NAME	    	    	    	 
		;

expInterval_list_spec:	
    	    	    INTERVAL_ID NAME expInterval_list
    	    	    	    	{p_parse_result->setIntervalAttribute($2);}
		|   INTERVAL_ID expInterval_list
		;

expInterval_list:   expInterval
    	    	|   expInterval_list COMMA expInterval 
		;

/*
<time_interval> ::= 
( <int> || <float> ) ":" ( <int> || <float> ) [ "%" || "s" || "ms" || "us" || "ns" ]
*/
expInterval:	    NUMBER COLON NUMBER
		    	{p_parse_result->pushInterval($1,$3);}

    	    	|   NUMBER COLON DOUBLE
		    	{p_parse_result->pushInterval($1,$3);}

    	    	|   DOUBLE COLON NUMBER
		    	{p_parse_result->pushInterval($1,$3);}

    	    	|   DOUBLE COLON DOUBLE
		    	{p_parse_result->pushInterval($1,$3);}

		;

expMetric_list_spec:  METRIC_ID expMetric_list {p_parse_result->pushMetricList((ParseRange *)$2);}
		;

expMetric_list:     expMetric_expr {$$ = p_parse_result->ExpMetric("list",(ParseRange *)$1);}
    	    	|   expMetric_list COMMA expMetric_expr {$$ = p_parse_result->ExpMetricList((ParseRange *)$1,(ParseRange *)$3);}
		;

expMetric_expr: 
                    expMetric {$$ = p_parse_result->ExpMetric("single",(ParseRange *)$1);}
                |   NUMBER  {$$ = p_parse_result->ExpMetricConstant($1);}
    	    	|   DOUBLE  {$$ = p_parse_result->ExpMetricConstant($1);}
		|   LPAREN expMetric_list RPAREN {$$ = p_parse_result->ExpMetric("parens",(ParseRange *)$2);}
		;

expMetric:          expType DOUBLE_COLON NAME COLON NAME  {$$ = p_parse_result->ExpMetric($1,$3,$5);}
                |   expType DOUBLE_COLON NAME  {$$ = p_parse_result->ExpMetric($1,$3);}
                |   expType COLON NAME  {$$ = p_parse_result->ExpMetric(NULL,$1,$3);}
                |   expType LPAREN expMetric_list RPAREN {$$ = p_parse_result->ExpMetricExpr($1,(ParseRange *)$3);}
                |   expType  {$$ = p_parse_result->ExpMetric($1);}
                ; 

expType_list:  	    expType {p_parse_result->pushExpType($1);}
                |   expType_list COMMA expType {p_parse_result->pushExpType($3);}
                ;

expType:	    NAME		     
		;

expFormat_list_spec:  FORMAT_ID expFormat_list {p_parse_result->pushFormatList((ParseRange *)$2);}
		;

expFormat_list:     expFormat_expr {$$ = p_parse_result->ExpFormat("list",(ParseRange *)$1);}
    	    	|   expFormat_list COMMA expFormat_expr {$$ = p_parse_result->ExpFormatList((ParseRange *)$1,(ParseRange *)$3);}
		;

expFormat_expr:     expFormatType {$$ = p_parse_result->ExpFormatConstant($1);}
                |   expFormatType EQUAL NUMBER {$$ = p_parse_result->ExpFormatConstant($1,$3);}
    	    	|   expFormatType EQUAL DOUBLE {$$ = p_parse_result->ExpFormatConstant($1,$3);}
    	    	|   expFormatType EQUAL NAME   {$$ = p_parse_result->ExpFormatConstant($1,$3);}
		;

expFormatType:	    NAME		     
		;


viewType_list:	    viewType
    	    	|   viewType_list COMMA viewType
		;

viewType:   	    NAME {p_parse_result->pushViewType($1);}
		;

/*
lineno_list_spec:   LINE_ID lineno_list
		;

lineno_list:	    lineno
    	    	|   lineno_list COMMA lineno 
		;
*/

lineno_range_spec:  LINE_ID lineno_range
		|   LINE_ID {p_parse_result->setError("Bad line number entry.");} error  
    	    	;

lineno_range:	    lineno {p_parse_result->pushLineNoPoint($1);} 
     	    	|   lineno COLON lineno {p_parse_result->pushLineNoRange($1,$3);}
 		; 

lineno: 	    NUMBER
    	    	|   HEXNUMBER
    	    	;

modifier_list_spec: MODIFIER_ID modifier_list
		|   MODIFIER_ID {p_parse_result->setError("Bad modifier list entry.");} error  
		;

modifier_list:	    modifier_name 
    	    	|   modifier_list COMMA modifier_name
		;

modifier_name:	    NAME {p_parse_result->pushModifiers($1);}
    	    	;

instrumentor_list_spec:  INSTRUMENTOR_ID instrumentor_name
		;

instrumentor_name:    NAME {p_parse_result->pushInstrumentors($1);}


%%


/***************************************************/
void 
yyerror(const char *s)
{
#if DEBUG_CLI
    fprintf(stderr, "yyerror ---- s=%s, yytext=%s\n", s, (char *)yytext);
#endif
    p_parse_result->setError((char *)yytext);
}

/***************************************************/
/***************************************************/
/*
    Count will be 4 for 32 bit IP numbers and
    8 for 64 bit IP numbers.
    
    Lex will have weeded out most syntactical problems.
    
    The return value will need to change to long long
    soon.
    
 */
char *
ip_number(char *input_str,int count)
{
    int i;
    char *ptr1 = input_str;
    uint64_t num = 0;
    uint64_t t_num = 0;
    
    for (i=0;i<count;++i) {
    	num = num << 8;
	t_num = strtoul(ptr1,&ptr1,10);
	/* Check for invalid value */
	if (t_num > 255) {
	    p_parse_result->setError(input_str,"ip_number");
	}
    	num += t_num;
	ptr1++;
   }
   
    /*return (int64_t)num;*/
   return strdup(input_str);
}

/***************************************************/
/*
    This is a memory leak. I need to keep track
    of the allocations of memory and free them
    up periodically.
 */
char *
copy_string(char *p_old)
{
    char *p_buf = (char *)malloc(strlen(p_old)+1);
    strcpy(p_buf,p_old);
    return p_buf;
}
/***************************************************/



