/*/*******************************************************************************
** Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
** Copyright (c) 2006-2013 Krell Institute  All Rights Reserved.
**
** This library is free software; you can redistribute it and/or modify it under
** the terms of the GNU Lesser General Public License as published by the Free
** Software Foundation; either version 2.1 of the License, or (at your option)
** any later version.
**
** This library is distributed in the hope that it will be useful, but WITHOUT
** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
** details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation, Inc.,
** 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*******************************************************************************/

/** @file
 *
 * Message database.
 *
 */

/*********************************************/
// COMMAND Related topics
/*********************************************/
const char *cmd_expAttach_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

const char *cmd_expClose_related[] = {
    "<expId>"
};

const char *cmd_expCont_related[] = {
    "<expId>"
};

const char *cmd_expCreate_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

const char *cmd_expDetach_related[] = {
    "<expId>",
    "<expType>",
    "<target>",
    "<lists>"
};

const char *cmd_expDisable_related[] = {
    "<expId>"
};

const char *cmd_expEnable_related[] = {
    "<expId>"
};

const char *cmd_expFocus_related[] = {
    "<expId>"
};

const char *cmd_expGo_related[] = {
    "<expId>"
};

const char *cmd_expPause_related[] = {
    "<expId>"
};

const char *cmd_expRestore_related[] = {
    "<expId>",
    "<file_name>"
};

const char *cmd_expSave_related[] = {
    "<expId>",
    "<file_name>"
};

const char *cmd_expSetArgs_related[] = {
    "<expId>",
    "<Args>"
};

const char *cmd_expSetParam_related[] = {
    "<expId>",
    "<file_name>",
    "<Param>",
    "listParams",
    "listParamsVal"
};

const char *cmd_expStatus_related[] = {
    "<expId>"
};

const char *cmd_expView_related[] = {
    "<expId>",
    "<viewType>",
    "<expMetric>",
    "<target>",
    "listTypes",
    "listMetrics",
    "<lists>"
};

const char *cmd_cViewCreate_related[] = {
    "<cvId>",
    "<expId>",
    "<viewType>",
    "<expMetric>",
    "<target>",
    "listTypes",
    "listMetrics",
    "<lists>",
    "expView",
    "cViewDelete",
    "cViewInfo",
    "cView"
};

const char *cmd_cViewDelete_related[] = {
    "<cvId>",
    "<cvId_list>",
    "expView",
    "cViewCreate",
    "cViewInfo",
    "cView"
};

const char *cmd_cViewInfo_related[] = {
    "<cvId>",
    "<cvId_list>",
    "expView",
    "cViewCreate",
    "cViewDelete",
    "cView"
};

const char *cmd_cView_related[] = {
    "<cvId>",
    "<cvId_list>",
    "expView",
    "cViewCreate",
    "cViewDelete",
    "cViewInfo"
};

const char *cmd_expCompare_related[] = {
    "<modifier_list>",
    "<expId_spec>",
    "<viewType>",
    "<expMetric_list>",
    "<target>",
    "expView",
    "cViewCreate",
    "cViewDelete",
    "cViewInfo"
    "cView"
};

const char *cmd_list_related[] = {
    "<listBreaks>",
    "<listExp>",
    "<listExpTypes>",
    "<listHosts>",
    "<listMetrics>",
    "<listObj>",
    "<listParams>",
    "<listParamsVal>",
    "<listPids>",
    "<listRanks>",
    "<listSrc>",
    "<listThreads>",
    "<listTypes>",
    "<listViews>"
};

const char *cmd_listBreaks_related[] = {
    "<expId>"
};

const char *cmd_listExp_related[] = {
    "<expId>"
};

const char *cmd_listHosts_related[] = {
    "<expId>"
};

const char *cmd_listMetrics_related[] = {
    "<expId>",
    "<expType>",
    "<lists>"
};

const char *cmd_listObj_related[] = {
    "<expId>",
    "<target>"
};

const char *cmd_listParams_related[] = {
    "<expId>",
    "<expType>",
    "<lists>"
};

const char *cmd_listParamsVal_related[] = {
    "<expId>",
    "<expType>",
    "<lists>"
};

const char *cmd_listPids_related[] = {
    "<expId>",
    "<host_name>",
    "<lists>"
};

const char *cmd_listRanks_related[] = {
    "<expId>",
    "<target>"
};

const char *cmd_listSrc_related[] = {
    "<expId>",
    "<target>"
};

const char *cmd_listStatus_related[] = {
    "<expId>"
};

const char *cmd_listThreads_related[] = {
    "<expId>",
    "<target>"
};

const char *cmd_listTypes_related[] = {
    "<expId>"
};

const char *cmd_listViews_related[] = {
    "<expId>",
    "<expType>"
};

const char *cmd_clearBreak_related[] = {
    "<breakId>"
};

const char *cmd_exit_related[] = {
//    ""
};

const char *cmd_help_related[] = {
//    ""
};

const char *cmd_history_related[] = {
//    ""
};

const char *cmd_log_related[] = {
    "<file_name>"
};

const char *cmd_openGui_related[] = {
//    ""
};

const char *cmd_playBack_related[] = {
    "<file_name>"
};

const char *cmd_record_related[] = {
    "<file_name>"
};

const char *cmd_setBreak_related[] = {
    "<expId>",
    "<target>"
};

const char *cmd_Wait_related[] = {
    "expGo",
    "expCont",
    "<expId>"
};


/*********************************************/
// COMMAND ARGUMENTS
/*********************************************/
const char *cmd_expAttach_args[] = {
    "expAttach [ -v mpi] [ -x <expId> ] [ <target_list> ] [ <expType_list> ]"
};

const char *cmd_expClose_args[] = {
    "expClose [ -v kill,all ]",
    "expClose [ -v kill ] [ -x <expId> ]"
};

const char *cmd_expCont_args[] = {
    "expCont [ -v all || -x <expId> ]"
};

const char *cmd_expCreate_args[] = {
    "<expId> = expCreate [-i offline] [-v mpi] [ <target_list> ] [ <expType_list> ]"
};

const char *cmd_expData_args[] = {
    "expData [-v <modifier_list>] [-x <expId>] [<viewType>] [-m <expMetric_list>] [<target_spec>]"
};

const char *cmd_expDetach_args[] = {
    "expDetach [ -x <expId> ] [ <target_list> ] [ <expType_list> ]"
};

const char *cmd_expDisable_args[] = {
    "expDisable [ -v all || -x <expId> ]"
};

const char *cmd_expEnable_args[] = {
    "expEnable [ -v all || -x <expId> ]"
};

const char *cmd_expFocus_args[] = {
    "<expId> = expFocus [ -x <expId> ]"
};

const char *cmd_expGo_args[] = {
    "expGo [ -v all || -x <expId> ]"
};

const char *cmd_expPause_args[] = {
    "expPause [ -v all || -x <expId> ]"
};

const char *cmd_expRestore_args[] = {
    "<exp_Id> = expRestore -f <file_name>"
};

const char *cmd_expSave_args[] = {
    "expSave [-v copy] [-x <expId>] -f <file_name>"
};

const char *cmd_expSetArgs_args[] = {
    "expSetArgs [-x <expId>] arguments "
};

const char *cmd_expSetParam_args[] = {
    "expSetParam [-x <expId>] <expParam>=<expParamValue> [,<expParamValue>] ... "
};

const char *cmd_expStatus_args[] = {
    "expStatus [-v all || -x <expId>]"
};

const char *cmd_expView_args[] = {
    "expView [-v <modifier_list>] [-x <expId>] [<viewType>] [-m <expMetric_list>] [<target_spec>] [<format_spec>]"
};

const char *cmd_cViewCreate_args[] = {
    "cViewCreate [-v <modifier_list>] [-x <expId>] [<viewType>] [-m <expMetric_list>] [<target_spec>]"
};

const char *cmd_cViewDelete_args[] = {
    "cViewDelete -v all ",
    "cViewDelete -c <cvid_list> ",
    "cViewDelete "
};

const char *cmd_cViewInfo_args[] = {
    "cViewInfo -v all ",
    "cViewInfo -c <cvid_list> ",
    "cViewInfo "
};

const char *cmd_cView_args[] = {
    "cView -c <cvid_list> "
};

const char *cmd_expCompare_args[] = {
    "expCompare  [-v <modifier_list> ]\n"
    "            [ <expId_spec> ]\n"
    "            [ <viewType> ]\n"
    "            [ -m <expMetric_list> ]\n"
    "            [ <target_list> ]"
};

const char *cmd_list_args[] = {
    "<ListOf_info> = list -v <listType> [-v all || -x <expId>]"
};

const char *cmd_listBreaks_args[] = {
    "<ListOf_breakId> = list -v breaks ",
    "<ListOf_breakId> = list -v breaks,all",
    "<ListOf_breakId> = list -v breaks -x <expId>"
};

const char *cmd_listExp_args[] = {
    "<ListOf_expId> = list -v expId"
};

const char *cmd_listHosts_args[] = {
    "<ListOf_hostname> = list -v hosts",
    "<ListOf_hostname> = list -v hosts -x <expId>"
};

const char *cmd_listMetrics_args[] = {
    "<ListOf_expMetric> = list -v metrics",
    "<ListOf_expMetric> = list -v metrics,all ",
    "<ListOf_expMetric> = list -v metrics -x <expId>",
    "<ListOf_expMetric> = list -v metrics <expType>"
};

const char *cmd_listObj_args[] = {
    "<ListOf_filename> = list -v obj [-x <expId>] [<target>]"
};

const char *cmd_listParams_args[] = {
    "<ListOf_expParam> = list -v params",
    "<ListOf_expParam> = list -v params,all",
    "<ListOf_expParam> = list -v params -x <expId>",
    "<ListOf_expParam> = list -v params <expType>"
};

const char *cmd_listParamsVal_args[] = {
    "<ListOf_expParamVal> = list -v paramsval",
    "<ListOf_expParamVal> = list -v paramsval,all",
    "<ListOf_expParamVal> = list -v paramsval -x <expId>",
    "<ListOf_expParamVal> = list -v paramsval <expType>"
};

const char *cmd_listPids_args[] = {
    "<ListOf_pidname> = list -v pids [-x <expId>] [-h <host_name> [ , <host_name> ]*]"
};

const char *cmd_listRanks_args[] = {
    "<ListOf_Ranks> = list -v ranks [-x <expId> ] [ <target>]"
};

const char *cmd_listSrc_args[] = {
    "<ListOf_filename> = list -v src [-x <expId>] [<target>]"
};

const char *cmd_listStatus_args[] = {
    "<ListOf_statusType> = list -v status",
    "<ListOf_statusType> = list -v status,all",
    "<ListOf_statusType> = list -v status -x <expId>"
};

const char *cmd_listThreads_args[] = {
    "<ListOf_Threads> = list -v threads [-x <expId>] [<target>]"
};

const char *cmd_listTypes_args[] = {
    "<ListOf_expType> = list -v expTypes",
    "<ListOf_expType> = list -v expTypes,all",
    "<ListOf_expType> = list -v expTypes -x <expId>"
};

const char *cmd_listViews_args[] = {
    "<ListOf_viewType> = list -v views",
    "<ListOf_viewType> = list -v views,all",
    "<ListOf_viewType> = list -v views -x <expId>",
    "<ListOf_viewType> = list -v views <expType>"
};

const char *cmd_clearBreak_args[] = {
    "clearBreak <breakId>"
};

const char *cmd_exit_args[] = {
    "exit"
};

const char *cmd_help_args[] = {
    "<string> = help [-v <help_modifier_list>] [<string>]"
};

const char *cmd_history_args[] = {
    "history [<integer>]"
};

const char *cmd_log_args[] = {
    "log [-f <file_name>]"
};

const char *cmd_openGui_args[] = {
    "openGui"
};

const char *cmd_playBack_args[] = {
    "playBack-f <file_name>"
};

const char *cmd_record_args[] = {
    "record [-f <file_name>]"
};

const char *cmd_setBreak_args[] = {
    "<breakId> setBreak [-x <expId>] [<target>] <address_description>"
};

const char *cmd_Wait_args[] = {
    "Wait [ -v terminate [ , all ] ] [ -x <expId> ]"
};


/*********************************************/
// BRIEF COMMAND MESSAGES
/*********************************************/
const char *cmd_expAttach_brief = {
    "Attach applications or collectors to an experiment."
};


const char *cmd_expClose_brief = {
    "Close/Terminate the experiment."
};

const char *cmd_expCont_brief = {
    "Continue the execution of an experiment."
};

const char *cmd_expCreate_brief = {
    "Start the process of defining an experiment."
};

const char *cmd_expData_brief = {
    "Return data from experiment."
};

const char *cmd_expDetach_brief = {
    "Detach applications from collectors."
};

const char *cmd_expDisable_brief = {
    "Turn off data collection."
};

const char *cmd_expEnable_brief = {
    "Restart data collection."
};

const char *cmd_expFocus_brief = {
    "Focus the current input window on a specified experiment."
};

const char *cmd_expGo_brief = {
    "Start the execution of the experiment or restart the execution of the experiment."
};

const char *cmd_expPause_brief = {
    "Temporarily interrupt the specified experiment."
};

const char *cmd_expRestore_brief = {
    "Restore experiment's definition and data from a previously saved data base.\n"
};

const char *cmd_expSave_brief = {
    "Save the experiment data for further analysis."
};

const char *cmd_expSetArgs_brief = {
    "Change the value an experiment's executable argument(s)."
};

const char *cmd_expSetParam_brief = {
    "Change the value an experiment's argument."
};

const char *cmd_expStatus_brief = {
    "Report the current state of user define experiments."
};

const char *cmd_expView_brief = {
    "View the experiment's output in text form."
};

const char *cmd_cViewCreate_brief = {
    "Create a custom view id."
};

const char *cmd_cViewDelete_brief = {
    "Delete a custom view id from the openss database."
};

const char *cmd_cViewInfo_brief = {
    "Dump the description of one or more custom view ids."
};

const char *cmd_cView_brief = {
    "Detailed compare view where the user has defined the contents of each custom view."
};

const char *cmd_expCompare_brief = {
    "Simple compare view.  The tool determines the columninformation."
};

const char *cmd_list_brief = {
    "List information based on <listType>."
};


const char *cmd_listBreaks_brief = {
    "List the breakpoints that have been defined."
};


const char *cmd_listExp_brief = {
    "List the experiments that have been defined."
};


const char *cmd_listHosts_brief = {
    "Lists the hosts that define the specified cluster."
};


const char *cmd_listObj_brief = {
    "List the object files that are known."
};


const char *cmd_listPids_brief = {
    "List the process Id's that are known."
};


const char *cmd_listMetrics_brief = {
    "List the measurements that an experiment is capable of making."
};


const char *cmd_listParams_brief = {
    "Report the current values assigned to all the parameters\n"
    "that are part of a specific experiment."
};


const char *cmd_listParamsVal_brief = {
    "Report the current values assigned to all the parameters\n"
    "that are part of a specific experiment."
};

const char *cmd_listRanks_brief = {
    "List the mpi ranks that are known. "
};


const char *cmd_listSrc_brief = {
    "List the source filenames of the modules that \n"
    "are part of the specified experiment. "
};


const char *cmd_listStatus_brief = {
    "List the current status of an experiment."
};


const char *cmd_listThreads_brief = {
    "List the threads that are known."
};


const char *cmd_listTypes_brief = {
    "List available performance measurement utilities."
};


const char *cmd_listViews_brief = {
    "List the reports that can be produced by an experiment."
};


const char *cmd_clearBreak_brief = {
    "Remove a breakpoint."
};


const char *cmd_exit_brief = {
    "Terminate the session."
};


const char *cmd_help_brief = {
    "Request information about a topic."
};


const char *cmd_history_brief = {
    "Print a list of previously executed commands."
};


const char *cmd_log_brief = {
    "Echo executed commands and their results to a file."
};


const char *cmd_openGui_brief = {
    "Open the Graphical User Interface."
};


const char *cmd_playBack_brief = {
    "Read and execute commands stored in a file."
};


const char *cmd_record_brief = {
    "Begin echoing executed commands to a file."
};


const char *cmd_setBreak_brief = {
    "Enter a breakpoint, which will halt the application when reached."
};


const char *cmd_Wait_brief = {
    "Don't execute any more commands until an experiment terminates."
};

/*********************************************/
// DETAILED COMMAND MESSAGES
/*********************************************/
const char *cmd_expAttach_detailed[] = {
    cmd_expAttach_args[0],
    " ",
    cmd_expAttach_brief,
    " ",
    "\t The attached applications will not execute until ",
    "\t an expGo command is issued.",
    " ",
    "- If there is no -x <expId> provided, information is ",
    "  attached to the focused experiment.",
    " ",
    "- If the -v mpi option is selected, all the threads that ",
    "  are part of a running application will be included ",
    "  in the experiment.",
    " ",
    "- If the -v mpi option is not present, only those ",
    "  threads that are running application will be included ",
    "  in the experiment.",
    " ",
    "- The <target_list> is used to restrict the knowledge ",
    "  of the experiment or data collection to certain portions ",
    "  of an appliaction.",
    " ",
    "- It is ambiguous to use both the -f and -p options.",
    " ",
    "\t The -f option implies that an executable is to be ",
    "\t loaded into the OpenSS tool from a file.",
    " ",
    "\t The use of -p option implies that the OpenSS tool ",
    "\t is to attach to a program that is already executing.",
    " ",
    "- If <target_list> is provided without <expType_list>, ",
    "  those applications are attached to all the <expType>s ",
    "  that are already attached of the experiment.",
    " ",
    "- If <expType_list> is provided without <target_list>, ",
    "  the specified data collectors are used to instrument ",
    "  all the executable routines that are already attached ",
    "  to the indicated experiment.",
    " ",
    "- If both <target_list> and <expType_list> are provided, ",
    "  only those portions of the application in the <target_list> ",
    "  are linked to the specified collectors in <expType_list>.",
    " ",
    "- If neither <target_list> nor <expType_list> is provided, ",
    "  the command does nothing.",
    " "
};


const char *cmd_expClose_detailed[] = {
    cmd_expClose_args[0],
    " ",
    cmd_expClose_brief,
    " ",
    "\t The OpenSS tool is NOT terminated. Use exit to ",
    "\t terminate the session.",
    " ",
    "\t All data collectors attached to the experiment ",
    "\t are removed from the attached applications.",
    " ",
    "\t All attached applications are removed from the experiment.",
    " ",
    "\t If \'-v kill\' is not provided, attached applications ",
    "\t will continue executing.",
    " ",
    "\t If \'-v kill\' is provided, attached applications ",
    "\t will be terminated.",
    " ",
    "\t The data base file that was used to save information ",
    "\t about the applications and the collected data, is deleted ",
    "\t if it is a temporary file, or closed if it is a user ",
    "\t defined file. Use \'expSave\' for saving information.",
    " ",
    "- Because important information may accidently be lost, ",
    "  the absence of any arguments will not cause the focused ",
    "  experiment to be deleted. This can only be done by ",
    "  specifying the expId of the focused experiment.",
    " ",
    "- Use of \'-v all\' will cause all defined experiments ",
    "  to be deleted.",
    " "
};


const char *cmd_expCreate_detailed[] = {
    cmd_expCreate_args[0],
    " ",
    cmd_expCreate_brief,
    " ",
    "\to define a new experiment identifier,",
    " ",
    "\to set the current focus to the new identifier and",
    " ",
    "\to return the experiment identification identifier.",
    " ",
    "\to The experiment will not execute until an \'expGo\' command ",
    "\t  is issued.",
    " ",
    "- If the -i offline option is selected, the instrumentation ",
    "  used to gather the data will be LD_PRELOAD.  This means that ",
    "  the experiment will need to run to completion before any data",
    "  will be available for viewing.  This also means that expPause,",
    "  expCont, expDisable, and expEnable will not be available.  The",
    "  experiment must run from start to finish without interruption.",
    " ",
    "- If the -v mpi option is selected, all the threads that ",
    "  are part of a running application will be included ",
    "  in the experiment.",
    " ",
    "- If the -v mpi option is not present, only those ",
    "  threads that are running application will be included ",
    "  in the experiment.",
    " ",
    "- The <target_list> will associate the specified executable ",
    "  with the experiment being defined.",
    " ",
    "- The experiment type argument, <expType_list>, can be ",
    "  used to specify the types of data that will be collected ",
    "  during the experiment.",
    " ",
    "- Missing arguments can be supplied later with the \'expAttach\' ",
    "  command.",
    " ",
    "- An \'expCreate\' command with no arguments will still return ",
    "  a new <expId> and will set the focus.",
    " "
};


const char *cmd_expData_detailed[] = {
    cmd_expData_args[0],
    " ",
    cmd_expData_brief,
    " ",
    "  See expView for full options.",
    " "
};


const char *cmd_expDetach_detailed[] = {
    cmd_expDetach_args[0],
    " ",
    cmd_expDetach_brief,
    " ",
    "\t The remaining applications will not execute until an ",
    "\t \'expGo\' command is issued.",
    " ",
    "\t The experiment retains knowledge of both the applications ",
    "\t and the collectors and they can be referenced on later commands.",
    " ",
    "\t All previously collected data samples will be retained.",
    " ",
    "\t No new data, of the specified type, will be collected ",
    "\t for the specified application.",
    " ",
    "- If there is no -x <expId> provided, the focused experiment ",
    "  is used.",
    " ",
    "- If <target_list> is provided without <expType_list>, ",
    "  all collectors are detached for those applications.",
    " ",
    "- If <expType_list> is provided without <target_list>, ",
    "  the specified data collectors are detached from all ",
    "  the executable routines that are ttached to the indicated ",
    "  experiment.",
    " ",
    "- If both <target_list> and <expType_list> are provided, ",
    "  only the specified collectores in <expType_list> are ",
    "  detached from just those applications described in <target_list>.",
    " ",
    "- If neither <target_list> nor <expType_list> is provided, ",
    "  the command does nothing.",
    " "
};


const char *cmd_expDisable_detailed[] = {
    cmd_expDisable_args[0],
    " ",
    cmd_expDisable_brief,
    " ",
    "\t The experiment remains defined.",
    " ",
    "\t Data collection is \"turned off\" and no new ",
    "\t information is saved.",
    " ",
    "\t Instrumentation is disabled but may not removed ",
    "\t from the application.",
    " ",
    "\t Previously collected data is still available and ",
    "\t can be viewed or saved.",
    " ",
    "\t The execution state of the application will not be changed. ",
    "\t If running, it will continue to do so.",
    " ",
    "- See related commands:",
    " ",
    "\t \'expEnable\' can be used to restart data collection.",
    " ",
    "\t \'expSave\' can be used to save previously collected data.",
    " ",
    "\t \'expClose\' can be used to destroy the experiment and ",
    "\t free all data space used to save the collected data.",
    " ",
    "- \'-v all\' will result in data collection being ",
    "  stopped for all defined experiments.",
    " ",
    "- If this command is issued with no arguments, data ",
    "  collection is stopped for the focused experiment.",
    " "
};


const char *cmd_expEnable_detailed[] = {
    cmd_expEnable_args[0],
    " ",
    cmd_expEnable_brief,
    " ",
    "\t Existing instrumentation is enabled.",
    " ",
    "\t Data collection is \"turned on\" and new information ",
    "\t will be saved.",
    " ",
    "\t New information will be merged with any previously ",
    "\t collected data.",
    " ",
    "\t The execution state of the application will not be changed. ",
    "\t If running, it will continue to do so. If not running, an ",
    "\t 'expGo' command must be issued before it will start running,",
    " ",
    "- The all keyword will result in data collection being ",
    "  restarted for all defined experiments.",
    " ",
    "- If this command is issued with no arguments, data ",
    "  collection for the focused experiment is restarted.",
    " "
};


const char *cmd_expFocus_detailed[] = {
    cmd_expFocus_args[0],
    " ",
    cmd_expFocus_brief,
    " ",
    "- In many commands -x <expId> is optional. When omitted, ",
    "  the currently \"focused\" experiment is used.",
    " "
    "- If no argument is present on this command, return ",
    "  the focused experiment.\n",
    " "
    "- If the -x <expId> argument has an experiment id ",
    "  of zero (0), then clear the experiment focus.",
    " "
    "\t A command that uses an experiment id of zero is illegal ",
    "\t and will produce a fatal error.",
    " "
    "- This command does not change the execution state of ",
    "  an experiment.",
    " "
};


const char *cmd_expGo_detailed[] = {
    cmd_expGo_args[0],
    " ",
    cmd_expGo_brief,
    " ",
    "- If the experiment has already begun execution,",
    "  this command causes execution to continue from ",
    "  where it was interrupted.",
    " ",
    "- The experiment will continue to run until either:",
    " ",
    "\t * the application terminates, or",
    " ",
    "\t * the application executes a programmed halt, or",
    " ",
    "\t * the user issues another exp... command that refers ",
    "\t   to this experiment Id. or",
    " ",
    "\t * the OpenSS tool terminates due to an exit command, ",
    "\t   an external interrupt, or abnormal, internal event.",
    " ",
    "- Except when executed in batch mode, the execution of the ",
    "  application and the collection of performance data does not, ",
    "  automatically, prevent other commands from being issued:",
    " ",
    "\t A following command that depends on the result of this ",
    "\t experiment may not be able to execute and may block ",
    "\t further commands from being issued.",
    " ",
    "\t Independent commands may be issued and completed before ",
    "\t this experiment completes.",

    "\t The status of any experiment can be determined through the ",
    "\t listStatus command.",
    " ",
    "\t Depending on the type of data collection that is taking ",
    "\t place, it may be possible to view the results before the ",
    "\t application completes.",
    " ",
    "- The absence of the -x <expId> and all keyword will result ",
    "  in only the focused experiment being run.",
    " ",
    "- The use of -x <expId> will result in only that experiment ",
    "  being run.",
    " ",
    "- The use of the all option will result in every defined experiment ",
    "  being run."
    " "
};


const char *cmd_expPause_detailed[] = {
    cmd_expPause_args[0],
    " ",
    cmd_expPause_brief,
    " ",
    "	o The experiment will remain suspended until an expGo is",
    "	  issued or until the performance tool is exited, at which time",
    "	  all the instrumentation is removed from the experiment and",
    "	  the program is allowed to continue running.",
    " ",
    "- If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- If the keywork all is present, every defined experiment is halted.",
    " "
};


const char *cmd_expCont_detailed[] = {
    cmd_expCont_args[0],
    " ",
    cmd_expCont_brief,
    " ",
    "- If the experiment has already begun execution,",
    "  this command causes execution to continue from ",
    "  where it was interrupted.",
    " ",
    "- The experiment will continue to run until either:",
    " ",
    "\t * the application terminates, or",
    " ",
    "\t * the application executes a programmed halt, or",
    " ",
    "\t * the user issues another exp... command that refers ",
    "\t   to this experiment Id. or",
    " ",
    "\t * the OpenSS tool terminates due to an exit command, ",
    "\t   an external interrupt, or abnormal, internal event.",
    " ",
    "- Except when executed in batch mode, the execution of the ",
    "  application and the collection of performance data does not, ",
    "  automatically, prevent other commands from being issued:",
    " ",
    "\t A following command that depends on the result of this ",
    "\t experiment may not be able to execute and may block ",
    "\t further commands from being issued.",
    " ",
    "\t Independent commands may be issued and completed before ",
    "\t this experiment completes.",

    "\t The status of any experiment can be determined through the ",
    "\t listStatus command.",
    " ",
    "\t Depending on the type of data collection that is taking ",
    "\t place, it may be possible to view the results before the ",
    "\t application completes.",
    " ",
    "- The absence of the -x <expId> and all keyword will result ",
    "  in only the focused experiment being run.",
    " ",
    "- The use of -x <expId> will result in only that experiment ",
    "  being run.",
    " ",
    "- The use of the all option will result in every defined experiment ",
    "  being run."
    " "
};

const char *cmd_expRestore_detailed[] = {
    cmd_expRestore_args[0],
    " ",
    cmd_expRestore_brief,
    " ",
    "\t A new experiment is created and intitialize with ",
    "\t this information.",
    " ",
    "\t This command also sets the focus to the new experiment's ",
    "\t Identifier.",
    " ",
    "\t The new experiment will be in the same state as that ",
    "\t established with the expDisable command.",
    " ",
    "\t If the original applications are still running, the ",
    "\t user can reconnect to them and reinsert instrumentation ",
    "\t into them, through them, through use of the expEnable command. ",
    "\t Doing this will interrupt the executing application and an ",
    "\t expGo command will be required before the application continues ",
    "\t and new data samples can be collected.",
    " ",
    "\t Previously collected data can be looked at with the ",
    "\t expView command without reconnecting to the original",
    "\t applications.",
    " ",
    "\t If an expGo command is issued, new data samples will ",
    "\t be placed into the data base specified by -f <file_name>. ",
    "\t A different data base can be specified with the expSave command.",
    " "
};


const char *cmd_expSave_detailed[] = {
    cmd_expSave_args[0],
    " ",
    cmd_expSave_brief,
    " ",
    "\t For each experiment, information about the executable ",
    "\t programs that are instrumented, information about the ",
    "\t instrumentation that is used and any performance data ",
    "\t that is collected are saved in a data base.",
    " ",
    "\t The data base is created by the OpenSS tool in a temporary ",
    "\t location and will be deleted when an expClose command is ",
    "\t issued for the experiment, or when an exit command is ",
    "\t issued that terminates the OpenSS tool.",
    " ",
    "\t The entire data base can be saved with the expSave command ",
    "\t and can be reloaded into the OpenSS tool with the expRestore ",
    "\t command.",
    " ",
    "\t The data base is in a special format that supports the ",
    "\t opertaions that the OpenSS tool must perform.",
    " ",
    "- Without \'-v copy\'",
    " ",
    "\t If the original, temporary data base file is still in use, ",
    "\t it is copied to the specified file name and the OpenSS tool ",
    "\t will use the new file to collect any new information about ",
    "\t the experiment. When the experiment completes, this data ",
    "\t base will be retained.",
    " ",
    "\t If a previous expSave command has caused the experiment's ",
    "\t information to be directed to a user defined data base",
    " ",
    "\t The contents of the previous data base  ",   
    " ",
    "- without any of the data samples",
    " ",
    "- is copied to the new data base.",
    " ",
    "\t The previous data base is closed.",
    " ",
    "\t The new data base is used by the OpenSS tool to collect any ",
    "\t new information that is added to or collected for, the experiment.",
    " ",
    "- With \'-v copy\' the given location receives a copy ",
    "  of the current state of the data base.",
    " ",
    "\t The current contents of the data base is duplicated and ",
    "\t saved to the given location.",
    " ",
    "\t No new information will be added to the given location.",
    " ",
    "\t New information will be added to the original data base.",
    " ",
    "- This command does not change the execution state of the ",
    "  experiment, although it may temporarily suspend execution ",
    "  while the command is being executed.",
    " "
};


const char *cmd_expSetArgs_detailed[] = {
    cmd_expSetArgs_args[0],
    " ",
    cmd_expSetArgs_brief,
    " ",
    "- arguments are the user application arguments.",
    " ",
    "- ",
    " ",
    "- This command does not change the execution state of ",
    "  the experiment, although it may temporarily suspend ",
    "  execution while the command is being executed.",
    " "
};

const char *cmd_expSetParam_detailed[] = {
    cmd_expSetParam_args[0],
    " ",
    cmd_expSetParam_brief,
    " ",
    "- <expParam> will be unique within the experiment.",
    " ",
    "- The parameter names can be used by other experiments.",
    " ",
    "- This command does not change the execution state of ",
    "  the experiment, although it may temporarily suspend ",
    "  execution while the command is being executed.",
    " "
};

const char *cmd_expStatus_detailed[] = {
    cmd_expStatus_args[0],
    " ",
    cmd_expStatus_brief,
    " ",
    "- The absence of any option will result in information",
    "  Being reported for the focused experiment",
    " ",
    "- The use of -x <expId> will result in imformation",
    "  being reported for the specified experiment.",
    " ",
    "- The use of \'-v all\' will result in information being",
    "  reported for all the known experiments.",
    " "
};


const char *cmd_expView_detailed[] = {
    cmd_expView_args[0],
    " ",
    cmd_expView_brief,
    " ",
    "- If this command is issued with no -x <expId>, the ",
    "  focused experiment is used.",
    " ",
    "- Output can be directed to a file by the use of '>' or '>>'",
    "  followed with a file name, at the end of the command.  If",
    "  the output is not redirected, it will be sent to stdout.",
    " ",
    "- If <expMetric_list_spec> is present, only those metrics ",
    "  in the list will be included in the report.",
    " ",
    "- If a <target_list> is specified, only the data for the",
    "  specified targets will be included in the report.",
    " ",
    "- If a <format_spec> is specified, the listed options will",
    "  override the global preferences that are set for",
    "  the option.",
    " ",
    "- The report may also be controlled through <modifier_list>",
    "  or <expMetric_list> specifiers.  The meaning of these options",
    "  is unique to each <viewType>, although the convention is",
    "  that the '-v <modifier_list>' will select a version of the",
    "  report that will be generated and '-m <expMetric_list>' will",
    "  determines which metrics or data items are included in that",
    "  report.  The specific options available for a view can be",
    "  determined by requesting 'help <viewType>'.",
    " ",
    "- This command does not change the execution state of the ",
    "  experiment, although the nature of the requested data may ",
    "  require that the experiment complete execution before the ",
    "  information can be provided.",
    " ",
    "- To find the viewtypes available for your experiment use",
    "    list -v views.",
    " ",
    "- To find the all the viewtypes available to you use",
    "    list -v views,all.",
    " ",
    "- To get detailed information for a specific viewtype use:",
    " ",
    "    help <viewType> where <viewType> is the view type.",
    " ",
    "  Examples: ",
    "      help mpi",
    "      help pcsamp",
    "      help hwc",
    " "
};

const char *cmd_cViewCreate_detailed[] = {
    cmd_cViewCreate_args[0],
    " ",
    cmd_cViewCreate_brief,
    " ",
    "Defines the elements of a report. Except for the",
    "name of the command, the form and meaning of each",
    "field is identical to that of the 'expView' command.",
    "In addition, this returns an ID that can be",
    "referenced on the 'cView' command.",
    " ",
    "This command has a different purpose than the",
    "'expView' command. Where the 'expView' command",
    "generates a the report immediately, this command",
    "will not produce a report until the ID is used on a",
    "'cView' command. This allows the same report to be",
    "generated multiple times, for different purposes.",
    " ",
    "Create an id that represents a defined view. This",
    "View will then be represented in a single column of",
    "a cView() command result. ",
    " "
};

const char *cmd_cViewDelete_detailed[] = {
    cmd_cViewDelete_args[0],
    " ",
    cmd_cViewDelete_brief,
    " ",
    "This command purges the definition of previously",
    "created ID that was returned as the result of a",
    "'cViewCreate' command.  The ID can no longer be",
    "referenced on any 'cView' commands.",
    " ",
    "Default: delete the last cvid defined.",
    "-v all:  delete all defined cvids.",
    "-c <cvid_list>: delete listed cvids.",
    " "
};

const char *cmd_cViewInfo_detailed[] = {
    cmd_cViewInfo_args[0],
    " ",
    cmd_cViewInfo_brief,
    " ",
    "Default: dump the last cvid defined.",
    "-v all:  dump all defined cvids.",
    "-c <cvid_list>: dump name cvids.",
    " ",
    "This command will echo back the information that was",
    "specified on a 'cViewCreate' command. If no ID is",
    "provided, the information of the most recently",
    "defined cView ID is returned. If an ID list is",
    "provided, information is returned for each of the",
    "listed cView IDs. If the '-v all' option is",
    "specified, information is returned for all of the",
    "currently defined IDs.",
    " "
};

const char *cmd_cView_detailed[] = {
    cmd_cView_args[0],
    " ",
    cmd_cView_brief,
    " ",
    " Where <cvid_list> represents a list or range of 2 or",
    " more custom view ids",
    " ",
    "This command uses the information provided on",
    "'cViewCreate commands to generate a report. If there",
    "is only one ID provided in the '-c <id_list>', the",
    "output of this command is equivalent to executing an",
    "'expView' command with the same fields that were on",
    "the 'cViewCreate' command.",
    " ",
    "When multiple IDs are provided in the '-c",
    "<id_list>', a report is generated for each ID and",
    "the output from each is merged into a final report,",
    "using the right most field as a key. The final",
    "report will have columns for each of the fields that",
    "the initial reports contain, except that the right",
    "most column (the key) is only printed once. Keys",
    "that exist in one of the generated reports and not",
    "others may have columns that are blank filled.",
    " "
};

const char *cmd_expCompare_detailed[] = {
    cmd_expCompare_args[0],
    " ",
    cmd_expCompare_brief,
    " ",
    "This looks a lot like the 'expView' command, but the",
    "semantics are slightly different. The purpose of the",
    "'expView' command is to display a summary that includes",
    "the specified items from the specified (or implied)",
    "<target_list>. The whole point of the 'expCompare'",
    "command is to find multiple things to display in",
    "side-by-side columns, rather than summarized in a single",
    "column.",
    " ",
    "The semantic routine for the command looks through the",
    "components of the <target_list> for non-singular",
    "components. That is what defines the separate",
    "components to display. For example, the following",
    "command:",
    " ",
    "    expCompare -x 1 usertime -v function -f foo -m time -h host1, host2",
    " ",
    "will produce a report that contains a column for the",
    "time spend in function 'foo' on 'host1', along side the",
    "time spent in function 'foo' on 'host2'. Similarly, the",
    "following command:",
    " ",
    "    expCompare -x 1 usertime -v function -f foo -m time -h host1, -p 11513,11514",
    " ",
    "will produce a report that contains a column for the",
    "time spend in function 'foo' on 'host1' pid 1153, along",
    "side the time spent in function 'foo' on 'host1' pid",
    "1154.",
    " ",
    "It is an error to specify more than one sub-list of",
    "items within the <target_list>.",
    " ",
    "The addition of 'AbsDiff' to the metric list will result",
    "in the display of the Absolute Difference of the first",
    "metric produced by the requested views of 2 data sets.",
    " "
};

const char *cmd_list_detailed[] = {
    cmd_list_args[0],
    " ",
    cmd_list_brief,
    " ",
    "\t Where <listType> is one of: ",
    " ",
    "\t\t breaks:          List breakpoints (help listBreaks)",
    "\t\t database:        List the current database loaded into the CLI",
    "\t\t expId:           List the experiments that have been defined. ",
    "\t\t                  (help listExpId)",
    "\t\t exptypes:        List the available performance measurement ",
    "\t\t                  utilities that can be used to collect data in ",
    "\t\t                  an experiment. (help listExpTypes)",
    "\t\t executable:      List the executables in the specified experiment",
    "\t\t hosts:           Lists the hosts that define the specified cluster. ",
    "\t\t                  (help listHosts)",
    "\t\t mangled:         Lists the mangled name and corresponding unmangled name pairs,",
    "\t\t                  if any are present.",
    "\t\t metrics:         Lists the metrics that are associated with a ",
    "\t\t                  ViewTypeList object. (help listMetrics)",
    "\t\t mpicategories:   List the MPI categories that could be designated as a ",
    "\t\t                  parameter value(s) for the MPI experiments.",
    "\t\t mpifunctions:    List the MPI functions that could be designated as a ",
    "\t\t                  parameter value(s) for the MPI experiments.",
    "\t\t obj:             List the objects of the applications that are part ",
    "\t\t                  of the specified experiment. (help listObj)",
    "\t\t params:          List the parameters that are associated with a ",
    "\t\t                  particular <viewType> or set of <viewType>s.",
    "\t\t                  (help listParams)",
    "\t\t paramsval:       List the parameters that are assigned with a ",
    "\t\t                  particular experiment.",
    "\t\t                  (help listParamsVal)",
    "\t\t pids:            List running processes associated with a specific ",
    "\t\t                  experiment and, optionally, on a specific machine. ",
    "\t\t                  (help listPids)",
    "\t\t pidsandthreads:  List running processes and thread pairs associated with a specific ",
    "\t\t                  experiment and, optionally, on a specific machine. ",
    "\t\t preferences:     List all global preferences and their current values. ",
    "\t\t ranks:           List the mpi ranks associated with a specific ",
    "\t\t                  experiment, a specific Pid or on a specific machine.",
    "\t\t                  (help listRanks)",
    "\t\t ranksandthreads: List the mpi rank and thread pairs associated with a specific ",
    "\t\t                  experiment, a specific Pid or on a specific machine.",
    "\t\t savedviews:      Lists the names of files that were generated to save the result",
    "\t\t                  of expView commands associated with a specified experiment.",
    "\t\t src:             List the source filenames of the modules that are part ",
    "\t\t                  of the specified experiment. (help listSrc)",
    "\t\t srcfullpath:     List the source full path filenames of the modules that are part ",
    "\t\t                  of the specified experiment.",
    "\t\t statements:      List the statements and start address of experiment executables.",
    "\t\t status:          List the status of user experiments. (help listStatus)",
    "\t\t threads:         List the Threads associated with a specific experiment, ",
    "\t\t                  a specific Pid or on a specific machine. ",
    "\t\t                  (help listThreads)",
    "\t\t views:           List the views that are available for an ExpTypeList. ",
    "\t\t                  (help listViews)",
    "\t\t walltime:        List the wall clock time corresponding with a specific experiments runnging time.",
    " ",
    "\t The format of the output list is dependant on the type ",
    "\t of list requested.",
    " "
};

const char *cmd_listBreaks_detailed[] = {
    cmd_listBreaks_args[0],
    " ",
    cmd_listBreaks_brief,
    " ",
    " "
};


const char *cmd_listExp_detailed[] = {
    cmd_listExp_args[0],
    " ",
    cmd_listExp_brief,
    " "
};


const char *cmd_listHosts_detailed[] = {
    cmd_listHosts_args[0],
    " ",
    cmd_listHosts_brief,
    " ",
    "\t The absence of any options will cause all the hosts that ",
    "\t have been included in the focused experiment to be listed.",
    " ",
    "\t The -x <expId> option will cause all the hosts that have ",
    "\t been included in the selected experiment to be listed.",
    " "
};


const char *cmd_listObj_detailed[] = {
    cmd_listObj_args[0],
    " ",
    cmd_listObj_brief,
    " ",
    "\t If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- The listing can be restricted with the use of a <target> ",
    "  specification.",
    " ",
    "- Any component described in the <target> specification must ",
    "  be part of the selected experiment.",
    " ",
    "- If <target> is not provided, information will be provided for ",
    "  all portions of all applications that are attached to the experiment.",
    " "
};


const char *cmd_listPids_detailed[] = {
    cmd_listPids_args[0],
    " ",
    cmd_listPids_brief,
    " ",
    "\t If no options are supplied, the Pids that are referenced ",
    "\t in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the Pids ",
    "\t that are part of the specified experiment are listed.",
    " ",
    "- The use of the \"<host_file>\" option acts like a filter ",
    "\t on the output.",
    " ",
    "\t The absence of any \"-h <host_name>\" specification will ",
    "\t cause all pids on all systems in the cluster to be listed.",
    " ",
    "\t The default cluster contains only localhost and must be ",
    "\t specified by using -h localhost.",
    " ",
    "\t Use of the -f <file_name> option will result in only the ",
    "\t pids associated with that <file_name> being listed for the ",
    "\t selected hosts.",
    " "
};


const char *cmd_listMetrics_detailed[] = {
    cmd_listMetrics_args[0],
    " ",
    cmd_listMetrics_brief,
    " ",
    "\t If no options are selected, metrics for only the data ",
    "\t collectors that are part of the focused experiment will ",
    "\t be listed.",
    " ",
    "\t The use of -x <expId> will cause the metrics that are ",
    "\t associated with the set of data collectors that are part ",
    "\t of the specified experiment to be listed.",
    " ",
    "\t The use of the keyword all will cause all the metrics ",
    "\t for all available collectors to be listed.",
    " ",
    "\t The use of the \"<expType>\" option will result in a ",
    "\t listing of only those metrics associated with that ",
    "\t specific data collector.",
    " "
};

const char *cmd_listParams_detailed[] = {
    cmd_listParams_args[0],
    " ",
    cmd_listParams_brief,
    " ",
    "\t If no options are selected, parameters for only the data ",
    "\t collectors that are part of the focused experiment will ",
    "\t be listed.",
    " ",
    "\t The use of -x <expId> will cause the parameters that ",
    "\t are associated with the set of data collectors that are ",
    "\t part of the specified experiment to be listed.",
    " ",
    "\t The use of the keyword all will cause all the parameters ",
    "\t for all available collectors to be listed.",
    " ",
    "\t The use of the \"<expType>\" option will result in a ",
    "\t listing of only those parameters associated with that ",
    "\t specific data collector.",
    " "
};

const char *cmd_listParamsVal_detailed[] = {
    cmd_listParamsVal_args[0],
    " ",
    cmd_listParamsVal_brief,
    " ",
    "\t If no options are selected, the parameters and values ",
    "\t that are part of the focused experiment will ",
    "\t be listed.",
    " ",
    "\t The use of -x <expId> will cause the parameters and ",
    "\t values are associated with the set of data collectors that are ",
    "\t part of the specified experiment to be listed.",
    " ",
    "\t The use of the keyword all will cause all the parameters ",
    "\t for all available collectors to be listed.",
    " ",
    "\t The use of the \"<expType>\" option will result in a ",
    "\t listing of only those parameters associated with that ",
    "\t specific data collector.",
    " "
};


const char *cmd_listRanks_detailed[] = {
    cmd_listRanks_args[0],
    " ",
    cmd_listRanks_brief,
    " ",
    "\t If no options are supplied, all the Ranks that are ",
    "\t referenced in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the ",
    "\t Ranks that are part of the specified experiment are listed.",
    " ",
    "\t If the all option is supplied, all Ranks that are active ",
    "\t on the specified system are listed.",
    " ",
    "- The use of the \"<target>\" option acts like a filter on ",
    "  the output.",
    " ",
    "\t The default cluster contains only localhost and must be ",
    "\t specified by using -h localhost.",
    " ",
    "\t Use of the -f option will result in only the Ranks ",
    "\t associated with that <file_name> being listed for the ",
    "\t selected hosts.",
    " ",
    "\t Use of the -p option will result in only the Ranks associated ",
    "\t with that Pid being listed for the selected hosts.",
    " ",
    "\t Use of the -r option will result in only that specific Rank ",
    "\t being listed, if it exists on the selected hosts.",
    " "
};


const char *cmd_listSrc_detailed[] = {
    cmd_listSrc_args[0],
    " ",
    cmd_listSrc_brief,
    " ",
    "- If -x <expId> is not provided, the focused experiment ",
    "  is used.",
    " ",
    "- The listing can be restricted with the use of a <target> ",
    "  specification.",
    " ",
    "- Any component described in the <target> specification must ",
    "  be part of the selected experiment.",
    " ",
    "- -f <file_name> [ , <file_name> ]* can be used to provide a list of object modules ",
    "  that will be searched for relevant source files. ",
    " ",
    "- If <target> is not provided, information will be provided ",
    "  for all portions of all applications that are attached to the experiment.",
    " "
};


const char *cmd_listStatus_detailed[] = {
    cmd_listStatus_args[0],
    " ",
    cmd_listStatus_brief,
    " ",
    "\t If no option is selected, return the status of the ",
    "\t focused experiment.",
    " ",
    "\t The use of -x <expId> will cause the status of the ",
    "\t specified experiment to be returned.",
    " ",
    "\t The use of \"-v all\" will cause the status of ",
    "\t all the defined experiments to be returned.",
    " "
};


const char *cmd_listThreads_detailed[] = {
    cmd_listThreads_args[0],
    " ",
    cmd_listThreads_brief,
    " ",
    "\t If no options are supplied, the Threads that are  ",
    "\t referenced in the focused experiment are listed.",
    " ",
    "\t If the \"-x <expId>\" option is supplied, all the  ",
    "\t Threads that are part of the specified experiment are listed.",
    " ",
    "\t The use of the \"<target>\" option acts like a filter on the output.",
    " ",
    "\t The absence of any \"-h <host_name>\" specification  ",
    "\t will cause all pids on all systems in the cluster to be listed.",
    " ",
    "\t The default cluster contains only localhost and must  ",
    "\t be specified by using -h localhost.",
    " ",
    "\t Use of the -f option will result in only the Threads ",
    "\t associated with that <file_name> being listed for the selected hosts.",
    " ",
    "\t Use of the -p option will result in only the Threads ",
    "\t associated with that Pid being listed for the selected hosts.",
    " ",
    "\t Use of the -t option will result in only that specific ",
    "\t Thread being listed, if it exists on the selected hosts.",
    " "
};


const char *cmd_listTypes_detailed[] = {
    cmd_listTypes_args[0],
    " ",
    cmd_listTypes_brief,
    " ",
    "- If no option is selected, list the utilities that are ",
    "  attached to the focused experiment.",
    " ",
    "- The use of -x <expId> will cause the utilities that ",
    "  are attached to the specified experiment to be listed.",
    " ",
    "- The use of \"-v all\" will cause all the possible ",
    "  performance measurement utilities that can be used in ",
    "  experiments to be listed.",
    " "
};


const char *cmd_listViews_detailed[] = {
    cmd_listViews_args[0],
    " ",
    cmd_listViews_brief,
    " ",
    "- If no options are selected, the reports for only the ",
    "  data collectors that are part of the focused experiment ",
    "  will be listed.",
    " ",
    "- The use of -x <expId> will cause the the reports that ",
    "  are associated with the set of data collectors that are ",
    "  part of the specified experiment to be listed.",
    " ",
    "- The use of the keyword all will cause all the the reports ",
    "  for all available collectors to be listed.",
    " ",
    "- The use of the \"<expType>\" option will result in a listing ",
    "  of only those the reports associated with that specific ",
    "  data collector.",
    " "
};


const char *cmd_clearBreak_detailed[] = {
    cmd_clearBreak_args[0],
    " ",
    cmd_clearBreak_brief,
    " ",
    "- This command does not change the execution state of an ",
    "  experiment, although it may be temporarily suspended ",
    "  during execution of the command.",
    " "
};


const char *cmd_exit_detailed[] = {
    cmd_exit_args[0],
    " ",
    cmd_exit_brief,
    " ",
    "- Suspend execution or all executables",
    " ",
    "- Suspend data collection.",
    " ",
    "- Remove instrumentation from all applications.",
    " ",
    "- Release all applications from control of the OpenSS tool",
    " ",
    "- Allow all applications to continue executing.",
    " ",
    "- Close all data base files.",
    " ",
    "- Delete all temporary files.",
    " ",
    "- Close the GUI and Command windows.",
    " ",
    "- Terminate execution of the OpenSS tool.",
    " "
};


const char *cmd_help_detailed[] = {
    cmd_help_args[0],
    " ",
    cmd_help_brief,
    " ",
    "Currently the \'-v\' option is not supported.",
    " "
};


const char *cmd_history_detailed[] = {
    cmd_history_args[0],
    " ",
    cmd_history_brief,
    " ",
    "- If no <integer> is provided, print out only ",
    "  requested number of history entries.",
    " "
};


const char *cmd_log_detailed[] = {
    cmd_log_args[0],
    " ",
    cmd_log_brief,
    " ",
    "- Stop echoing if no file is specified on a log command.",
    " ",
    "- This is primarly intended to be an internal debug aid ",
    "  for the OpenSS tool developer since the generated files ",
    "  can quickly become huge.",
    " "
};


const char *cmd_openGui_detailed[] = {
    cmd_openGui_args[0],
    " ",
    cmd_openGui_brief,
    " "
};


const char *cmd_playBack_detailed[] = {
    cmd_playBack_args[0],
    " ",
    cmd_playBack_brief,
    " "
};


const char *cmd_record_detailed[] = {
    cmd_record_args[0],
    " ",
    cmd_record_brief,
    " ",
    "\t Recording is preformed relative to the input source that ",
    "\t issues this command.",
    " ",
    "\t This design causes commands issued by the GUI to be ",
    "\t recorded seperately from commands issued by the Command window.",
    " ",
    "- Commands read from a file specified on a succeeding playBack",
    "  command will not be echoed.",
    " ",
    "- Stop echoing if no file is specified on a record command.",
    " ",
    "- Stop echoing if the end of the input file containing the ",
    "  original record command is encoutnered.",
    " "
};


const char *cmd_setBreak_detailed[] = {
    cmd_setBreak_args[0],
    " ",
    cmd_setBreak_brief,
    " ",
    "- If -x <expId> is not provided, the focused experiment is used.",
    " ",
    "- The break location is specified through the combination of the ",
    "  <target> and <address_description> arguments.",
    " ",
    "- The break location must be a location in the specified experiment.",
    " ",
    "- If <target> is not provided, the <address_description> must be ",
    "  valid on every host and executable attached to the experiment.",
    " "
};


const char *cmd_Wait_detailed[] = {
    cmd_Wait_args[0],
    " ",
    cmd_Wait_brief,
    " ",
    "- The 'expGo' command initiates asynchronous execution of",
    "  applications and allows new commands to be executed while the",
    "  application is still running and still collecting performance",
    "  data.  Often times, this is convenient because it allows for the",
    "  display of intermediate data, before the application completes.",
    "  However, there may be situations particularly when running a",
    "  predefined sequence of commands through a 'playback' command,",
    "  when it is desirable to block the execution of new commands until",
    "  the application has completed.  The 'Wait' command will do this.",
    " ",
    "- If the tool is initiated with the '-batch' option, a 'Wait'",
    "  command is implied before every 'expView' command.  This behavior",
    "  greatly reduces the need for the 'Wait' command.",
    " ",
    "- If no options are provided, the '-v terminate' option is assumed",
    "  and command execution will be suspended until the focused",
    "  experiment stops execution.",
    " ",
    "- If only the '-x <expId>' option is provided, the '-v terminate'",
    "  option is assumed and command execution will be suspended until",
    "  that experiment stops execution.",
    " ",
    "- If the '-v terminate, all' option is provided, command execution",
    "  will be suspended until all experiments stop execution.",
    " "
};

/*********************************************/
// COMMAND Examples
/*********************************************/
// 
const char *cmd_expAttach_example[] = {
    "expAttach -x 2 -f my_prog pcsamp",
    "    Includes the executable program \'my_prog\' into experiment",
    "    #2 and adds the performance measurement utility \'pcsamp\'",
    "    to the experiment. The executable is loaded into the",
    "    system and instrumented to provide performance measurements.",
    " ",
    "    Experiment #2 must have been previously defined with an",
    "    expCreate or expRestore command.",
    " ",
    "    The program will not start execution until a subsequent",
    "    \'expGo -x 2\' command is issued.",
    " ",
    "expAttach -x 1 -v mpi -h localhost -p 1234 pcsamp",
    " ",
    "    Which will, for the previously created experiment #1,",
    "    find pid 1234 and attach the pcsamp data collector to",
    "    all the associated pids that are part of the same mpi",
    "    job. The assumption is that the given pid is the",
    "    original one that the system allocated for an ",
    "    \'mpirun...\' command.",
    " "
};

const char *cmd_expClose_example[] = {
    "expClose -x 3",
    " ",
    "    Closes experiment #3.",
    " ",
    "expClose all",
    " ",
    "    Closes all experiments",
    " ",
    "    In all the above cases, if the target application is",
    "    running it will be left running. To kill the",
    "    application(s) you will need to add \'-v kill\'.",
    " ",
    "This command will also delete all performance measurements",
    "that were not explicitly saved with an \'expSave\' command.",
    "This means that the results of the experiment will not be",
    "available to look at.",
    " "
};

const char *cmd_expCreate_example[] = {
    "expCreate -f my_prog usertime",
    " ",
    "    Creates an experiment targeting the application",
    "    \'my_prog\' using the usertime performance measurement",
    "    utility.",
    " ",
    "    The next logical action would be to run the experiment",
    "    using expGo.",
    " ",
    "    If you need to add more attributes to this experiment",
    "    before running it, use the expAttach command.",
    " ",
    "    expCreate changes the focus to the newly created",
    "    experiment. If you wish to change the focus back to an",
    "    existing experiment use the expFocus command.",
    " "
};

const char *cmd_expDetach_example[] = {
    "expDetach -f my_prog pcsamp",
    " ",
    "    Detach the pcsampling plugin from the targeted",
    "    application \'my_prog\' in the focused experiment.",
    " ",
    "expDetach -x 2 -f my_prog pcsamp",
    " ",
    "    Detach the pcsampling plugin from the targeted",
    "    application \'my_prog\' in experiment #2 only.",
    " ",
    "expDetach -x 2 pcsamp",
    " ",
    "    Detach the pcsampling plugin from the a.out and all dsos",
    "    in experiment #2.",
    " "
};

const char *cmd_expDisable_example[] = {
    "expDisable",
    " ",
    "    Turn off collection of performance data in the focused",
    "    experiment.",
    " ",
    "expDisable all",
    " ",
    "    Turn off collection of performance data in all defined",
    "    experiments.",
    " ",
    "expDisable -x 3",
    " ",
    "    Turn off collection of performance data in the defined",
    "    experiment #3.",
    " "
};

const char *cmd_expEnable_example[] = {
    "expEnable",
    " ",
    "    Turn on collection of performance data in the focused",
    "    experiment that was previously disabled by an expDisable",
    "    command.",
    " ",
    "expEnable all",
    " ",
    "    Turn on collection of performance data in all defined",
    "    experiments that was previously disabled by an",
    "    \'expDisable\' command.",
    " ",
    "expEnable -x 3",
    " ",
    "    Turn on collection of performance data in the defined",
    "    experiment #3 that was previously disabled by an",
    "    \'expDisable\' command.",
    " ",
    "    If #3 was not the currently focused experiment this will",
    "    NOT bring it into focus. Use \'expFocus -x 3\' to do that.",
    " ",
    "    The next logical action would be to run the experiment",
    "    using \'expGo -x 3\'.",
    " "
};

const char *cmd_expFocus_example[] = {
    "expFocus",
    " ",
    "    Return the id of the currently focused experiment",
    " ",
    "expFocus -x 5",
    " ",
    "    Bring into focus experiment #5.",
    " ",
    "Only one experiment can be in focus at a time.",
    " "
};

const char *cmd_expGo_example[] = {
    "expGo",
    " ",
    "    Run the currently focused experiment.",
    " ",
    "expGo -x 5",
    " ",
    "    Run experiment #5. If #5 was not the currently focused",
    "    experiment this will NOT bring it into focus. Use",
    "    \'expFocus\' to do that.",
    " ",
    "The next logical action would be to display the",
    "experiment results using expView.",
    " "
};


const char *cmd_expPause_example[] = {
    "expPause",
    " ",
    "    Suspend/stop execution of the currently focused",
    "    experiment",
    " ",
    "expPause -x 5",
    " ",
    "    Suspend/stop execution of experiment #5. If #5 was not",
    "    the currently focused experiment this will NOT bring it",
    "    into focus. Use \'expFocus\' to do that.",
    " "
};

const char *cmd_expCont_example[] = {
    "expCont",
    " ",
    "    Continue the execution of the currently focused experiment.",
    " ",
    "expCont -x 5",
    " ",
    "    Continue execution of experiment #5.  If #5 was not the currently focused",
    "    experiment this will NOT bring it into focus. Use",
    "    \'expFocus\' to do that.",
    " ",
    "The next logical action would be to display the",
    "experiment results using expView.",
    " "
};


const char *cmd_expRestore_example[] = {
    "expRestore -f my_experiment.data",
    " ",
    "    Reads the data stored in \'my_experiment.data\' and",
    "    defines a new experiment that is initialized with",
    "    information in the file. The focus is set to",
    "    this new experiment.",
    " ",
    "    No attempt is made to determine if the saved information",
    "    refers to a still running application however, a subsequent",
    "    \'expGo\' command will attempt to find and attach to it.",
    " "
};

const char *cmd_expSave_example[] = {
    "expSave -f my_experiment.data",
    " ",
    "    Saves data and state of the focused experiment to the",
    "    file \'my_experiment.data\'.",
    " ",
    "expSave -x 3 -f my_experiment.data",
    " ",
    "    Saves data and state of experiment #3 to the",
    "    file \'my_experiment.data\'.",
    " "
};

const char *cmd_expSetArgs_example[] = {
    "expSetArgs n 50 50 50",
    " ",
    "    Will set the arguments for the application being run as part of ",
    "    the focused experiment.",
    " ",
    "expSetArgs -x 3 n 50 50 500",
    " ",
    "    Will set the  arguments for the application being run as part of",
    "    experiment #3.",
    " "
};

const char *cmd_expSetParam_example[] = {
    "expSetParam pcsamp::sampling_rate=10",
    " ",
    "    Will set the sampling rate in the pcsamp collector for",
    "    the focused experiment.",
    " ",
    "expSetParam -x 3 pcsamp::sampling_rate=10, usertime::sampling_rate=20",
    " ",
    "    Will set the sampling rate of the pcsamp collector to 10",
    "    and the sampling rate of the usertime collector to 20,",
    "    both in experiment #3.",
    " ",
    "expSetParam -x 5 sampling_rate=10",
    " ",
    "    Will set the sampling_rate to 10 in all the collectors",
    "    that are part of experiment #5.",
    " "
};

const char *cmd_expStatus_example[] = {
    "expStatus",
    " ",
    "    Displays the status of the currently focused experiment.",
    " ",
    "expStatus -x 2",
    " ",
    "    Displays the status of experiment #2.",
    " ",
    "expStatus all",
    " ",
    "    Displays the status of all defined experiments.",
    " "
};

const char *cmd_Wait_example[] = {
    "  expGo",
    "  Wait",
    "  expView",
    " ",
    "    This sequence will cause the 'expView' command to issue",
    "    after the running experiment completes and all the",
    "    performance data is available.",
    " ",
    "    Without the 'Wait' command, the 'expView' command will",
    "    be issued immediately after the 'expGo' when there may",
    "    not be any data available to display."
    " "
};


/*********************************************/
// COMMAND MESSAGE ARRAY
/*********************************************/
// message array to be passed to message czar
OpenSpeedShop::message_element_t cmd_msg[] = {

//    CMD_HEAD_ERROR,
    -1,     	//  Index for error messages
    NULL,   	//  Keyword
    NULL,0, 	//  Related keyword list
    NULL,   	//  Topic
    NULL,	//  Brief string
    NULL,0, 	//  Normal description list of strings
    NULL,0, 	//  Detailed description list of strings
    NULL,0, 	//  Example list
    NULL,0, 	//  Argument list

//    CMD_EXP_ATTACH,
    -1,cmd_desc[CMD_EXP_ATTACH].name,
    cmd_expAttach_related,sizeof(cmd_expAttach_related)/sizeof(char **),
    "commands",cmd_expAttach_brief,
    cmd_expAttach_detailed,sizeof(cmd_expAttach_detailed)/sizeof(char **),
    NULL,0,
    cmd_expAttach_example,sizeof(cmd_expAttach_example)/sizeof(char **),
    cmd_expAttach_args,sizeof(cmd_expAttach_args)/sizeof(char **),
//    CMD_EXP_CLOSE,
    -1,cmd_desc[CMD_EXP_CLOSE].name,
    cmd_expClose_related,sizeof(cmd_expClose_related)/sizeof(char **),
    "commands",cmd_expClose_brief,
    cmd_expClose_detailed,sizeof(cmd_expClose_detailed)/sizeof(char **),
    NULL,0,
    cmd_expClose_example,sizeof(cmd_expClose_example)/sizeof(char **),
    cmd_expClose_args,sizeof(cmd_expClose_args)/sizeof(char **),
//    CMD_EXP_COMPARE,
    -1,cmd_desc[CMD_EXP_COMPARE].name,
    cmd_expCompare_related,sizeof(cmd_expCompare_related)/sizeof(char **),
    "commands",cmd_expCompare_brief,
    cmd_expCompare_detailed,sizeof(cmd_expCompare_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    cmd_expCompare_args,sizeof(cmd_expCompare_args)/sizeof(char **),
//    CMD_EXP_CONT,
    -1,cmd_desc[CMD_EXP_CONT].name,
    cmd_expCont_related,sizeof(cmd_expCont_related)/sizeof(char **),
    "commands",cmd_expCont_brief,
    cmd_expCont_detailed,sizeof(cmd_expCont_detailed)/sizeof(char **),
    NULL,0,
    cmd_expCont_example,sizeof(cmd_expCont_example)/sizeof(char **),
    cmd_expCont_args,sizeof(cmd_expCont_args)/sizeof(char **),
//    CMD_EXP_CREATE,
    -1,cmd_desc[CMD_EXP_CREATE].name,
    cmd_expCreate_related,sizeof(cmd_expCreate_related)/sizeof(char **),
    "commands",cmd_expCreate_brief,
    cmd_expCreate_detailed,sizeof(cmd_expCreate_detailed)/sizeof(char **),
    NULL,0,
    cmd_expCreate_example,sizeof(cmd_expCreate_example)/sizeof(char **),
    cmd_expCreate_args,sizeof(cmd_expCreate_args)/sizeof(char **),
//    CMD_EXP_DATA,
    -1,cmd_desc[CMD_EXP_DATA].name,
    cmd_expView_related,sizeof(cmd_expView_related)/sizeof(char **),
    "commands",cmd_expData_brief,
    cmd_expData_detailed,sizeof(cmd_expData_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    cmd_expData_args,sizeof(cmd_expData_args)/sizeof(char **),
//    CMD_EXP_DETACH,
    -1,cmd_desc[CMD_EXP_DETACH].name,
    cmd_expDetach_related,sizeof(cmd_expDetach_related)/sizeof(char **),
    "commands",cmd_expDetach_brief,
    cmd_expDetach_detailed,sizeof(cmd_expDetach_detailed)/sizeof(char **),
    NULL,0,
    cmd_expDetach_example,sizeof(cmd_expDetach_example)/sizeof(char **),
    cmd_expDetach_args,sizeof(cmd_expDetach_args)/sizeof(char **),
//    CMD_EXP_DISABLE,
    -1,cmd_desc[CMD_EXP_DISABLE].name,
    cmd_expDisable_related,sizeof(cmd_expDisable_related)/sizeof(char **),
    "commands",cmd_expDisable_brief,
    cmd_expDisable_detailed,sizeof(cmd_expDisable_detailed)/sizeof(char **),
    NULL,0,
    cmd_expDisable_example,sizeof(cmd_expDisable_example)/sizeof(char **),
    cmd_expDisable_args,sizeof(cmd_expDisable_args)/sizeof(char **),
//    CMD_EXP_ENABLE,
    -1,cmd_desc[CMD_EXP_ENABLE].name,
    cmd_expEnable_related,sizeof(cmd_expEnable_related)/sizeof(char **),
    "commands",cmd_expEnable_brief,
    cmd_expEnable_detailed,sizeof(cmd_expEnable_detailed)/sizeof(char **),
    NULL,0,
    cmd_expEnable_example,sizeof(cmd_expEnable_example)/sizeof(char **),
    cmd_expEnable_args,sizeof(cmd_expEnable_args)/sizeof(char **),
//    CMD_EXP_FOCUS,
    -1,cmd_desc[CMD_EXP_FOCUS].name,
    cmd_expFocus_related,sizeof(cmd_expFocus_related)/sizeof(char **),
    "commands",cmd_expFocus_brief,
    cmd_expFocus_detailed,sizeof(cmd_expFocus_detailed)/sizeof(char **),
    NULL,0,
    cmd_expFocus_example,sizeof(cmd_expFocus_example)/sizeof(char **),
    cmd_expFocus_args,sizeof(cmd_expFocus_args)/sizeof(char **),
//    CMD_EXP_GO,
    -1,cmd_desc[CMD_EXP_GO].name,
    cmd_expGo_related,sizeof(cmd_expGo_related)/sizeof(char **),
    "commands",cmd_expGo_brief,
    cmd_expGo_detailed,sizeof(cmd_expGo_detailed)/sizeof(char **),
    NULL,0,
    cmd_expGo_example,sizeof(cmd_expGo_example)/sizeof(char **),
    cmd_expGo_args,sizeof(cmd_expGo_args)/sizeof(char **),
//    CMD_EXP_PAUSE,
    -1,cmd_desc[CMD_EXP_PAUSE].name,
    cmd_expPause_related,sizeof(cmd_expPause_related)/sizeof(char **),
    "commands",cmd_expPause_brief,
    cmd_expPause_detailed,sizeof(cmd_expPause_detailed)/sizeof(char **),
    NULL,0,
    cmd_expPause_example,sizeof(cmd_expPause_example)/sizeof(char **),
    cmd_expPause_args,sizeof(cmd_expPause_args)/sizeof(char **),
//    CMD_EXP_RESTORE,
    -1,cmd_desc[CMD_EXP_RESTORE].name,
    cmd_expRestore_related,sizeof(cmd_expRestore_related)/sizeof(char **),
    "commands",cmd_expRestore_brief,
    cmd_expRestore_detailed,sizeof(cmd_expRestore_detailed)/sizeof(char **),
    NULL,0,
    cmd_expRestore_example,sizeof(cmd_expRestore_example)/sizeof(char **),
    cmd_expRestore_args,sizeof(cmd_expRestore_args)/sizeof(char **),
//    CMD_EXP_SAVE,
    -1,cmd_desc[CMD_EXP_SAVE].name,
    cmd_expSave_related,sizeof(cmd_expSave_related)/sizeof(char **),
    "commands",cmd_expSave_brief,
    cmd_expSave_detailed,sizeof(cmd_expSave_detailed)/sizeof(char **),
    NULL,0,
    cmd_expSave_example,sizeof(cmd_expSave_example)/sizeof(char **),
    cmd_expSave_args,sizeof(cmd_expSave_args)/sizeof(char **),
//    CMD_EXP_SETARGS,
    -1,cmd_desc[CMD_EXP_SETARGS].name,
    cmd_expSetArgs_related,sizeof(cmd_expSetArgs_related)/sizeof(char **),
    "commands",cmd_expSetArgs_brief,
    cmd_expSetArgs_detailed,sizeof(cmd_expSetArgs_detailed)/sizeof(char **),
    NULL,0,
    cmd_expSetArgs_example,sizeof(cmd_expSetArgs_example)/sizeof(char **),
    cmd_expSetArgs_args,sizeof(cmd_expSetArgs_args)/sizeof(char **),
//    CMD_EXP_SETPARAM,
    -1,cmd_desc[CMD_EXP_SETPARAM].name,
    cmd_expSetParam_related,sizeof(cmd_expSetParam_related)/sizeof(char **),
    "commands",cmd_expSetParam_brief,
    cmd_expSetParam_detailed,sizeof(cmd_expSetParam_detailed)/sizeof(char **),
    NULL,0,
    cmd_expSetParam_example,sizeof(cmd_expSetParam_example)/sizeof(char **),
    cmd_expSetParam_args,sizeof(cmd_expSetParam_args)/sizeof(char **),
//    CMD_EXP_STATUS,
    -1,cmd_desc[CMD_EXP_STATUS].name,
    cmd_expStatus_related,sizeof(cmd_expStatus_related)/sizeof(char **),
    "commands",cmd_expStatus_brief,
    cmd_expStatus_detailed,sizeof(cmd_expStatus_detailed)/sizeof(char **),
    NULL,0,
    cmd_expStatus_example,sizeof(cmd_expStatus_example)/sizeof(char **),
    cmd_expStatus_args,sizeof(cmd_expStatus_args)/sizeof(char **),

//  View commands

//    CMD_EXP_VIEW,
    -1,cmd_desc[CMD_EXP_VIEW].name,
    cmd_expView_related,sizeof(cmd_expView_related)/sizeof(char **),
    "commands",cmd_expView_brief,
    cmd_expView_detailed,sizeof(cmd_expView_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    cmd_expView_args,sizeof(cmd_expView_args)/sizeof(char **),
//    CMD_C_VIEW_CREATE,
    -1,cmd_desc[CMD_C_VIEW_CREATE].name,
    cmd_cViewCreate_related,sizeof(cmd_cViewCreate_related)/sizeof(char **),
    "commands",cmd_cViewCreate_brief,
    cmd_cViewCreate_detailed,sizeof(cmd_cViewCreate_detailed)/sizeof(char **),
    NULL,0, // unused extra detailed
    NULL,0, // example
    cmd_cViewCreate_args,sizeof(cmd_cViewCreate_args)/sizeof(char **),
//    CMD_C_VIEW_DELETE,
    -1,cmd_desc[CMD_C_VIEW_DELETE].name,
    cmd_cViewDelete_related,sizeof(cmd_cViewDelete_related)/sizeof(char **),
    "commands",cmd_cViewDelete_brief,
    cmd_cViewDelete_detailed,sizeof(cmd_cViewDelete_detailed)/sizeof(char **),
    NULL,0, // unused extra detailed
    NULL,0, // example
    cmd_cViewDelete_args,sizeof(cmd_cViewDelete_args)/sizeof(char **),
//    CMD_C_VIEW_INFO,
    -1,cmd_desc[CMD_C_VIEW_INFO].name,
    cmd_cViewInfo_related,sizeof(cmd_cViewInfo_related)/sizeof(char **),
    "commands",cmd_cViewInfo_brief,
    cmd_cViewInfo_detailed,sizeof(cmd_cViewInfo_detailed)/sizeof(char **),
    NULL,0, // unused extra detailed
    NULL,0, // example
    cmd_cViewInfo_args,sizeof(cmd_cViewInfo_args)/sizeof(char **),
//    CMD_C_VIEW,
    -1,cmd_desc[CMD_C_VIEW].name,
    cmd_cView_related,sizeof(cmd_cView_related)/sizeof(char **),
    "commands",cmd_cView_brief,
    cmd_cView_detailed,sizeof(cmd_cView_detailed)/sizeof(char **),
    NULL,0, // unused extra detailed
    NULL,0, // example
    cmd_cView_args,sizeof(cmd_cView_args)/sizeof(char **),


//    CMD_LIST_GENERIC,
    -1,cmd_desc[CMD_LIST_GENERIC].name,
    cmd_list_related,sizeof(cmd_list_related)/sizeof(char **),
    "commands",cmd_list_brief,
    cmd_list_detailed,sizeof(cmd_list_detailed)/sizeof(char **),
    NULL,0, // unused extra detailed
    NULL,0, // example
    cmd_list_args,sizeof(cmd_list_args)/sizeof(char **),
//    Depredated CMD_LIST_BREAKS,
    -1,"listBreaks",
    cmd_listBreaks_related,sizeof(cmd_listBreaks_related)/sizeof(char **),
    "sub_commands",cmd_listBreaks_brief,
    cmd_listBreaks_detailed,sizeof(cmd_listBreaks_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listBreaks_args,sizeof(cmd_listBreaks_args)/sizeof(char **),
//    Depredated CMD_LIST_EXP,
    -1,"listExp",
    cmd_listExp_related,sizeof(cmd_listExp_related)/sizeof(char **),
    "sub_commands",cmd_listExp_brief,
    cmd_listExp_detailed,sizeof(cmd_listExp_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listExp_args,sizeof(cmd_listExp_args)/sizeof(char **),
//    Depredated CMD_LIST_HOSTS,
    -1,"listHosts",
    cmd_listHosts_related,sizeof(cmd_listHosts_related)/sizeof(char **),
    "sub_commands",cmd_listHosts_brief,
    cmd_listHosts_detailed,sizeof(cmd_listHosts_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listHosts_args,sizeof(cmd_listHosts_args)/sizeof(char **),
//    Depredated CMD_LIST_METRICS,
    -1,"listMetrics",
    cmd_listMetrics_related,sizeof(cmd_listMetrics_related)/sizeof(char **),
    "sub_commands",cmd_listMetrics_brief,
    cmd_listMetrics_detailed,sizeof(cmd_listMetrics_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listMetrics_args,sizeof(cmd_listMetrics_args)/sizeof(char **),
//    Depredated CMD_LIST_OBJ,
    -1,"listObj",
    cmd_listObj_related,sizeof(cmd_listObj_related)/sizeof(char **),
    "sub_commands",cmd_listObj_brief,
    cmd_listObj_detailed,sizeof(cmd_listObj_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listObj_args,sizeof(cmd_listObj_args)/sizeof(char **),
//    Depredated CMD_LIST_PARAMS,
    -1,"listParams",
    cmd_listParams_related,sizeof(cmd_listParams_related)/sizeof(char **),
    "sub_commands",cmd_listParams_brief,
    cmd_listParams_detailed,sizeof(cmd_listParams_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listParams_args,sizeof(cmd_listParams_args)/sizeof(char **),
    -1,"listParamsVal",
    cmd_listParamsVal_related,sizeof(cmd_listParamsVal_related)/sizeof(char **),
    "sub_commands",cmd_listParamsVal_brief,
    cmd_listParamsVal_detailed,sizeof(cmd_listParamsVal_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listParamsVal_args,sizeof(cmd_listParamsVal_args)/sizeof(char **),
//    Depredated CMD_LIST_PIDS,
    -1,"listPids",
    cmd_listPids_related,sizeof(cmd_listPids_related)/sizeof(char **),
    "sub_commands",cmd_listPids_brief,
    cmd_listPids_detailed,sizeof(cmd_listPids_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listPids_args,sizeof(cmd_listPids_args)/sizeof(char **),
//    Depredated CMD_LIST_RANKS,
    -1,"listRanks",
    cmd_listRanks_related,sizeof(cmd_listRanks_related)/sizeof(char **),
    "sub_commands",cmd_listRanks_brief,
    cmd_listRanks_detailed,sizeof(cmd_listRanks_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listRanks_args,sizeof(cmd_listRanks_args)/sizeof(char **),
//    Depredated CMD_LIST_SRC,
    -1,"listSrc",
    cmd_listSrc_related,sizeof(cmd_listSrc_related)/sizeof(char **),
    "sub_commands",cmd_listSrc_brief,
    cmd_listSrc_detailed,sizeof(cmd_listSrc_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listSrc_args,sizeof(cmd_listSrc_args)/sizeof(char **),
//    Depredated CMD_LIST_STATUS,
    -1,"listStatus",
    cmd_listStatus_related,sizeof(cmd_listStatus_related)/sizeof(char **),
    "sub_commands",cmd_listStatus_brief,
    cmd_listStatus_detailed,sizeof(cmd_listStatus_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listStatus_args,sizeof(cmd_listStatus_args)/sizeof(char **),
//    Depredated CMD_LIST_THREADS,
    -1,"listThreads",
    cmd_listThreads_related,sizeof(cmd_listThreads_related)/sizeof(char **),
    "sub_commands",cmd_listThreads_brief,
    cmd_listThreads_detailed,sizeof(cmd_listThreads_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listThreads_args,sizeof(cmd_listThreads_args)/sizeof(char **),
//    Depredated CMD_LIST_TYPES,
    -1,"listTypes",
    cmd_listTypes_related,sizeof(cmd_listTypes_related)/sizeof(char **),
    "sub_commands",cmd_listTypes_brief,
    cmd_listTypes_detailed,sizeof(cmd_listTypes_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listTypes_args,sizeof(cmd_listTypes_args)/sizeof(char **),
//    Depredated CMD_LIST_VIEWS,
    -1,"listViews",
    cmd_listViews_related,sizeof(cmd_listViews_related)/sizeof(char **),
    "sub_commands",cmd_listViews_brief,
    cmd_listViews_detailed,sizeof(cmd_listViews_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_listViews_args,sizeof(cmd_listViews_args)/sizeof(char **),
//    CMD_CLEAR_BREAK,
    -1,cmd_desc[CMD_CLEAR_BREAK].name,
    cmd_clearBreak_related,sizeof(cmd_clearBreak_related)/sizeof(char **),
    "commands",cmd_clearBreak_brief,
    cmd_clearBreak_detailed,sizeof(cmd_clearBreak_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_clearBreak_args,sizeof(cmd_clearBreak_args)/sizeof(char **),
//    CMD_EXIT,
    -1,cmd_desc[CMD_EXIT].name,
    cmd_exit_related,sizeof(cmd_exit_related)/sizeof(char **),
    "commands",cmd_exit_brief,
    cmd_exit_detailed,sizeof(cmd_exit_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_exit_args,sizeof(cmd_exit_args)/sizeof(char **),
//    CMD_HELP,
    -1,cmd_desc[CMD_HELP].name,
    cmd_help_related,sizeof(cmd_help_related)/sizeof(char **),
    "commands",cmd_help_brief,
    cmd_help_detailed,sizeof(cmd_help_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_help_args,sizeof(cmd_help_args)/sizeof(char **),
//    CMD_HISTORY,
    -1,cmd_desc[CMD_HISTORY].name,
    cmd_history_related,sizeof(cmd_history_related)/sizeof(char **),
    "commands",cmd_history_brief,
    cmd_history_detailed,sizeof(cmd_history_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_history_args,sizeof(cmd_history_args)/sizeof(char **),
//    CMD_LOG,
    -1,cmd_desc[CMD_LOG].name,
    cmd_log_related,sizeof(cmd_log_related)/sizeof(char **),
    "commands",cmd_log_brief,
    cmd_log_detailed,sizeof(cmd_log_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_log_args,sizeof(cmd_log_args)/sizeof(char **),
//    CMD_OPEN_GUI,
    -1,cmd_desc[CMD_OPEN_GUI].name,
    cmd_openGui_related,sizeof(cmd_openGui_related)/sizeof(char **),
    "commands",cmd_openGui_brief,
    cmd_openGui_detailed,sizeof(cmd_openGui_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_openGui_args,sizeof(cmd_openGui_args)/sizeof(char **),
//    CMD_PLAYBACK,
    -1,cmd_desc[CMD_PLAYBACK].name,
    cmd_playBack_related,sizeof(cmd_playBack_related)/sizeof(char **),
    "commands",cmd_playBack_brief,
    cmd_playBack_detailed,sizeof(cmd_playBack_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_playBack_args,sizeof(cmd_playBack_args)/sizeof(char **),
//    CMD_RECORD,
    -1,cmd_desc[CMD_RECORD].name,
    cmd_record_related,sizeof(cmd_record_related)/sizeof(char **),
    "commands",cmd_record_brief,
    cmd_record_detailed,sizeof(cmd_record_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    cmd_record_args,sizeof(cmd_record_args)/sizeof(char **),
//    CMD_SETBREAK,
    -1,cmd_desc[CMD_SETBREAK].name,
    cmd_setBreak_related,sizeof(cmd_setBreak_related)/sizeof(char **),
    "commands",cmd_setBreak_brief,
    cmd_setBreak_detailed,sizeof(cmd_setBreak_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    cmd_setBreak_args,sizeof(cmd_setBreak_args)/sizeof(char **),
//    CMD_WAIT,
    -1,cmd_desc[CMD_WAIT].name,
    cmd_Wait_related,sizeof(cmd_Wait_related)/sizeof(char **),
    "commands",cmd_Wait_brief,
    cmd_Wait_detailed,sizeof(cmd_Wait_detailed)/sizeof(char **),
    NULL,0,     //  Detailed description list of strings
    cmd_Wait_example,sizeof(cmd_Wait_example)/sizeof(char **),
    cmd_Wait_args,sizeof(cmd_Wait_args)/sizeof(char **),

//    CMD_MAX
    -1,     	//  Index for error messages
    NULL,   	//  Keyword
    NULL,0, 	//  Related keyword list
    NULL,   	//  Topic
    NULL,	//  Brief string
    NULL,0, 	//  Normal description list of strings
    NULL,0, 	//  Detailed description list of strings
    NULL,0, 	//  Example list
    NULL,0, 	//  Argument list

};








