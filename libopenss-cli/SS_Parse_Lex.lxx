/* //////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
// Copyright (c) 2006-2012 Krell Institute  All Rights Reserved.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
// details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////// */


%{
#include <stdio.h>
#include <stdlib.h>
//
// Note: This dummy comment is used to eliminate a false-positive found by
// the SGI source scanner when comparing against AT&T Unix SVR4.1ES source.
//

#include <ctype.h>
#include <string.h>
#include "SS_Parse_Yacc.hxx"
extern int yylex();
extern char * ip_number(char *,int);
#define ECHO
%}

%%

\"[^"\n]*["\n] {
    	    yylval.string = strdup(yytext+1);
	    yylval.string[yyleng-2] = 0;
	    return NAME;
	    }

\"*\" {
    	    yylval.string = strdup(yytext+1);
	    yylval.string[yyleng-2] = 0;
	    return NAME;
	    }

\'[^'\n][\ \!\"\#\$\%\&\(\)\*\+\-\.\,\/0-z\{\|\}\~]*['\n] {
    	    yylval.string = strdup(yytext+1);
	    yylval.string[yyleng-2] = 0;
	    return NAME;
	    }

\'[\ \!\"\#\$\%\&\(\)\*\+\-\.\,\/0-z\{\|\}\~]*\' {
    	    yylval.string = strdup(yytext+1);
	    yylval.string[yyleng-2] = 0;
	    return NAME;
	    }

","     { return COMMA; }
";" 	{ return SEMICOLON; }
":" 	{ return COLON; }
"::" 	{ return DOUBLE_COLON; }
"=" 	{ return EQUAL; }
"("	{ return LPAREN; }
")"	{ return RPAREN; }

"expattach" 	{ return ATTACH_HEAD; }
"expAttach" 	{ return ATTACH_HEAD; }
"expclone"  	{ return CLONE_HEAD; }
"expClone"  	{ return CLONE_HEAD; }
"expclose"  	{ return CLOSE_HEAD; }
"expClose"  	{ return CLOSE_HEAD; }
"expcompare" 	{ return COMPARE_HEAD; }
"expCompare" 	{ return COMPARE_HEAD; }
"expcont"	{ return CONT_HEAD; }
"expCont"	{ return CONT_HEAD; }
"expcreate" 	{ return CREATE_HEAD; }
"expCreate" 	{ return CREATE_HEAD; }
"expdata" 	{ return DATA_HEAD; }
"expData" 	{ return DATA_HEAD; }
"expdetach" 	{ return DETACH_HEAD; }
"expDetach" 	{ return DETACH_HEAD; }
"expdisable" 	{ return DISABLE_HEAD; }
"expDisable" 	{ return DISABLE_HEAD; }
"expenable" 	{ return ENABLE_HEAD; }
"expEnable" 	{ return ENABLE_HEAD; }
"expfocus"  	{ return FOCUS_HEAD; }
"expFocus"  	{ return FOCUS_HEAD; }
"expgo"    	{ return GO_HEAD; }
"expGo"    	{ return GO_HEAD; }

"run"	    	{ return GO_HEAD; }

"exppause"  	{ return PAUSE_HEAD; }
"expPause"  	{ return PAUSE_HEAD; }
"exprestore"	{ return RESTORE_HEAD; }
"expRestore"	{ return RESTORE_HEAD; }
"expsave"	{ return SAVE_HEAD; }
"expSave"	{ return SAVE_HEAD; }
"expsetargs"	{ return SETARGS_HEAD; }
"expSetArgs"	{ return SETARGS_HEAD; }
"expsetparam"	{ return SETPARAM_HEAD; }
"expSetParam"	{ return SETPARAM_HEAD; }
"expstatus"   	{ return STATUS_HEAD; }
"expStatus"   	{ return STATUS_HEAD; }
"expview"   	{ return VIEW_HEAD_OLD; }
"expView"   	{ return VIEW_HEAD_OLD; }

"view"   	{ return VIEW_HEAD; }

"cviewcluster"	{ return CVIEWCLUSTER_HEAD; }
"cViewCluster"	{ return CVIEWCLUSTER_HEAD; }
"cViewCreate"	{ return CVIEWCREATE_HEAD; }
"cviewcreate"	{ return CVIEWCREATE_HEAD; }
"cViewDelete"	{ return CVIEWDELETE_HEAD; }
"cviewdelete"	{ return CVIEWDELETE_HEAD; }
"cViewInfo"   	{ return CVIEWINFO_HEAD; }
"cviewinfo"   	{ return CVIEWINFO_HEAD; }
"cView"   	{ return CVIEW_HEAD; }
"cview"   	{ return CVIEW_HEAD; }

"list"  	{ return LIST_GENERIC_HEAD; }

"clearbreak"	{ return GEN_CLEAR_BREAK_HEAD; }
"clearBreak"	{ return GEN_CLEAR_BREAK_HEAD; }
"echo"	    	{ return GEN_ECHO_HEAD; }
"exit"	    	{ return GEN_EXIT_HEAD; }
"opengui"   	{ return GEN_OPEN_GUI_HEAD; }
"openGui"   	{ return GEN_OPEN_GUI_HEAD; }
"help"	    	{ return GEN_HELP_HEAD; }
"history"   	{ return GEN_HISTORY_HEAD; }
"info"	    	{ return GEN_INFO_HEAD; }
"log"	    	{ return GEN_LOG_HEAD; }
"playback"  	{ return GEN_PLAYBACK_HEAD; }
"playBack"  	{ return GEN_PLAYBACK_HEAD; }
"record"    	{ return GEN_RECORD_HEAD; }
"setbreak"  	{ return GEN_SETBREAK_HEAD; }
"setBreak"  	{ return GEN_SETBREAK_HEAD; }
"wait"  	{ return GEN_WAIT_HEAD; }

"quit"  	{ return JUST_QUIT_HEAD; }

"-r"	{ return RANK_ID; }
"-h"	{ return HOST_ID; }
"-p"	{ return PROCESS_ID; }
"-t"	{ return THREAD_ID; }
"-f"	{ return FILE_ID; }
"-F"	{ return FORMAT_ID; }
"-a"	{ return ARGS_ID; }
"-x"	{ return EXP_ID; }
"-l"	{ return LINE_ID;}
"-c"	{ return VIEW_ID;}
"-m"	{ return METRIC_ID;}
"-v"	{ return MODIFIER_ID;}
"-I"	{ return INTERVAL_ID;}
"-i"	{ return INSTRUMENTOR_ID;}

[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+ {yylval.string = ip_number(yytext,8); return(NAME);}
0x[0-9a-f]+	{yylval.ival = atoll(yytext); return(HEXNUMBER);}
[0-9]+   { yylval.ival = atoll(yytext); return NUMBER; }
-[0-9]+   { yylval.ival = atoll(yytext); return NUMBER; }
[0-9]+[.][0-9]+   { yylval.dval = atof(yytext); return DOUBLE; }
-[0-9]+[.][0-9]+   { yylval.dval = atof(yytext); return DOUBLE; }
[a-zA-Z./_\*\%][a-zA-Z0-9_./\-\+\*\%]*  { yylval.string = strdup(yytext); return NAME; }
[<][a-zA-Z./\*\%][a-zA-Z0-9_./\-\+\*\%]*[>] { yylval.string = strdup(yytext); return NAME; }

[\n]	{ return END_LINE; }
">" 	{ return REDIRECT; } 
">>" 	{ return APPEND; }

%%
#ifndef yywrap
int yywrap() { return 1; }
#endif
   
