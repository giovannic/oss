/*/*******************************************************************************
** Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
** Copyright (c) 2006-2012 Krell Institute. All Rights Reserved.
**
** This library is free software; you can redistribute it and/or modify it under
** the terms of the GNU Lesser General Public License as published by the Free
** Software Foundation; either version 2.1 of the License, or (at your option)
** any later version.
**
** This library is distributed in the hope that it will be useful, but WITHOUT
** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
** details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation, Inc.,
** 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*******************************************************************************/

/** @file
 *
 * Message database.
 *
 */


/*********************************************/
// GRAMMAR Related topics
/*********************************************/

const char *gram_expId_related[] = {
    "listExp",
    "expCreate",
    "expFocus",
    "expRestore"
};

const char *gram_viewFormat_related[] = {
    "<format_spec>"
};

const char *gram_expMetric_related[] = {
    "<metric_expression>"
};

const char *gram_metric_name_related[] = {
//    ""
};

const char *gram_expParamValue_related[] = {
//    ""
};

const char *gram_expParam_related[] = {
//    ""
};

const char *gram_param_name_related[] = {
//    ""
};

const char *gram_expType_related[] = {
    "expList"
};

const char *gram_statusType_related[] = {
    "expStatus"
};

const char *gram_list_related[] = {
    "<target>",
    "<range>"
};

const char *gram_range_related[] = {
    "<list>"
};

const char *gram_target_related[] = {
    "<list>",
    "<range>",
    "<file_name>",
    "<host_name>",
    "<thread_name>",
    "<pid_name>",
    "<cluster_name>",
    ""
};

const char *gram_hwc_related[] = {
    "<hwc_events>"
};

/*********************************************/
// GRAMMAR ARGUMENTS
/*********************************************/
const char *gram_address_description_arg = {
    "<address_description> ::= <int> || <string>"
};
const char *gram_breakId_arg = {
    "<breakId> ::= <int>"
};
const char *gram_expId_arg = {
    "<expId> ::= <int>"
};
const char *gram_expId_spec_arg = {
    "<expId_spec> ::= -x <expId>"
};
const char *gram_expMetric_list_spec_arg = {
    "<expMetric_list_spec> ::= -m <expMetric> [ , <expMetric> ]*"
};
const char *gram_expMetric_arg = {
    "<expMetric> ::= [<expType>::]<metric_name>"
};
const char *gram_metric_name_arg = {
    "<metric_name> ::= <string>"
};
const char *gram_view_format_arg = {
    "<format_spec> ::= <string> [ = [ <int> || <float> || <string> || \"<string>\" \\ '<string>' ] ] [ , <format_spec> ]* "
};
const char *gram_metric_expression_arg = {
    "<metric_expression> ::= <string> ( [ <constant> || <metric_expression> ] [ , [ <constant> || <metric_expression> ] ]* ) "
};
const char *gram_expParamValue_arg = {
    "<expParamValue> ::= [ <int> || <float> || <string> || \"<string>\"]"
};
const char *gram_expParam_arg = {
    "<expParam> ::= [<expType>::]<param_name>"
};
const char *gram_param_name_arg = {
    "<param_name> ::=  <string> "
};
const char *gram_expType_list_arg = {
    "<expType_list> ::= <expType> [ , <expType> ]*"
};
const char *gram_expType_arg = {
    "<expType> ::= [ <predefined_exp> || <user_defined_exp> ]"
};
const char *gram_listType_arg = {
    "<listType> ::= <string>"
};
const char *gram_user_defined_exp_arg = {
    "<user_defined_exp> ::= <file_name>"
};
const char *gram_predefined_exp_arg = {
    "<predefined_exp> ::= { pcsamp || usertime || mpi || fpe || hwc || io || iot || mpit || mpiotf || <string> }"
};

//  RANK
const char *gram_rank_list_spec_arg = {
    "<rank_list_spec> ::= -r <rank_list>"
};
const char *gram_rank_list_arg = {
    "<rank_list> ::= <rank_range> [ , <rank_range> ]*"
};
const char *gram_rank_range_arg = {
    "<rank_range> ::= <rank_name> [ : <rank_name> ]"
};
const char *gram_rankname_arg = {
    "<rank_name> ::= <int>"
};

//  THREAD
const char *gram_threadname_arg = {
    "<thread_name> ::= <int>"
};
const char *gram_thread_range_arg = {
    "<thread_range> ::= <thread_name> [ : <thread_name> ]"
};
const char *gram_thread_list_arg = {
    "<thread_list> ::= <thread_range> [ , <thread_range> ]*"
};
const char *gram_thread_list_spec_arg = {
    "<thread_list_spec> ::= -t <thread_list>"
};

//  PID
const char *gram_pidname_arg = {
    "<pid_name> ::= <int>"
};
const char *gram_pid_range_arg = {
    "<pid_range> ::= <pid_name> [ : <pid_name> ]"
};
const char *gram_pid_list_arg = {
    "<pid_list> ::= <pid_range> [ , <pid_range> ]*"
};
const char *gram_pid_list_spec_arg = {
    "<pid_list_spec> ::= -p <pid_list>"
};

//  FILE
const char *gram_filename_arg = {
    "<file_name> ::= <string> || \"<string>\""
};
const char *gram_file_list_arg = {
    "<file_list> ::= <file_name> [ , <file_name> ]*"
};
const char *gram_file_list_spec_arg = {
    "<file_list_spec> ::= -f <file_list>"
};

//  HOST
const char *gram_IP_Address_arg = {
    "<IP_Address> ::= <int>.<int>.<int>.<int>"
};
const char *gram_hostname_arg = {
    "<host_name> ::= <string> || <IP_Address>"
};
const char *gram_host_list_arg = {
    "<host_list> ::= <host_name> [ , <host_name> ]*"
};
const char *gram_host_list_spec_arg = {
    "<host_list_spec> ::= -h <host_list>"
};

//  CLUSTER
const char *gram_clustername_arg = {
    "<cluster_name> ::= <string> || \"<string>\""
};
const char *gram_cluster_list_arg = {
    "<cluster_list> ::= <cluster_name> [ , <cluster_name> ]*"
};
const char *gram_cluster_list_spec_arg = {
    "<cluster_list_spec> ::= -c <cluster_list>"
};

//  LIST (generic)
const char *gram_list_arg = {
    "<list> ::= <list element> [ , <list element> ]*"
};

//  RANGE (generic)
const char *gram_range_arg = {
    "<range> ::= <range element> [ : <range element> ]"
};

//  TARGET
const char *gram_target_arg = {
    "<target> ::= \n\t"
    "[ -c <cluster_name> [ , <cluster_name> ]*> ]\n\t"
    "[ -h <host_name>   [ , <host_name> ]* ]\n\t"
    "[ -f <file_name>    [ , <file_name> ]* ]\n\t"
    "[ -p <pid_name>    [ , <pid_name> ]* ]\n\t"
    "[ -t <thread_name> [ , <thread_name> ]* ]\n\t"
    "[ -r <rank_name>   [ , <rank_name>]* ]"
};
const char *gram_target_list_arg = {
    "<target_list> ::= <target> [ ; <target> ]*"
};

const char *gram_file_spec_arg = {
    "<file_spec> ::= -f <file_name>"
};
const char *gram_host_spec_arg = {
    "<host_spec> ::= -h <host_name>"
};
const char *gram_host_file_arg = {
    "<host_file> ::= [ <host_spec> ] -f <file_name>"
};

//  LINENUMBER
const char *gram_lineno_range_arg = {
    "<lineno_range> ::= <lineno> [ : <lineno> ]"
};
const char *gram_linenumber_range_spec_arg = {
    "<linenumber_range_spec> ::= -l <lineno_range>"
};
const char *gram_linenumber_list_spec_arg = {
    "<linenumber_list_spec> ::= -l <lineno_range> [, <lineno_range> ]*"
};

const char *gram_statusType_arg = {
    "<statusType> ::= { NonExistent || Paused || Running || Terminated || Error }"
};
const char *gram_viewType_arg = {
    "<viewType> ::= <string>"
};

const char *gram_pcsamp_arg = {
    ""
};
const char *gram_usertime_arg = {
    ""
};
const char *gram_mpi_arg = {
    ""
};
const char *gram_fpe_arg = {
    ""
};
const char *gram_hwc_arg = {
    ""
};
const char *gram_io_arg = {
    ""
};

const char *gram_iot_arg = {
    ""
};

const char *gram_mpit_arg = {
    ""
};

const char *gram_mpiotf_arg = {
    ""
};

//char *gram_xxx_arg = {
//    ""
//};

/*********************************************/
// BRIEF GRAMMAR MESSAGES
/*********************************************/
const char *gram_address_description_brief = {
    "An absolute or relative address."
};
const char *gram_breakId_brief = {
    "A breakpoint identifier."
};
const char *gram_expId_brief = {
    "an experiment identifier."
};
const char *gram_expId_spec_brief = {
    "an experiment identifier."
};
const char *gram_expMetric_brief = {
    "A result that an experiment can return. \nIt could be a full report, a value or a set of values."
};
const char *gram_expMetric_list_spec_brief = {
    "A result that an experiment can return. \nIt could be a full report, a value or a set of values."
};
const char *gram_metric_name_brief = {
    "Symbolic name representing desired metric."
};
const char *gram_view_format_brief = {
    "User defined formatting options for the report generated by an 'expView' command."
};
const char *gram_metric_expression_brief = {
    "A user defined expression that uses metrics to compute a special value for display in a report."
};
const char *gram_param_name_brief = {
    "Symbolic name representing parameter desired."
};
const char *gram_expParam_brief = {
    "The experiment parameters correspond to items in the experiment \nclass that can be changed by the user or a tool component."
};
const char *gram_expParamValue_brief = {
    "Value to assinge to parameter."
};
const char *gram_predefined_exp_brief = {
    "Built in experiments type."
};
const char *gram_user_defined_exp_brief = {
    "User defined experiment type."
};
const char *gram_listType_brief = {
    "The modifier for the list command that determins the \n"
    "type of listing."
};
const char *gram_expType_brief = {
    "The experiment type designator. "
};
const char *gram_expType_list_brief = {
    "List of experiment types."
};
const char *gram_rankname_brief = {
    "A symbolic or numeric representation of a rank id."
};
const char *gram_rank_range_brief = {
    "A single rankname or colon seperated pair of ranknames\n"
    "representing a numeric range."
};
const char *gram_rank_list_brief = {
    "A single rankname or a comma delineated list of ranknames."
};
const char *gram_rank_list_spec_brief = {
    "-r followed by a rank_list."
};
const char *gram_threadname_brief = {
    "A symbolic or numeric representation of a thread id."
};
const char *gram_thread_range_brief = {
    "A single threadname or colon seperated pair of threadnames\n"
    "representing a numeric range."
};
const char *gram_thread_list_brief = {
    "A single threadname or a comma delineated list of threadnames."
};
const char *gram_thread_list_spec_brief = {
    "-t followed by a thread_list."
};
const char *gram_pidname_brief = {
    "A symbolic or numeric representation of a process id."
};
const char *gram_pid_range_brief = {
    "A single pidname or colon seperated pair of pidnames\n"
    "representing a numeric range."
};
const char *gram_pid_list_brief = {
    "A single pidname or a comma delineated list of pidnames."
};
const char *gram_pid_list_spec_brief = {
    "-p followed by a pid_list."
};
const char *gram_filename_brief = {
    "A String representation of a file name."
};
const char *gram_file_list_brief = {
    "A single file name or a comma delineated list of file names."
};
const char *gram_file_list_spec_brief = {
    "-f followed by a file_list."
};
const char *gram_IP_Address_brief = {
    "A set of 4 dot delineated octal digits representing an IP address."
};
const char *gram_hostname_brief = {
    "A String or IP_Address representation of a host."
};
const char *gram_host_list_brief = {
    "A single hostname or a comma delineated list of hostnames."
};
const char *gram_host_list_spec_brief = {
    "-h followed by a host_list."
};
const char *gram_clustername_brief = {
    "A String representation of a cluster name."
};
const char *gram_cluster_list_brief = {
    "A single cluster name or a comma delineated list of cluster names."
};
const char *gram_cluster_list_spec_brief = {
    "-c followed by a cluster_list."
};
const char *gram_list_brief = {
    "Comma delimited list of elements."
};
const char *gram_range_brief = {
    "Semicolon delimited range of values."
};
const char *gram_target_brief = {
    "Represents the host file and machine along with \n"
    "a specific process, thread, or rank identifier."
};
const char *gram_target_list_brief = {
    "A single target or a semicolon delineated list of targets."
};
const char *gram_file_spec_brief = {
    "-f followed by a single filename."
};
const char *gram_host_spec_brief = {
    "-f followed by a single hostname."
};
const char *gram_host_file_brief = {
    "."
};
const char *gram_lineno_range_brief = {
    "A single line number or a comma delineated pair of \n"
    "line numbers representing contiguous range."
};
const char *gram_linenumber_range_spec_brief = {
    "-l followed by a linenumber_range."
};
const char *gram_linenumber_list_spec_brief = {
    "-l followed by a linenumber_list."
};
const char *gram_statusType_brief = {
    "Current status of a given experiment as a predefined string."
};
const char *gram_viewType_brief = {
    "The format of the output display for this experiment."
};

const char *gram_pcsamp_brief = {
    "PC (Program Counter) sampling."
};
const char *gram_usertime_brief = {
    "Usertime call stack profiling."
};
const char *gram_mpi_brief = {
    "MPI call tracing."
};
const char *gram_fpe_brief = {
    "Floating point profiling ."
};
const char *gram_hwc_brief = {
    "Hardware counter experiment."
};
const char *gram_io_brief = {
    "I/O (Input/Output) trace experiment."
};
const char *gram_iot_brief = {
    "I/O (Input/Output) extra info trace experiment."
};
const char *gram_mpit_brief = {
    "MPI call tracing with extra info."
};
const char *gram_mpiotf_brief = {
    "MPI call tracing through vampirtrace producing OTF (Open Trace Format) files."
};


//char *gram__brief = {
//    "."
//};

/*********************************************/
// DETAILED GRAMMAR MESSAGES
/*********************************************/
const char *address_description[] = {
    gram_address_description_arg,
    " ",
    gram_address_description_brief,
    " ",
    "Addresses can either be numbers or symbolic.",
    "If symbolic, sufficient debugging information needs to be",
    "available to resolve to a number",
    " "
};
const char *gram_breakId_detailed[] = {
    gram_breakId_arg,
    " ",
    gram_breakId_brief,
    " ",
    "The break identifier is SpeedShop generated",
    " "
};
const char *gram_expId_detailed[] = {
    gram_expId_arg,
    " ",
    gram_expId_brief,
    " ",
    "The experiment identifier is SpeedShop generated",
    " "
};
const char *gram_expId_spec_detailed[] = {
    gram_expId_spec_arg,
    " ",
    gram_expId_brief,
    " ",
    "The experiment identifier is SpeedShop generated",
    " "
};
const char *gram_metric_name_detailed[] = {
    gram_metric_name_arg,
    " ",
    gram_metric_name_brief,
    " ",
    " "
};
const char *gram_view_format_detailed[] = {
    gram_view_format_arg,
    " ",
    gram_view_format_brief,
    " ",
    "User defined format control that be added to an <expFormat_spec>.",
    "These options override the global preferences (see 'help preferences')",
    "for items with the 'view format preference variable'.",
    "Supported options are as follows:",
    "\tCSV",
    "\tviewFieldSize",
    "\tviewMaxFieldSize",
    "\tviewFieldSizeIsDynamic",
    "\tviewFullPath",
    "\tviewEntireString",
    "\tviewBlankInPlaceOfZero",
    "\tviewLeftJustify",
    "\tviewEoc",
    "\tviewEol",
    "\tviewEov",
    "\n",
    "Example:",
    "\n",
    "\texpview hwc -m count -F viewEoc=';-)',viewFieldSizeIsDynamic -v summary",
    "\n",
    " "
};
const char *gram_metric_expression_detailed[] = {
    gram_metric_expression_arg,
    " ",
    gram_metric_expression_brief,
    " ",
    "User defined expression can be added to an <expMetric_list>.",
    "A functional notation is used to build the desired expression",
    "and the following, simple, arithmetic operations are available:",
    "\tfunction\t# arguments\treturns",
    "\t--------\t-----------\t-------",
    "\tUint()\t\t1\tconvert the argument to unsigned integer",
    "\tInt()\t\t1\tconvert the argument to signed integer",
    "\tFloat()\t\t1\tconvert the argument to double",
    "\tUminus()\t1\tunary minus of the argument",
    "\tAbs()\t\t1\tAbsolute value of the argument",
    "\tAdd()\t\t2\tsummation of the arguments",
    "\tSub()\t\t2\tdifference of the arguments",
    "\tMult()\t\t2\tproduct of the arguments",
    "\tDiv()\t\t2\tfirst argument divided by second",
    "\tMod()\t\t2\tremainder of divide operation",
    "\tMin()\t\t2\tminimum of the arguments",
    "\tMax()\t\t2\tmaximum of the arguments",
    "\tA_Add()\t\t1\tsum of all the data samples specified for the view",
    "\tA_Mult()\t1\tproduct of all the data samples specified for the view",
    "\tA_Min()\t\t1\tminimim of all the data samples specified for the view",
    "\tA_Max()\t\t1\tmaximum of all the data samples specified for the view",
    "\tSqrt()\t\t1\tsquare root of the argument",
    "\tPercent()\t2\tpercent the first arguemnt is of the second",
    "\tCondexp()\t3\t\"C\" expression: \"(first argument) ? second argument : third argument\"",
    "\tHeader()\t2\tuse the first argument as a column header for the display of the second",
    "\n",
    "Note:",
    "\n",
    "Integer and floating constants are supported as arguments as are "
    "the metric keywords associated with the experiment view.",
    "\n",
    "Arguments to these functions can be <metric_expressions>, "
    "with the exception of the first argument of \'Header\'.",
    "\n",
    "The first argument of \'Header\' must be a character string that is "
    "preceeded with and followed by \'\\\"\'.",
    "\n",
    "When the \'-v summary' option is used, it is not generally possible to "
    "produce a meaningful column summary.",
    "A summary is produced for Add(), Max(), Min(), Percent(), A_Add(), A_Max and A_Min(). ",
    "\n",
    "Data conversion is done automatically according to the rules of \"C\". ",
    "If needed, the user can force data conversion with the \'Uint\', \'Int\' or \'Float\' functions.\n"
    "\n",
    "Examples:",
    "\n",
    "\texpview hwc -m count,Header(\\\"percent of counts\\\",Percent(count,A_Add(count))) -v summary",
    "\texpview mpi -v butterfly -f MPI_Alltoallv -m time,Header(\\\"average time/count\\\",Div(Mult(time,1000),counts))"
    "\n",
    " "
};
const char *gram_expMetric_detailed[] = {
    gram_expMetric_arg,
    " ",
    gram_expMetric_brief,
    " ",
    " "
};
const char *gram_expMetric_list_spec_detailed[] = {
    gram_expMetric_list_spec_arg,
    " ",
    gram_expMetric_list_spec_brief,
    " ",
    "To see all of the current available metric types, type:",
    "\t\"list -v metrics,all\"",
    "You can then get more detailed information on each of the",
    "metric types listed through the \"help\" facility."
};
const char *gram_param_name_detailed[] = {
    gram_param_name_arg,
    " ",
    gram_param_name_brief,
    " ",
    "To see all of the current available parameter types, type:,",
    "\t\"list -v params,all\"",
    "You can then get more detailed information on each of the",
    "parameter types listed through the \"help\" facility."
};
const char *gram_expParam_detailed[] = {
    gram_expParam_arg,
    " ",
    gram_expParam_brief,
    " ",
    "- If <expType> is specified, then only that collector's ",
    "  parameter is updated.",
    "- If <expType> is NOT specified, then all parameters ",
    "  matching the parameter name are updated, regardless ",
    "  of the collector name, for that experiment ",
    " "
};
const char *gram_expParamValue_detailed[] = {
    gram_expParamValue_arg,
    " ",
    gram_expParamValue_brief,
    " ",
    " "
};
const char *gram_predefined_exp_detailed[] = {
    gram_predefined_exp_arg,
    " ",
    gram_predefined_exp_brief,
    " ",
    " "
};
const char *gram_user_defined_exp_detailed[] = {
    gram_user_defined_exp_arg,
    " ",
    gram_user_defined_exp_brief,
    " ",
    " "
};
const char *gram_expType_detailed[] = {
    gram_expType_arg,
    " ",
    gram_expType_brief,
    " ",
    "Using this in the expCreate or expAttach command ",
    "fills in the default values for the experiment."
    " ",
    "To see all of the current available experiment types, type:",
    "\t\"list -v types,all\"",
    "You can then get more detailed information on each of the",
    "experiment types listed through the \"help\" facility."
    " ",
    " "
};
const char *gram_listType_detailed[] = {
    gram_listType_arg,
    " ",
    gram_listType_brief,
    " ",
    "breaks   -> List the breakpoints that have been defined.",
    "expId    -> List the experiments that have been defined.",
    "expTypes -> List available performance measurement utilities.",
    "hosts    -> List the hosts that define the specified cluster.",
    "metrics  -> List the measurements that an experiment is capable ",
    "            of making.",
    "obj      -> List the object files that are known.",
    "params   -> Report the current values assigned to all the parameters",
    "pids     -> List the process Id's that are known.",
    "ranks    -> List the mpi ranks that are known.",
    "src      -> List the source filenames of the modules that are ",
    "            part of the specified experiment.",
    "status   -> List the current status of an experiment.",
    "threads  -> List the threads that are known.",
    "views    -> List the reports that can be produced by an experiment.",
    " "
};
const char *gram_expType_list_detailed[] = {
    gram_expType_list_arg,
    " ",
    gram_expType_list_brief,
    " ",
    " "
};
const char *gram_rankname_detailed[] = {
    gram_rankname_arg,
    " ",
    gram_rankname_brief,
    " ",
    " "
};
const char *gram_rank_range_detailed[] = {
    gram_rank_range_arg,
    gram_rankname_arg,
    " ",
    gram_rank_range_brief,
    " ",
    " "
};
const char *gram_rank_list_detailed[] = {
    gram_rank_list_arg,
    gram_rank_range_arg,
    gram_rankname_arg,
    " ",
    gram_rank_list_brief,
    " ",
    " "
};
const char *gram_rank_list_spec_detailed[] = {
    gram_rank_list_spec_arg,
    gram_rank_list_arg,
    gram_rank_range_arg,
    gram_rankname_arg,
    " ",
    gram_rank_list_spec_brief,
    " ",
    " "
};
const char *gram_threadname_detailed[] = {
    gram_threadname_arg,
    " ",
    gram_threadname_brief,
    " ",
    " "
};
const char *gram_thread_range_detailed[] = {
    gram_thread_range_arg,
    gram_threadname_arg,
    " ",
    gram_thread_range_brief,
    " ",
    " "
};
const char *gram_thread_list_detailed[] = {
    gram_thread_list_arg,
    gram_thread_range_arg,
    gram_threadname_arg,
    " ",
    gram_thread_list_brief,
    " ",
    " "
};
const char *gram_thread_list_spec_detailed[] = {
    gram_thread_list_spec_arg,
    gram_thread_list_arg,
    gram_thread_range_arg,
    gram_threadname_arg,
    " ",
    gram_thread_list_spec_brief,
    " ",
    " "
};
const char *gram_pidname_detailed[] = {
    gram_pidname_arg,
    " ",
    gram_pidname_brief,
    " ",
    " "
};
const char *gram_pid_range_detailed[] = {
    gram_pid_range_arg,
    gram_pidname_arg,
    " ",
    gram_pid_range_brief,
    " ",
    " "
};
const char *gram_pid_list_detailed[] = {
    gram_pid_list_arg,
    gram_pid_range_arg,
    gram_pidname_arg,
    " ",
    gram_pid_list_brief,
    " ",
    " "
};
const char *gram_pid_list_spec_detailed[] = {
    gram_pid_list_spec_arg,
    gram_pid_list_arg,
    gram_pid_range_arg,
    gram_pidname_arg,
    " ",
    gram_pid_list_spec_brief,
    " ",
    " "
};
const char *gram_filename_detailed[] = {
    gram_filename_arg,
    " ",
    gram_filename_brief,
    " ",
    " "
};
const char *gram_file_list_detailed[] = {
    gram_file_list_arg,
    gram_filename_arg,
    " ",
    gram_file_list_brief,
    " ",
    " "
};
const char *gram_file_spec_detailed[] = {
    gram_file_spec_arg,
    gram_filename_arg,
    " ",
    gram_file_spec_brief,
    " ",
    " "
};
const char *gram_file_list_spec_detailed[] = {
    gram_file_list_spec_arg,
    gram_file_list_arg,
    gram_filename_arg,
    " ",
    gram_file_list_spec_brief,
    " ",
    " "
};
const char *gram_IP_Address_detailed[] = {
    gram_IP_Address_arg,
    " ",
    gram_IP_Address_brief,
    " ",
    " "
};
const char *gram_hostname_detailed[] = {
    gram_hostname_arg,
    gram_IP_Address_arg,
    " ",
    gram_hostname_brief,
    " ",
    " "
};
const char *gram_host_list_detailed[] = {
    gram_host_list_arg,
    gram_hostname_arg,
    gram_IP_Address_arg,
    " ",
    gram_host_list_brief,
    " ",
    " "
};
const char *gram_host_list_spec_detailed[] = {
    gram_host_list_spec_arg,
    gram_host_list_arg,
    gram_hostname_arg,
    gram_IP_Address_arg,
    " ",
    gram_host_list_spec_brief,
    " ",
    " "
};
const char *gram_clustername_detailed[] = {
    gram_clustername_arg,
    " ",
    gram_clustername_brief,
    " ",
    " "
};
const char *gram_cluster_list_detailed[] = {
    gram_cluster_list_arg,
    gram_clustername_arg,
    " ",
    gram_cluster_list_brief,
    " ",
    " "
};
const char *gram_cluster_list_spec_detailed[] = {
    gram_cluster_list_spec_arg,
    gram_cluster_list_arg,
    gram_clustername_arg,
    " ",
    gram_cluster_list_spec_brief,
    " "
};

const char *gram_list_detailed[] = {
    gram_list_arg,
    " ",
    gram_list_brief,
    " ",
    "A list element can consist of a single item such as",
    "a filename or a range tuple.",
    " ",
    "The only time a list delimiter is NOT a comma \',\'is when",
    "the list elements are <target>. In this case the delimiter ",
    "is a semicolon \';\'.",
    " "
};

const char *gram_range_detailed[] = {
    gram_range_arg,
    " ",
    gram_range_brief,
    " ",
    "A range of values can consist of a single item such as",
    "a rank id or 2 values delimited by a colon \':\' representing",
    "inclusive all the whole numbers from the first to the second value.",
    " ",
    "A single value will mean just that, a single value.",
    " ",
    "It is an error for the first value to be higher than the",
    "second.",
    " "
};

const char *gram_target_detailed[] = {
    gram_target_arg,
    " ",
    gram_target_brief,
    " ",
    "A target is specified through one or more of the following:",
    " ",
    "\t-f <file_name>",
    "\t-h <host_name>",
    "\t-r <rank_name>",
    "\t-t <thread_name>",
    "\t-p <pid_name>",
    "\t-c <cluster_name>",
    " ",
    "In addition each of the above arguments can be described",
    "as a comma delimited list. For example:",
    " ",
    "\t-p 342,355,587",
    "or:",
    "\t-h host1,host5",
    " "
};
const char *gram_target_list_detailed[] = {
    gram_target_list_arg,
    gram_target_arg,
    " ",
    gram_target_list_brief,
    " "
};
const char *gram_host_spec_detailed[] = {
    gram_host_spec_arg,
    gram_hostname_arg,
    gram_IP_Address_arg,
    " ",
    gram_host_spec_brief,
    " ",
    " "
};
const char *gram_host_file_detailed[] = {
    gram_host_file_arg,
    gram_host_spec_arg,
    gram_file_spec_arg,
    " ",
    gram_host_file_brief,
    " ",
    " "
};
const char *gram_lineno_range_detailed[] = {
    gram_lineno_range_arg,
    " ",
    gram_lineno_range_brief,
    " ",
    " "
};
const char *gram_linenumber_range_spec_detailed[] = {
    gram_linenumber_range_spec_arg,
    " ",
    gram_linenumber_range_spec_brief,
    " ",
    " "
};
const char *gram_linenumber_list_spec_detailed[] = {
    gram_linenumber_list_spec_arg,
    gram_linenumber_range_spec_arg,
    gram_lineno_range_arg,
    " ",
    gram_linenumber_list_spec_brief,
    " ",
    " "
};
const char *gram_statusType_detailed[] = {
    gram_statusType_arg,
    " ",
    gram_statusType_brief,
    " ",
    "\t- \"NonExistent\": ",
    "\t\tThe experiment requested doesn't exist.",
    " ",
    "\t\tIn general, this is an internal error state.",
    " ",
    "\t\tIf the tool checked the status of the ExperimentObject",
    "\t\tafter an \"expClose\" command, it might return",
    "\t\tthis status. It will also be returned if the",
    "\t\tframework experiment was destroyed - also an ",
    "\t\tinternal error.",
    " ",
    "\t- \"Paused\": ",
    "\t\tThe experiment requested has been paused by the user",
    "\t\tor has been loaded and is ready to run, but isn't ",
    "\t\tRunning yet.",
    " ",
    "\t\tThis is the initial state that a user will see.",
    "\t\tThe experiment is not collecting information.",
    "\t\tAdditional executables and additional experiment",
    "\t\ttypes can be added to the experiment before an",
    "\t\t\"expGo\" command is issued.",
    " ",
    "\t- \"Running\": ",
    "\t\tAt least one pid that is part of the experiment ",
    "\t\tis still currently executing.",
    " ",
    "\t- \"Terminated\": ",
    "\t\tThe experiment requested has succesfully terminated.",
    " ",
    "\t\tThe program that is part of the experiment can no",
    "\t\tlonger be executed. This could be because it has",
    "\t\tcompleted normally or because it encountered a",
    "\t\tfatal error.",
    " ",
    "\t- \"Error\": ",
    "\t\tThis state is reported if the FrameWork encounters",
    "\t\tan unexpected problem.",
    " "
};
const char *gram_viewType_detailed[] = {
    gram_viewType_arg,
    " ",
    gram_viewType_brief,
    " ",
    "To see all of the current available view types, type:",
    "\t\"list -v views,all\"",
    "You can then get more detailed information on each of the",
    "view types listed through the \"help\" facility."
};
const char *gram_pcsamp_detailed[] = {
    gram_pcsamp_arg,
    " ",
    gram_pcsamp_brief,
    " ",
    "The pcsamp experiment estimates the actual CPU ",
    "time for each source code line, machine code line, ",
    "and function in your program. The listing of ",
    "this experiment shows exclusive PC sampling time. ",
    "This experiment is a lightweight, high-speed operation ",
    "that makes use of the operating system.",
    " ",
    "CPU time is calculated by multiplying the number of ",
    "times an instruction or function appears in the PC by ",
    "the interval specified for the experiment.",
    " ",
    "To collect the data, the operating system regularly ",
    "stops the process, increments a counter corresponding ",
    "to the current value of the PC, and resumes the process. ",
    "The default sample interval is 100 milliseconds. The",
    "sample interval can be controlled via Open|SpeedShop. ",
    " ",
    "PC sampling runs should slow the execution time of ",
    "the program down no more than 5 percent. The measurements ",
    "are statistical in nature, meaning they exhibit variance ",
    "inversely proportional to the running time.",
    " "
};
const char *gram_usertime_detailed[] = {
    gram_usertime_arg,
    " ",
    gram_usertime_brief,
    " ",
    "The usertime and the totaltime experiments are useful ",
    "experiments to start your performance analysis. The usertime ",
    "experiment returns CPU time for each function while your ",
    "program runs and the totaltime experiment returns real ",
    "time for each function.",
    " ",
    "These expeirments use statistical call stack profiling ",
    "to measure inclusive and exclusive user time. They take ",
    "a sample every 30 milliseconds. Data is measured by ",
    "periodically sampling the callstack. The program's ",
    "callstack data is used to do the following:",
    " ",
    "\t- Attribute exclusive user time to the function at the ",
    "\t  bottom of each callstack (that is, the function being ",
    "\t  executed at the time of the sample).",
    " ",
    "\t- Attribute inclusive user time to all the functions above ",
    "\t  the one currently being executed (those involved in the ",
    "\t  chain of calls that led to the function at the bottom of ",
    "\t  the callstack executing).",
    " ",
    "The time spent in a procedure is determined by multiplying ",
    "the number of times an instruction for that procedure appears ",
    "in the stack by the sampling time interval between call stack ",
    "samples. Call stacks are gathered when the program is running; ",
    "hence, the time computed represents user time, not time spent ",
    "when the program is waiting for a CPU. User time shows both ",
    "the time the program itself is executing and the time the ",
    "operating system is performing services for the program, ",
    "such as I/O.",
    " ",
    "The usertime experiment should incur a program execution slowdown ",
    "of no more than 15%. Data from a usertime experiment is statistical ",
    "in nature and shows some variance from run to run.",
    " "
};
const char *gram_mpi_detailed[] = {
    gram_mpi_arg,
    " ",
    gram_mpi_brief,
    " ",
    "The mpi trace experiment traces calls to various MPI routines.",
    " "
};
const char *gram_fpe_detailed[] = {
    gram_fpe_arg,
    " ",
    gram_fpe_brief,
    " ",
    "A floating-point exception trace collects each ",
    "floating-point exception with the exception type ",
    "and the call stack at the time of the exception. ",
    "Floating-point exception tracing experiments should ",
    "incur a slowdown in execution of the program of no ",
    "more than 15%. These measurements are exact, not ",
    "statistical.",
    " "
};
const char *gram_hwc_detailed[] = {
    gram_hwc_arg,
    " ",
    gram_hwc_brief,
    " ",
    "In hardware counter experiments, overflows of a particular ",
    "hardware counter are recorded. Each hardware counter is ",
    "configured to count from zero to a number designated as ",
    "the overflow value. When the counter reaches the overflow ",
    "value, the system resets it to zero and increments the number ",
    "of overflows at the present program instruction address. ",
    "Each experiment provides two possible overflow values; the ",
    "values are prime numbers, so any profiles that seem the same ",
    "for both overflow values should be statistically valid.",
    " "
};
const char *gram_io_detailed[] = {
    gram_io_arg,
    " ",
    gram_io_brief,
    " ",
    "The I/O trace experiment shows you the level of I/O activity ",
    "in your program by tracing various I/O system calls, ",
    "for example read(2) and write(2).",
    " ",
    "",
    "\t- The number of I/O system calls executed.",
    "",
    "\t- The number of calls with an incomplete traceback.",
    "",
    "\t- The [index] column assigns a reference number to ",
    "\t  each function.",
    "",
    "\t- The number of I/O-related system calls from each ",
    "\t  function in the program.",
    "",
    "\t- The percentage of I/O-related system calls from each ",
    "\t  function in the program.",
    "",
    "\t- The percentage of I/O-related system calls encountered ",
    "\t  so far in the list of functions.",
    "",
    "\t- The number of I/O-related system calls made by a given ",
    "\t  function and by all the functions ultimately called by ",
    "\t  that given function. For example, the main function will ",
    "\t  probably include all of the program's I/O calls with ",
    "\t  complete tracebacks.",
    "",
    "\t- The percentage of I/O-related system calls made by a ",
    "\t  given function and by all the functions ultimately called ",
    "\t  by that given function.",
    "",
    "\t- The dso/dll, file name, and line number for each function.",
    "",
    " "
};
const char *gram_iot_detailed[] = {
    gram_iot_arg,
    " ",
    gram_iot_brief,
    " ",
    "The io trace experiment traces calls to various I/O routines and records extra information.",
    " "
};
const char *gram_mpit_detailed[] = {
    gram_mpit_arg,
    " ",
    gram_mpit_brief,
    " ",
    "The mpi trace experiment traces calls to various MPI routines and records extra information.",
    " "
};
const char *gram_mpiotf_detailed[] = {
    gram_mpiotf_arg,
    " ",
    gram_mpiotf_brief,
    " ",
    "The mpi trace experiment traces calls to various MPI routines using vampirtrace and produces OTF (Open Trace Format) files.",
    " "
};

/*********************************************/
// GRAMMAR Examples
/*********************************************/
// 
const char *gram_list_example[] = {
    "-f file1,file2,file3",
    " ",
    "    A list of file name strings.",
    " ",
    "-r 44,55,66:69,77",
    " ",
    "    A list of the rank numbers 44,55,66,67,68,69 and 77.",
    "    Note that a <range can be an element of a list.",
    " ",
    "An example of a list of <target>",
    "-h host1 -p 333:400 ; -h host2 -p 500:540",
    " ",
    "    An example of a list of <target>",
    " ",
    "    All the pids for this experiment on host1 from.",
    "    333 ti 400 and all the pids on host2 from 500 to 540",
    " "
};

const char *gram_hwc_example[] = {
    " You will need to set which hardware counter event to",
    " monitor. To see which events are available for your system:",
    " ",
    "    help hwc_events",
    " ",
    " To set the hardware event for Level 1 Data Cache Misses:",
    " ",
    "    expSetParam event=PAPI_LI_DCM",
    " ",
    " The usual order for setting up a hwc experiment is to first",
    " define the experiment with expCreate or expAttach, then",
    " set the event parameter with expSetParam and finally run",
    " the experiment using expGo.",
    " ",
    " To view the results:",
    " ",
    "    expView hwc",
    " "
};

/*********************************************/
// GRAMMAR MESSAGE ARRAY
/*********************************************/
// message array to be passed to message czar
OpenSpeedShop::message_element_t grammar_msg[] = {
//    <breakId>
    -1,"breakId",NULL,0,"grammar",gram_breakId_brief,
    gram_breakId_detailed,sizeof(gram_breakId_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expId>
    -1,"expId",NULL,0,"grammar",gram_expId_brief,
    gram_expId_detailed,sizeof(gram_expId_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expId_spec>
    -1,"expId_spec",NULL,0,"grammar",gram_expId_spec_brief,
    gram_expId_spec_detailed,sizeof(gram_expId_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <metric_name>
    -1,"metric_name",NULL,0,"grammar",gram_metric_name_brief,
    gram_metric_name_detailed,sizeof(gram_metric_name_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <format_spec>
    -1,"format_spec",NULL,0,"grammar",gram_view_format_brief,
    gram_view_format_detailed,sizeof(gram_view_format_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <metric_expression>
    -1,"metric_expression",NULL,0,"grammar",gram_metric_expression_brief,
    gram_metric_expression_detailed,sizeof(gram_metric_expression_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expMetric>
    -1,"expMetric",
    gram_expMetric_related,sizeof(gram_expMetric_related)/sizeof(char **),
    "grammar",gram_expMetric_brief,
    gram_expMetric_detailed,sizeof(gram_expMetric_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expMetric_list_spec>
    -1,"expMetric_list_spec",NULL,0,"grammar",gram_expMetric_list_spec_brief,
    gram_expMetric_list_spec_detailed,sizeof(gram_expMetric_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <param_name>
    -1,"param_name",NULL,0,"grammar",gram_param_name_brief,
    gram_param_name_detailed,sizeof(gram_param_name_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expParam>
    -1,"expParam",NULL,0,"grammar",gram_expParam_brief,
    gram_expParam_detailed,sizeof(gram_expParam_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expParamValue>
    -1,"expParamValue",NULL,0,"grammar",gram_expParamValue_brief,
    gram_expParamValue_detailed,sizeof(gram_expParamValue_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <predefined_exp>
    -1,"predefined_exp",NULL,0,"grammar",gram_predefined_exp_brief,
    gram_predefined_exp_detailed,sizeof(gram_predefined_exp_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <user_defined_exp>
    -1,"user_defined_exp",NULL,0,"grammar",gram_user_defined_exp_brief,
    gram_user_defined_exp_detailed,sizeof(gram_user_defined_exp_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <listType>
    -1,"listType",NULL,0,"grammar",gram_listType_brief,
    gram_listType_detailed,sizeof(gram_listType_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expType>
    -1,"expType",NULL,0,"grammar",gram_expType_brief,
    gram_expType_detailed,sizeof(gram_expType_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <expType_list>
    -1,"expType_list",NULL,0,"grammar",gram_expType_list_brief,
    gram_expType_list_detailed,sizeof(gram_expType_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <rank_name>
    -1,"rank_name",NULL,0,"grammar",gram_rankname_brief,
    gram_rankname_detailed,sizeof(gram_rankname_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <rank_range>
    -1,"rank_range",NULL,0,"grammar",gram_rank_range_brief,
    gram_rank_range_detailed,sizeof(gram_rank_range_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <rank_list>
    -1,"rank_list",NULL,0,"grammar",gram_rank_list_brief,
    gram_rank_list_detailed,sizeof(gram_rank_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <rank_list_spec>
    -1,"rank_list_spec",NULL,0,"grammar",gram_rank_list_spec_brief,
    gram_rank_list_spec_detailed,sizeof(gram_rank_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <thread_name>
    -1,"thread_name",NULL,0,"grammar",gram_threadname_brief,
    gram_threadname_detailed,sizeof(gram_threadname_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <thread_range>
    -1,"thread_range",NULL,0,"grammar",gram_thread_range_brief,
    gram_thread_range_detailed,sizeof(gram_thread_range_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <thread_list>
    -1,"thread_list",NULL,0,"grammar",gram_thread_list_brief,
    gram_thread_list_detailed,sizeof(gram_thread_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <thread_list_spec>
    -1,"thread_list_spec",NULL,0,"grammar",gram_thread_list_spec_brief,
    gram_thread_list_spec_detailed,sizeof(gram_thread_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <pid_name>
    -1,"pid_name",NULL,0,"grammar",gram_pidname_brief,
    gram_pidname_detailed,sizeof(gram_pidname_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <pid_range>
    -1,"pid_range",NULL,0,"grammar",gram_pid_range_brief,
    gram_pid_range_detailed,sizeof(gram_pid_range_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <pid_list>
    -1,"pid_list",NULL,0,"grammar",gram_pid_list_brief,
    gram_pid_list_detailed,sizeof(gram_pid_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <pid_list_spec>
    -1,"pid_list_spec",NULL,0,"grammar",gram_pid_list_spec_brief,
    gram_pid_list_spec_detailed,sizeof(gram_pid_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <file_name>
    -1,"file_name",NULL,0,"grammar",gram_filename_brief,
    gram_filename_detailed,sizeof(gram_filename_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <file_list>
    -1,"file_list",NULL,0,"grammar",gram_file_list_brief,
    gram_file_list_detailed,sizeof(gram_file_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <file_list_spec>
    -1,"file_list_spec",NULL,0,"grammar",gram_file_list_spec_brief,
    gram_file_list_spec_detailed,sizeof(gram_file_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <IP_Address>
    -1,"IP_Address",NULL,0,"grammar",gram_IP_Address_brief,
    gram_IP_Address_detailed,sizeof(gram_IP_Address_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <host_name>
    -1,"host_name",NULL,0,"grammar",gram_hostname_brief,
    gram_hostname_detailed,sizeof(gram_hostname_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <host_list>
    -1,"host_list",NULL,0,"grammar",gram_host_list_brief,
    gram_host_list_detailed,sizeof(gram_host_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <host_list_spec>
    -1,"host_list_spec",NULL,0,"grammar",gram_host_list_spec_brief,
    gram_host_list_spec_detailed,sizeof(gram_host_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <cluster_name>
    -1,"cluster_name",NULL,0,"grammar",gram_clustername_brief,
    gram_clustername_detailed,sizeof(gram_clustername_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <cluster_list>
    -1,"cluster_list",NULL,0,"grammar",gram_cluster_list_brief,
    gram_cluster_list_detailed,sizeof(gram_cluster_list_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    NULL,0,
//    <cluster_list_spec>
    -1,"cluster_list_spec",NULL,0,"grammar",gram_cluster_list_spec_brief,
    gram_cluster_list_spec_detailed,sizeof(gram_cluster_list_spec_detailed)/sizeof(char **),
    NULL,0,
    NULL,0,
    NULL,0,
//    <list>
    -1,"list",NULL,0,"grammar",gram_list_brief,
    gram_list_detailed,sizeof(gram_list_detailed)/sizeof(char **),
    NULL,0,
    gram_list_example,sizeof(gram_list_example)/sizeof(char **),
    NULL,0,
//    <range>
    -1,"range",NULL,0,"grammar",gram_range_brief,
    gram_range_detailed,sizeof(gram_range_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <target>
    -1,"target",
    gram_target_related,sizeof(gram_target_related)/sizeof(char **),
    "grammar",gram_target_brief,
    gram_target_detailed,sizeof(gram_target_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <target_list>
    -1,"target_list",NULL,0,"grammar",gram_target_list_brief,
    gram_target_list_detailed,sizeof(gram_target_list_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <file_spec>
    -1,"file_spec",NULL,0,"grammar",gram_file_spec_brief,
    gram_file_spec_detailed,sizeof(gram_file_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <host_spec> 
    -1,"host_spec",NULL,0,"grammar",gram_host_spec_brief,
    gram_host_spec_detailed,sizeof(gram_host_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <host_file>
    -1,"host_file",NULL,0,"grammar",gram_host_file_brief,
    gram_host_file_detailed,sizeof(gram_host_file_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <lineno_range>
    -1,"lineno_range",NULL,0,"grammar",gram_lineno_range_brief,
    gram_lineno_range_detailed,sizeof(gram_lineno_range_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <linenumber_range_spec>
    -1,"linenumber_range_spec",NULL,0,"grammar",gram_linenumber_range_spec_brief,
    gram_linenumber_range_spec_detailed,sizeof(gram_linenumber_range_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <linenumber_list_spec>
    -1,"linenumber_list_spec",NULL,0,"grammar",gram_linenumber_list_spec_brief,
    gram_linenumber_list_spec_detailed,sizeof(gram_linenumber_list_spec_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <statusType>
    -1,"statusType",NULL,0,"grammar",gram_statusType_brief,
    gram_statusType_detailed,sizeof(gram_statusType_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    <viewType>
    -1,"viewType",NULL,0,"grammar",gram_viewType_brief,
    gram_viewType_detailed,sizeof(gram_viewType_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    pcsamp
    -1,"pcsamp",NULL,0,"experiments",gram_pcsamp_brief,
    gram_pcsamp_detailed,sizeof(gram_pcsamp_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    usertime
    -1,"usertime",NULL,0,"experiments",gram_usertime_brief,
    gram_usertime_detailed,sizeof(gram_usertime_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    mpi
    -1,"mpi",NULL,0,"experiments",gram_mpi_brief,
    gram_mpi_detailed,sizeof(gram_mpi_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    mpit
    -1,"mpit",NULL,0,"experiments",gram_mpit_brief,
    gram_mpit_detailed,sizeof(gram_mpit_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    mpiotf
    -1,"mpiotf",NULL,0,"experiments",gram_mpiotf_brief,
    gram_mpiotf_detailed,sizeof(gram_mpiotf_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    fpe
    -1,"fpe",NULL,0,"experiments",gram_fpe_brief,
    gram_fpe_detailed,sizeof(gram_fpe_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    hwc
    -1,"hwc",
    gram_hwc_related,sizeof(gram_hwc_related)/sizeof(char **),
    "experiments",gram_hwc_brief,
    gram_hwc_detailed,sizeof(gram_hwc_detailed)/sizeof(char **),
    NULL,0,
    gram_hwc_example,sizeof(gram_hwc_example)/sizeof(char **),
    NULL,0,
//    io
    -1,"io",NULL,0,"experiments",gram_io_brief,
    gram_io_detailed,sizeof(gram_io_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    iot
    -1,"iot",NULL,0,"experiments",gram_iot_brief,
    gram_iot_detailed,sizeof(gram_iot_detailed)/sizeof(char **),
    NULL,0,NULL,0,
    NULL,0,
//    
//    -1,"",NULL,0,"grammar",gram_xxx_brief,
//    gram_xxx_detailed,sizeof(gram_xxx_detailed)/sizeof(char **),NULL,0,NULL,0,

//    END OF LIST
    -1,NULL,NULL,0,NULL,NULL,
    NULL,0,NULL,0,NULL,0,NULL,0
};


