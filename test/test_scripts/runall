#!/usr/bin/env python
#
# Copyright (c) 2005 Silicon Graphics, Inc. All Rights Reserved.
# Copyright (c) 2006-2011 Krell Institute. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA
#


from sys import *
import sys
import os
from datetime import *
from time import *
import smtplib
from email.MIMEText import MIMEText



reg_leaf = 1
unit_leaf = 2
not_leaf = 3
resultsFile = 'testresults'
testResultsFile = ''
from_addr = ''   ######INSERT YOUR EMAIL ADDRESS HERE IF YOU WANT RESULTS MAIL
to_addr = ''	#####################AND HERE

def whatKindofDirectory():

	typeofdir = ''
	checkforrununit = os.path.isfile('rununit')
	if checkforrununit:
		typeofdir = unit_leaf
	else:
		checkforrunone = os.path.isfile('runone')
		if checkforrunone:
			typeofdir = reg_leaf
       	if ((typeofdir != reg_leaf) and (typeofdir != unit_leaf)):
		typeofdir = not_leaf

	return typeofdir

def createDirectoryList():

	os.system('ls -1 >> dirlist')
	

def getResultFileFromDir(directoryName):

	checkForMarker = os.path.isfile('../inthisdirectory')
	
	if checkForMarker:
		resultsfilenameinput = open('testresultsfilename', 'r')
		resultsFileName = resultsfilenameinput.readline()
		os.chdir('..')
		os.system('more '+ directoryName+'/'+resultsFileName+' >> ' + testResultsFile)
	
		os.chdir(directoryName)


def determineIfSimpleUnit():

	if (os.path.isfile('test_list')):

		return 0
	else:
		os.system('ls *.cxx >> checkforcxx')
		if (os.path.getsize('checkforcxx') > 0):
			os.remove('checkforcxx')
			return 1
		os.system('ls *.c >> checkforc')
		if (os.path.getsize('checkforc') > 0):
			os.remove('checkforcxx')
			os.remove('checkforc')
			return 2
		os.system('ls *.f90 >> checkforf')
		if (os.path.getsize('checkforf') > 0):
			os.remove('checkforcxx')
			os.remove('checkforc')
			os.remove('checkforf')
			return 3
		

def mailResults(filename, fm_add, to_add):

		fp = open(filename, 'r')
		msg = MIMEText(fp.read())
		fp.close
				
		msg['Subject']= filename 
		msg['From'] = fm_add
		msg['To'] = to_add
				
		server = smtplib.SMTP()
		server.connect()
		server.sendmail(fm_add, to_add, msg.as_string())
		server.close()

def determineIfTopDir():


	Top = os.path.isfile('../inthisdirectory')
	if Top:
		return 0
	else:
		return 1
	

if __name__ == '__main__':

	os.system('touch inthisdirectory')
	
	currTime = strftime("%d_%m_%Y_%H%M%S", localtime())
	resultsFile = resultsFile +'_' + currTime

	typeofdir = whatKindofDirectory()

	checkForList = os.path.isfile('dirlist')

	if checkForList:
		os.system('rm dirlist')

	checkForTop = determineIfTopDir()
	
	if ((typeofdir == not_leaf) or checkForTop):

		currTime = strftime("%d_%m_%Y_%H%M%S", localtime())
	
		testResultsFile = 'testresults_' + currTime

		resultsfilenameinput = open('testresultsfilename', 'w')
		resultsfilenameinput.write(testResultsFile)
		resultsfilenameinput.close()
	
		createDirectoryList()
		dirListInput = open('dirlist', 'r')
		#resultsOutput = open(resultsFile, 'w')
		    

		while 1:
			dirListLine = dirListInput.readline()
			
			if not dirListLine:
				break
			else:
				i = 0
				temp_char = ' '
				while temp_char != '\n':
					temp_char = dirListLine[i]
					i += 1
					
				dirName = dirListLine[0:i-1]
				
				checkIfDir = os.path.isdir(dirName)

				
				
			       	if checkIfDir and (dirName != 'CVS') :
			       		os.chdir(dirName)
			       		os.system('./runall')
					getResultFileFromDir(dirName)
					os.chdir('..')
					os.remove(dirName+'/inthisdirectory')
					os.remove(dirName+'/testresultsfilename')
					
					

	if (typeofdir == reg_leaf):
		os.system('./runone')
	if (typeofdir == unit_leaf):

		unitNum = determineIfSimpleUnit()
		if unitNum == 0:
			os.system('./rununit')
		if unitNum == 1:
			os.system('./rununit -cxx')
		if unitNum == 2:
			os.system('./rununit -c')
		if unitNum == 3:
			os.system('./rununit -f')
	isTop = 0
#	if (typeofdir == unit_leaf or (checkForTop == 0) or typeofdir == reg_leaf):
#	if (checkForTop == 0):
#		os.chdir('..')
#		isTop = determineIfTopDir()
#	if checkForTop or isTop:
	if checkForTop:
		resultsfilenameinput = open('testresultsfilename', 'r')
		resultsFileName = resultsfilenameinput.readline()
		resultsfilenameinput.close()
		os.system('rm -f /tmp/dpcl.* >& /tmp/bosco_1234_asd')
		os.system('rm -f /tmp/bosco_1234_asd')
        	os.system('rm -f /tmp/ssdb* >& /tmp/bosco_1234?sdf')
		os.system('rm -f /tmp/bosco_1234?sdf')
        	os.system('rm -f /tmp/dpclProbeModule* >& /tmp/bosco1234_asd')
		os.system('rm -f /tmp/bosco1234_asd')
			
		isHere = os.path.isfile(resultsFileName)
		do_mail = 1
		if (from_addr =='' or to_addr==''):
			do_mail = 0 
	
		if isHere and do_mail:
			mailResults(resultsFileName, from_addr, to_addr)
	
	

	if (checkForTop == 1 ):
		if (os.path.isfile('inthisdirectory')):
			os.remove('inthisdirectory')
		if (os.path.isfile('testresultsfilename')):
			os.remove('testresultsfilename')
		if (os.path.isfile('dirlist')):
			os.remove('dirlist')


