
For OSS:

Adjust config/make.def to your system and compiler availability.

module load openmpi-1.5.3
make bt-mz CLASS=B NPROCS=4 
#make CLASS=B NPROCS=4 

The executable is built into the "bin" directory.
lsr bin
total 612
204 -r--r--r--.  1 jeg jeg 205371 Nov  9 10:01 x_solve.f.html
 52 -r--r--r--.  1 jeg jeg  50907 Nov  9 10:01 blts.f.html
  4 drwxrwxr-x.  2 jeg jeg   4096 Nov  9 10:07 CVS
  4 drwxrwxr-x.  3 jeg jeg   4096 Nov  9 10:09 .
344 -rwxrwxr-x.  1 jeg jeg 348454 Nov  9 10:09 bt-mz.B.4
  4 drwxrwxr-x. 10 jeg jeg   4096 Nov  9 10:10 ..

cd bin
module load openss-201b13
export OMP_NUM_THREADS=4
osspcsamp "mpirun -np 4 bt-mz.B.4"




NPB3.2-MZ (Multi-Zone) MPI+OpenMP Versions
-------------------------------------------

For details, see
   http://www.nas.nasa.gov/Research/Reports/Techreports/2003/
   nas-03-010-abstract.html

NPB Development Team
   npb@nas.nasa.gov


Compilation
------------

1. copy one of the 'make.def' examples in config/NAS.samples or the
   file config/make.def.template to config/make.def

2. modify/specify the compiler and compilation flags in config/make.def

3. use the following line to compile
   make benchmark CLASS=class NPROCS=number_of_procs

   [benchmark] is one of [bt-mz, sp-mz, lu-mz]
   [class] is one of [S, W, A through F]
   [number_of_procs] is the number of MPI processes requested


Runtime Environment Variables and Setups
-----------------------------------------

1. Specify the number of threads

There are two ways to specify the number of threads:
   - using a load data file for different benchmark
      loadbt-mz.data, loadsp-mz.data, or loadlu-mz.data
   - using environment variables.

1.1 load data file

A load data file defines the number of threads used for each process
and has the following format:
   <proc#>  <number_of_threads>  <proc_group>
   <proc#>  <number_of_threads>  <proc_group>
   ...

<proc#> starts from 0, up to <number_of_procs>-1.  The <proc_group>
column can be used to specify a processor group to which a process
belongs.  This field is useful for running NPB-MZ across several
SMP boxes, where each individual SMP box could be load-balanced
with OpenMP threads up to the number of CPUs available in the box.
The file will be read by the master process from the current working 
directory.

The load data file precedes the environment variables as described in
Section 1.2, in particular, the load balancing with threads movement
will not be applied if all values of <proc_group> are less than one.

1.2 environment variables

OMP_NUM_THREADS
  - the number of threads per process.  If this variable is not specified,
    one thread is assumed for each process.

    The total number of threads is number_of_procs * num_threads.

NPB_MZ_BLOAD
  - flag for load balancing with threads.  By default, load balancing
    with threads is on (with a value of 1, ON or TRUE).

NPB_MAX_THREADS
  - the maximum number of threads that can be used on each process for 
    load balancing.  This value is checked only if NPB_MZ_BLOAD is enabled.
    By default (with a value of 0), there is no limitation on the number
    of threads.  If NPB_MAX_THREADS is specified, the value must be either
    0 (for no limit) or no less than OMP_NUM_THREADS.

2. Other environment variables

NPB_VERBOSE
  - flag to control verbose output.  By default (a value of 0), a summary
    is printed.  With a value of 1 (or larger), more detailed information 
    on zones is printed.

3. Use the built-in profile timers

An input parameter file may be used to change several parameters at 
runtime, one of which is the timer flag that controls the collection of 
some timing statistics.  In order to use this feature, one needs to create 
an "input<benchmark>.data" file (<benchmark>=bt-mz, sp-mz or lu-mz) in 
the working directory from the sample input files included in the source 
directory.  To collect timing statistics, switch on (with a value of 1)
the timer flag in the input file.


Known Problems
---------------
  - On SGI Origins using the Message Passing Toolkit (MPT) versions from 
    1.4.0.3 to 1.7.0.0, the hybrid MPI+OpenMP version crashes due to the
    use of the THREADPRIVATE directive in the codes.  As a workaround,
    you can either use another MPT module (such as mpt.1.4.0.0) or set
    the following environment variable:

    "setenv MPI_STATIC_NO_MAP" (csh) or 
    "export MPI_STATIC_NO_MAP" (sh)

  - On SGI Altix, if undefined symbols (for getenv) are encountered when
    compiling with the Intel 7.x FORTRAN compiler, add "-lPEPCF90" to
    F_LIB in config/make.def.

    With some versions of Intel compilers, the following runtime variable
    may be required to avoid a stacksize overflow:

    "setenv KMP_MONITOR_STACKSIZE 200k" (csh) or
    "export KMP_MONITOR_STACKSIZE=200k" (sh)

