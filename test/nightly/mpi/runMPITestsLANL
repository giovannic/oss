#! /bin/bash

#
#  This script is focused on running on LANL systems
#
if [ "$1" == "help" -o "$1" = "--help" ]
then
  echo ""
  echo "Usage: This script automatically compiles smg2000 and sweep3d"
  echo "       using the Intel, PGI, and GNU compilers and the default MPI implementation."
  echo ""
  echo "       It then runs OpenSpeedShop on each of the smg2000 and sweep3d versions using:"
  echo "       the pcsamp, usertime, hwc, hwctime, io, iot, mpi, and mpit experiments."
  echo ""
  echo "       It verifies the results only by searching for a common expected value.  At this time"
  echo "       no performance ratios are tested for."
  echo ""
  exit
fi

#
#
debug_flag=1

##set -x
basedir=`pwd`

. ${MODULESHOME}/init/sh
export MODULEPATH=/users/jegsgi/privatemodules:$MODULEPATH

module purge
echo "NOTE: load openss-mrnet module"
module load openss-mrnet
#echo "NOTE: load openmpi-gcc/1.2.4 module"
#module load openmpi-gcc/1.2.4
echo "NOTE: start MODULE LIST - TOP OF SCRIPT"
module list
echo "NOTE: end   MODULE LIST - TOP OF SCRIPT"

NEWNAME=""

for testname in `ls *.tar.gz`
do
   if [ debug_flag == 1 ]
   then
      echo "1st loop, testname=" $testname
   fi

   NEWNAME=$(echo "$testname" | sed -e 's/.tar.gz//')

   if [ debug_flag == 1 ]
   then
     echo "1st loop, NEWNAME=" $NEWNAME
   fi

   cd $basedir

   if [ debug_flag == 1 ]
   then
     echo "1st loop, basedir=" $basedir
   fi

#thiscompiler="intel"
#  for thiscompiler in intel pgi gnu

#  loop here through a compiler list
for thiscompiler in gnu intel pgi pathscale
do
 if [ debug_flag == 1 ]
 then
   echo "thiscompiler=" $thiscompiler  
   echo "testsuffix=" $testsuffix
   echo "testCC=" $testCC
 fi

 module purge
 module load modules openss-mrnet

 if [ $thiscompiler == "gnu" ] 
 then
    module load openmpi-gcc/1.2.4
 elif  [ $thiscompiler == "pgi" ]
 then
    module load pgi/7.2-5
    module load openmpi-pgi/1.2.4
 elif  [ $thiscompiler == "intel" ]
 then
    module load intel-c/10.0.023
    module load openmpi-intel/1.2.4
 elif  [ $thiscompiler == "pathscale" ]
 then
    module load pathscale/3.0
    module load openmpi-pathscale/1.2.4
 fi

echo "NOTE: start MODULE LIST - AFTER COMPILER SELECTION"
module list
echo "NOTE: end   MODULE LIST - AFTER COMPILER SELECTION"

hostabi=`uname -m`
ulimit -c unlimited
#
# setup the path and information with regards to building the MPI applicaton you will be running
#
testexe=$NEWNAME
echo "test independent, before testexe.tar.gz unpacking, NEWNAME=" $NEWNAME

gunzip $testexe.tar.gz
tar -xvf $testexe.tar
gzip $testexe.tar

currentdir=`pwd`
echo "test independent, first currentdir=" $currentdir
testpathbase=$currentdir
echo "test independent, testpathbase=" $testpathbase

# keep two copies, the previous and the current
# if previous already exists remove it.
if [ -a prev_${testexe}_${thiscompiler} ]
then
   rm -rf prev_${testexe}_${thiscompiler}
fi

mv -f  ${testexe}_${thiscompiler} prev_${testexe}_${thiscompiler}
mv ${testexe} ${testexe}_${thiscompiler}
cd ${testexe}_${thiscompiler}
echo "test independent, first ${testexe}_${thiscompiler}=" ${testexe}_${thiscompiler}

currentdir=`pwd`
#echo $currentdir
echo "test independent, second currentdir=" $currentdir

thismpicc=`which mpicc`
echo "which mpicc=" $thismpicc

if [ "$testexe" == "smg2000" ]
then
#  mv -f newMakefile.include Makefile.include
  make
elif  [ "$testexe" == "sweep3d" ]
then
#  mv -f new_makefile makefile
  make -f makefile.lanl clean
  make -f makefile.lanl mpi
fi

if [ "$testexe" == "smg2000" ]
then
   testpath=$testpathbase/${testexe}_${thiscompiler}/test
   testexepath=$testpath
   testexeargs='-n 35 35 35'
   testprogram=$testexepath/$testexe
elif [ "$testexe" == "sweep3d" ]
then
   testpath=$testpathbase/${testexe}_${thiscompiler}
   testexepath=$testpath
   testexeargs=''
   testprogram=$testexepath/$testexe.mpi
else
   testpath=$testpathbase/${testexe}_${thiscompiler}
   testexepath=$testpath
   testexeargs=''
   testprogram=$testexepath/$testexe
fi

#
# setup the OpenSpeedShop experiment type
#
experiment=usertime
#experiment=pcsamp

sleep 2

#export OPENSS_DEBUG_OPENSS=1
#export OPENSS_DEBUG_MPIJOB=1
#export OPENSS_DEBUG_PROCESS=1
#export DYNINST_DEBUG_STARTUP=1
#export DYNINST_DEBUG_SYMTAB=1

echo "testpath=" $testpath
cd $testpath

#
# setup the path to OpenSpeedShop
#
theopenss=`which openss`
#theopenss=/g/g24/jeg/chaos_4_x86_64_ib/opt/OSS-mrnet/bin/openss

echo "Using openss=" $theopenss
echo "Using the raw data directory storage environment variable: OPENSS_RAWDATA_DIR=" $OPENSS_RAWDATA_DIR

# 
# Create the default test configuration file if it does not exist
#
# CHANGE THIS FILE CAT TO ADD YOUR EMAIL and NODE/RANK COUNTS
# For sweep3d.mpi to execute properly please keep the rank count a power of two.
# Also, the compiler setting "all" is ignored right now.
# The default_test_config file is defined as:
# Number of nodes
# Number of ranked processes
# Compiler setting: all, pgi, intel, gnu, pathscale  (currently ignored)
# Email address where the test reports are sent
#

if [ -a default_test_config ]
then
  echo "NOTE: Using default_test_config file which already exists"
else
  echo "NOTE: Creating default_test_config file"
cat > default_test_config << EOF
4
32
all
jegkas@gmail.com
EOF
fi

# define the NodeCount for the launch script (msub) so it knows how many nodes to request
# they should be the same as the default_test_config file above
NodeCount=4


cat > common_commands << EOF
wait
expstatus
expview
EOF


if [ "$testexe" == "smg2000" ]
then

cat > smg2000_${thiscompiler}_openmpi_script.sh << EOF
#!/bin/bash
#
. ${MODULESHOME}/init/sh
export MODULEPATH=/users/jegsgi/privatemodules:$MODULEPATH

echo "NOTE: smg2000 test, thiscompiler=" $thiscompiler
module purge
module load modules openss-mrnet
if [ $thiscompiler == "gnu" ] 
then
    module load openmpi-gcc/1.2.4
elif  [ $thiscompiler == "pgi" ]
then
    module load pgi/7.2-5
    module load openmpi-pgi/1.2.4
elif  [ $thiscompiler == "intel" ]
then
    module load intel-c/10.0.023
    module load openmpi-intel/1.2.4
elif  [ $thiscompiler == "pathscale" ]
then
    module load pathscale/3.0
    module load openmpi-pathscale/1.2.4
fi

echo "NOTE: smg2000 test, start MODULE LIST="
module list
echo "NOTE: smg2000 test, end MODULE LIST="
echo "NOTE: smg2000 test, PATH=" $PATH

# setup separate unique raw data directories for each compiler/test combination
rm -rf /scratch3/jegsgi/smg2000_${thiscompiler}_RAW
mkdir /scratch3/jegsgi/smg2000_${thiscompiler}_RAW
export OPENSS_RAWDATA_DIR=/scratch3/jegsgi/smg2000_${thiscompiler}_RAW
echo "NOTE: smg2000 test, OPENSS_RAWDATA_DIR=" $OPENSS_RAWDATA_DIR

which openss
export PATH=.:$PATH
echo "NOTE: smg2000 test, after ., PATH=" $PATH
executable=`which smg2000`
echo "NOTE: smg2000 test, current directory is:" `\$pwd`
echo "NOTE: smg2000 test, executable path directory is:" \$executable
mpicommand=`which mpirun`
echo "smg2000 test, mpirun command path directory is:" \$mpicommand
#
# Read in test parameters
#

echo "ls of default_test_config=`ls -lastr default_test_config`"

if [ -a default_test_config ] 
then
  echo "Reading the existing default_test_config file"
  BAKIFS=\$IFS
  IFS=\$(echo -en "\n\b")
  exec 3<&0
  exec 0<default_test_config

  read curline
  echo "NOTE: NodeCount: \$curline"
  NodeCount=\$curline
#
  read curline
  echo "NOTE: RankCount: \$curline"
  RankCount=\$curline
#
  read curline
  echo "NOTE: CompilerType: \$curline"
  CompilerType=\$curline
#
  read curline
  echo "NOTE: EmailAddress: \$curline"
  EmailAddress=\$curline

  exec 0<&3

# restore IFS which was used to determine what the field separators are
#
  IFS=\$BAKIFS
#
fi

#
if [ debug_flag == 1 ]
then
  echo "DEBUG: NodeCount: \$NodeCount"
  echo "DEBUG: RankCount: \$RankCount"
  echo "DEBUG: CompilerType: \$CompilerType"
  echo "DEBUG: EmailAddress: \$EmailAddress"
fi

#
#
# Run all experiments
#

echo "NOTE: Using openss=" $theopenss
echo "NOTE: Using the raw data directory storage environment variable: OPENSS_RAWDATA_DIR=" $OPENSS_RAWDATA_DIR
echo "NOTE: The smg2000 testpath=" $testpath
echo "NOTE: start pwd=`pwd`"
echo "NOTE: end pwd"
cd $testpath
#
# Run the executable by itself first
#
\$mpicommand -np \$RankCount \$executable -n 40 40 40

#
# Run pcsamp and analyze the results
#
openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" pcsamp
ls *.openss | grep "smg2000-pcsamp\." > smg2000_${thiscompiler}_openmpi_create_pcsamp
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 pcsamp experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_pcsamp > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_pcsamp_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "hypre_CyclicReduction (smg2000: cyclic_reduction.c,757)" smg2000_${thiscompiler}_openmpi_pcsamp_results.log | cat > smg2000_${thiscompiler}_openmpi_pcsamp_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 pcsamp experiment"
echo "-------------------------------------"

#
# Run usertime and analyze the results
#
openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" usertime
ls *.openss | grep "smg2000-usertime\." > smg2000_${thiscompiler}_openmpi_create_usertime

echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 usertime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_usertime > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_usertime_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "hypre_CyclicReduction (smg2000: cyclic_reduction.c,757)" smg2000_${thiscompiler}_openmpi_usertime_results.log | cat > smg2000_${thiscompiler}_openmpi_usertime_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 usertime experiment"
echo "-------------------------------------"
echo ""



openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" hwc
ls *.openss | grep "smg2000-hwc\." > smg2000_${thiscompiler}_openmpi_create_hwc

echo ""
echo "BEGIN Analyzing smg2000 hwc experiment"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_hwc > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_hwc_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "hypre_CyclicReduction (smg2000: cyclic_reduction.c,757)" smg2000_${thiscompiler}_openmpi_hwc_results.log | cat > smg2000_${thiscompiler}_openmpi_hwc_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 hwc experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" hwctime
ls *.openss | grep "smg2000-hwctime\." > smg2000_${thiscompiler}_openmpi_create_hwctime

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 hwctime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_hwctime > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_hwctime_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "hypre_CyclicReduction (smg2000: cyclic_reduction.c,757)" smg2000_${thiscompiler}_openmpi_hwctime_results.log | cat > smg2000_${thiscompiler}_openmpi_hwctime_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 hwctime experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" io
ls *.openss | grep "smg2000-io\." > smg2000_${thiscompiler}_openmpi_create_io

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 io experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_io > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_io_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "2016  __libc_open" smg2000_${thiscompiler}_openmpi_io_results.log | cat > smg2000_${thiscompiler}_openmpi_io_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 io experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 40 40 40" iot
ls *.openss | grep "smg2000-iot\." > smg2000_${thiscompiler}_openmpi_create_iot

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 iot experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_iot > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_iot_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "2016  __libc_open" smg2000_${thiscompiler}_openmpi_iot_results.log | cat > smg2000_${thiscompiler}_openmpi_iot_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 iot experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 5 5 5" mpi
ls *.openss | grep "smg2000-mpi\-" > smg2000_${thiscompiler}_openmpi_create_mpi

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 mpi experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_mpi > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_mpi_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "\$RankCount  PMPI_Finalize" smg2000_${thiscompiler}_openmpi_mpi_results.log | cat > smg2000_${thiscompiler}_openmpi_mpi_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 mpi experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable -n 5 5 5" mpit

#
# Find corresponding experiment database files and create files that can be used to restore the databases
#
ls *.openss | grep "smg2000-mpit\-" > smg2000_${thiscompiler}_openmpi_create_mpit

#
# Use the corresponding experiment database file names to restore the database and print out the status and results for the experiments
#
echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing smg2000 mpit experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' smg2000_${thiscompiler}_openmpi_create_mpit > new_input.script
echo "log -f smg2000_${thiscompiler}_openmpi_mpit_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "\$RankCount  PMPI_Finalize" smg2000_${thiscompiler}_openmpi_mpit_results.log | cat > smg2000_${thiscompiler}_openmpi_mpit_results.status

echo "-------------------------------------"
echo "END Analyzing smg2000 mpit experiment"
echo "-------------------------------------"
echo ""

# script to send test results email
# email subject
SUBJECT="OpenSpeedShop MPI smg2000 executable test results"
# Email To ?
EMAIL="jegkas@gmail.com"
# Email text/message
EMAILMESSAGE="/tmp/openss_test_message.txt"
echo " OpenSpeedShop Performance Tool SMG2000 Test Results" >\$EMAILMESSAGE
echo "" >>\$EMAILMESSAGE
echo " Intel compiler, $NodeCount Nodes \$RankCount ranks">> \$EMAILMESSAGE
thisuname="\`uname -srnmo\`"
echo " System uname: " \$thisuname>> \$EMAILMESSAGE
thisdate="\`date\`"
echo " Date/time of run: " \$thisdate>> \$EMAILMESSAGE
thisdir="\`pwd\`"
echo " Directory where tests were run: " \$thisdir>> \$EMAILMESSAGE
echo "" >>\$EMAILMESSAGE
#
testval=`ls *.status | wc -l`
echo " Expected tests: 8">> \$EMAILMESSAGE
echo " Completed tests: " \$testval>> \$EMAILMESSAGE
#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_pcsamp_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_pcsamp_results.status ]
  then
    echo " PCSAMP EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " PCSAMP EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " PCSAMP EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_usertime_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_usertime_results.status ]
  then
    echo " USERTIME EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " USERTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " USERTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_hwc_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_usertime_results.status ]
  then
    echo " HWC EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " HWC EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " HWC EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_hwctime_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_hwctime_results.status ]
  then
    echo " HWCTIME EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " HWCTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " HWCTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_io_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_io_results.status ]
  then
    echo " I/O EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " I/O EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " I/O EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_iot_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_iot_results.status ]
  then
    echo " I/O TRACE EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " I/O TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " I/O TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_mpi_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_mpi_results.status ]
  then
    echo " MPI EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " MPI EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " MPI EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a smg2000_${thiscompiler}_openmpi_mpit_results.status ]
then
  if [ -s smg2000_${thiscompiler}_openmpi_mpit_results.status ]
  then
    echo " MPI TRACE EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " MPI TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " MPI TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
fi
#echo "This is an email message test">> \$EMAILMESSAGE
#echo "This is email text" >>\$EMAILMESSAGE
# send an email using /bin/mail
/bin/mail -s "\$SUBJECT" "\$EMAIL" < \$EMAILMESSAGE

#
# End of nested script
#
exit
EOF

echo "pwd=$pwd"

RUN_DIR=$testpath
echo "RUN_DIR=$RUN_DIR"
cd $RUN_DIR
REQ_WALLTIME=1:00
REQ_NNODES=$NodeCount
echo "REQ_NNODES=$REQ_NNODES"
REQ_SCRIPT="$RUN_DIR/smg2000_${thiscompiler}_openmpi_script.sh"
#sbatch --account=FY093085 --time=${REQ_WALLTIME}:00 -N ${REQ_NNODES} ${REQ_SCRIPT}

cat > moab_smg2000_${thiscompiler}_openmpi_script.tcsh << EOF
#!/bin/tcsh
#MSUB -o $testpath/smg2000_${thiscompiler}_openmpi_output.txt
#MSUB -j oe
#MSUB -l nodes=$NodeCount:ppn=8
#MSUB -l walltime=900
#MSUB -N  $testpath/smg2000_${thiscompiler}_openmpi_script.sh

echo Shell is $SHELL
echo Program is $0

echo "BEFORE: Kick off $testpath/smg2000_${thiscompiler}_openmpi_script.sh"
sh  $testpath/smg2000_${thiscompiler}_openmpi_script.sh
echo "AFTER: Kick off $testpath/smg2000_${thiscompiler}_openmpi_script.sh"

EOF

msub moab_smg2000_${thiscompiler}_openmpi_script.tcsh

#msub ${REQ_SCRIPT}

# This now part of the above script
# email script here
# Send out the results for smg2000
# smg2000_${thiscompiler}_openmpi_email.sh
#EMAIL_REQ_SCRIPT="$RUN_DIR/smg2000_${thiscompiler}_openmpi_email.sh"
#sh ${EMAIL_REQ_SCRIPT}

elif [ "$testexe" == "sweep3d" ]
then

cat > sweep3d_${thiscompiler}_openmpi_script.sh << EOF
#!/bin/bash

. ${MODULESHOME}/init/sh
export MODULEPATH=/users/jegsgi/privatemodules:$MODULEPATH

module purge
module load modules openss-mrnet
if [ $thiscompiler == "gnu" ] 
then
    module load openmpi-gcc/1.2.4
elif  [ $thiscompiler == "pgi" ]
then
    module load pgi/7.2-5
    module load openmpi-pgi/1.2.4
elif  [ $thiscompiler == "intel" ]
then
    module load intel-c/10.0.023
    module load openmpi-intel/1.2.4
elif  [ $thiscompiler == "pathscale" ]
then
    module load pathscale/3.0
    module load openmpi-pathscale/1.2.4
fi
echo "NOTE: sweep3d test, start MODULE LIST="
module list
echo "NOTE: sweep3d test, end MODULE LIST="

# setup separate unique raw data directories for each compiler/test combination
rm -rf /scratch3/jegsgi/sweep3d_${thiscompiler}_RAW
mkdir /scratch3/jegsgi/sweep3d_${thiscompiler}_RAW
export OPENSS_RAWDATA_DIR=/scratch3/jegsgi/sweep3d_${thiscompiler}_RAW


which openss
#
export PATH=.:$PATH
executable=`which sweep3d.mpi`
echo "Current directory is:" `\$pwd`
echo "sweep3d.mpi executable path directory is:" \$executable
mpicommand=`which mpirun`
echo "mpirun command path directory is:" \$mpicommand
#
# Read in test parameters
#

testCompiler="${thiscompiler}"

if [ -a default_test_config ] 
then
  echo "Reading the existing default_test_config file"
  BAKIFS=\$IFS
  IFS=\$(echo -en "\n\b")
  exec 3<&0
  exec 0<default_test_config

  read curline
  echo "NOTE: NodeCount: \$curline"
  NodeCount=\$curline
#
  read curline
  echo "NOTE: RankCount: \$curline"
  RankCount=\$curline
#
  read curline
  echo "NOTE: CompilerType: \$curline"
  CompilerType=\$curline
#
  read curline
  echo "NOTE: EmailAddress: \$curline"
  EmailAddress=\$curline

  exec 0<&3

# restore IFS which was used to determine what the field separators are
  IFS=\$BAKIFS
#
fi

#
if [ debug_flag == 1 ]
then
  echo "DEBUG: NodeCount: \$NodeCount"
  echo "DEBUG: RankCount: \$RankCount"
  echo "DEBUG: CompilerType: \$CompilerType"
  echo "DEBUG: EmailAddress: \$EmailAddress"
fi

#
# Run all experiments
#

echo "NOTE: Using openss=" $theopenss
echo "NOTE: Using the raw data directory storage environment variable: OPENSS_RAWDATA_DIR=" $OPENSS_RAWDATA_DIR
echo "NOTE: sweep3d testpath=" $testpath
echo "NOTE: sweep3d \testpath=" \$testpath
echo "NOTE: start pwd=`pwd`"
echo "NOTE: end pwd"

cd $testpath

#
# Run pcsamp and analyze the results
#
openss -offline -f "\$mpicommand -np \$RankCount \$executable" pcsamp
ls *.openss | grep "sweep3d.mpi-pcsamp\." > sweep3d_${thiscompiler}_openmpi_create_pcsamp
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi pcsamp experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_pcsamp > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_pcsamp_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "source_ (sweep3d.mpi: source.f,2)." sweep3d_${thiscompiler}_openmpi_pcsamp_results.log | cat > sweep3d_${thiscompiler}_openmpi_pcsamp_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi pcsamp experiment"
echo "-------------------------------------"

#
# Run usertime and analyze the results
#
openss -offline -f "\$mpicommand -np \$RankCount \$executable" usertime
ls *.openss | grep "sweep3d.mpi-usertime\." > sweep3d_${thiscompiler}_openmpi_create_usertime

echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi usertime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_usertime > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_usertime_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "source_ (sweep3d.mpi: source.f,2)." sweep3d_${thiscompiler}_openmpi_usertime_results.log | cat > sweep3d_${thiscompiler}_openmpi_usertime_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi usertime experiment"
echo "-------------------------------------"
echo ""



openss -offline -f "\$mpicommand -np \$RankCount \$executable" hwc
ls *.openss | grep "sweep3d.mpi-hwc\." > sweep3d_${thiscompiler}_openmpi_create_hwc

echo ""
echo "BEGIN Analyzing sweep3d.mpi hwc experiment"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_hwc > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_hwc_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "source_ (sweep3d.mpi: source.f,2)." sweep3d_${thiscompiler}_openmpi_hwc_results.log | cat > sweep3d_${thiscompiler}_openmpi_hwc_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi hwc experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable" hwctime
ls *.openss | grep "sweep3d.mpi-hwctime\." > sweep3d_${thiscompiler}_openmpi_create_hwctime

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi hwctime experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_hwctime > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_hwctime_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "source_ (sweep3d.mpi: source.f,2)." sweep3d_${thiscompiler}_openmpi_hwctime_results.log | cat > sweep3d_${thiscompiler}_openmpi_hwctime_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi hwctime experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable" io
ls *.openss | grep "sweep3d.mpi-io\." > sweep3d_${thiscompiler}_openmpi_create_io

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi io experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_io > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_io_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "630  __libc_read" sweep3d_${thiscompiler}_openmpi_io_results.log | cat > sweep3d_${thiscompiler}_openmpi_io_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi io experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable" iot
ls *.openss | grep "sweep3d.mpi-iot\." > sweep3d_${thiscompiler}_openmpi_create_iot

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi iot experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_iot > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_iot_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "630  __libc_read" sweep3d_${thiscompiler}_openmpi_iot_results.log | cat > sweep3d_${thiscompiler}_openmpi_iot_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi iot experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable" mpi
ls *.openss | grep "sweep3d.mpi-mpi\-" > sweep3d_${thiscompiler}_openmpi_create_mpi

echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi mpi experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_mpi > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_mpi_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "$RankCount  PMPI_Finalize" sweep3d_${thiscompiler}_openmpi_mpi_results.log | cat > sweep3d_${thiscompiler}_openmpi_mpi_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi mpi experiment"
echo "-------------------------------------"
echo ""


openss -offline -f "\$mpicommand -np \$RankCount \$executable" mpit

#
# Find corresponding experiment database files and create files that can be used to restore the databases
#
ls *.openss | grep "sweep3d.mpi-mpit\-" > sweep3d_${thiscompiler}_openmpi_create_mpit

#
# Use the corresponding experiment database file names to restore the database and print out the status and results for the experiments
#
echo ""
echo "-------------------------------------"
echo "BEGIN Analyzing sweep3d.mpi mpit experiment"
echo "-------------------------------------"
sed 's/^/exprestore -f /' sweep3d_${thiscompiler}_openmpi_create_mpit > new_input.script
echo "log -f sweep3d_${thiscompiler}_openmpi_mpit_results.log" >> new_input.script
cat common_commands >> new_input.script
openss -batch < new_input.script

grep "\$RankCount  PMPI_Finalize" sweep3d_${thiscompiler}_openmpi_mpit_results.log | cat > sweep3d_${thiscompiler}_openmpi_mpit_results.status

echo "-------------------------------------"
echo "END Analyzing sweep3d.mpi mpit experiment"
echo "-------------------------------------"
echo ""

# script to send test results email
# email subject
SUBJECT="OpenSpeedShop MPI sweep3d.mpi executable test results"
# Email To ?
EMAIL=\$EmailAddress
# Email text/message
EMAILMESSAGE="/tmp/openss_test_message.txt"
echo " OpenSpeedShop Performance Tool SWEEP3D.MPI Test Results" >\$EMAILMESSAGE
echo "" >>\$EMAILMESSAGE
echo " Intel compiler, \$NodeCount Nodes \$RankCount ranks">> \$EMAILMESSAGE
thisuname="\`uname -srnmo\`"
echo " System uname: " \$thisuname>> \$EMAILMESSAGE
thisdate="\`date\`"
echo " Date/time of run: " \$thisdate>> \$EMAILMESSAGE
thisdir="\`pwd\`"
echo " Directory where tests were run: " \$thisdir>> \$EMAILMESSAGE
echo "" >>\$EMAILMESSAGE
#
testval=`ls *.status | wc -l`
echo " Expected tests: 8">> \$EMAILMESSAGE
echo " Completed tests: " \$testval>> \$EMAILMESSAGE
#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_pcsamp_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_pcsamp_results.status ]
  then
    echo " PCSAMP EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " PCSAMP EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " PCSAMP EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_usertime_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_usertime_results.status ]
  then
    echo " USERTIME EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " USERTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " USERTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_hwc_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_usertime_results.status ]
  then
    echo " HWC EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " HWC EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " HWC EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_hwctime_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_hwctime_results.status ]
  then
    echo " HWCTIME EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " HWCTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " HWCTIME EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_io_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_io_results.status ]
  then
    echo " I/O EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " I/O EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " I/O EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_iot_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_iot_results.status ]
  then
    echo " I/O TRACE EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " I/O TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " I/O TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_mpi_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_mpi_results.status ]
  then
    echo " MPI EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " MPI EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " MPI EXPERIMENT FAILED">> \$EMAILMESSAGE
fi

#
# if the status file exists and has data then the test succeeded
# if the status file does not exist then the test did not complete and consider it failed
#
if [ -a sweep3d_${thiscompiler}_openmpi_mpit_results.status ]
then
  if [ -s sweep3d_${thiscompiler}_openmpi_mpit_results.status ]
  then
    echo " MPI TRACE EXPERIMENT PASSED">> \$EMAILMESSAGE
  else
    echo " MPI TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
  fi
else
  echo " MPI TRACE EXPERIMENT FAILED">> \$EMAILMESSAGE
fi
#echo "This is an email message test">> \$EMAILMESSAGE
#echo "This is email text" >>\$EMAILMESSAGE
# send an email using /bin/mail
/bin/mail -s "\$SUBJECT" "\$EMAIL" < \$EMAILMESSAGE

#
# End of nested script
#
exit
EOF

echo "pwd=$pwd"

RUN_DIR=$testpath
echo "RUN_DIR=$RUN_DIR"
cd $RUN_DIR
REQ_WALLTIME=1:00
REQ_NNODES=$NodeCount
echo "REQ_NNODES=$REQ_NNODES"
REQ_SCRIPT="$RUN_DIR/sweep3d_${thiscompiler}_openmpi_script.sh"
#sbatch --account=FY093085 --time=${REQ_WALLTIME}:00 -N ${REQ_NNODES} ${REQ_SCRIPT}

cat > moab_sweep3d_${thiscompiler}_openmpi_script.tcsh << EOF
#!/bin/tcsh
#MSUB -o $testpath/sweep3d_${thiscompiler}_openmpi_output.txt
#MSUB -j oe
#MSUB -l nodes=$NodeCount:ppn=8
#MSUB -l walltime=900
#MSUB -N  $testpath/sweep3d_${thiscompiler}_openmpi_script.sh

echo Shell is $SHELL
echo Program is $0

echo "BEFORE: Kick off $testpath/sweep3d_${thiscompiler}_openmpi_script.sh"
sh  $testpath/sweep3d_${thiscompiler}_openmpi_script.sh
echo "AFTER: Kick off $testpath/sweep3d_${thiscompiler}_openmpi_script.sh"

EOF

msub moab_sweep3d_${thiscompiler}_openmpi_script.tcsh

fi


# Send out the results for sweep3d.mpi
# sweep_${thiscompiler}_openmpi_email.sh
#EMAIL_REQ_SCRIPT="$RUN_DIR/sweep_${thiscompiler}_openmpi_email.sh"
#sh ${EMAIL_REQ_SCRIPT}


cd $testpathbase
echo "bottom of the compiler loop, testpathbase=" $testpathbase
#mv $testexe ${testexe}_${thiscompiler}


# end loop through the compiler list
done


# end loop through the test list
done

exit


cd $testpathbase 

